Import( 'env GN_conf' )

# **********************
# initialize environment
# **********************

env = env.Copy()
if '/W4' in env['CCFLAGS']: env['CCFLAGS'].remove('/W4')
if 'icl' == env['CC']:
    unimportant_warnings = [
        '1572', # floating-point comparison
        ]
    env.Append( CCFLAGS = ['/W3'] + ['/Qwd%s'%w for w in unimportant_warnings] )
elif 'cl' == env['CC']:
    env.Append(
        CCFLAGS= ['/W3'],
        CPPDEFINES = Split('_CRT_SECURE_NO_DEPRECATE _CRT_NONSTDC_NO_DEPRECATE') )
    if 'x64' == env.get('MSVS_PLATFORM'):
        unimportant_warnings = [
            '4334', # 32-bit shift convert to 64-bit
            '4267', # conversion from 'size_t' to xxx, possible loss of data
            '4244', # conversion from 'type1' to 'type2', possible loss of data
            ]
        env.Append( CCFLAGS = ['/wd%s'%w for w in unimportant_warnings] )

# ******************
# build jpeg library
# ******************

jpeg_env = env.Copy()
jpeg_env.Append( CPPPATH = [Dir('jpeg').srcnode()] )
if 'gcc' == env['CC']: jpeg_env.Append( CCFLAGS = ['-Wno-main'] )
jpeg_objs = jpeg_env.GN_build_static_objects( env.GN_glob( 'jpeg/*.c' ), pdb = 'GNextern.pdb' )

# *****************
# build fox library
# *****************

if 'xenon' != GN_conf['compiler']:
    fox_env = env.Copy()
    fox_env.Append( CPPPATH = ['../inc/fox'] )
    if 'win32' == env['PLATFORM']:
        fox_env.Append( CPPDEFINES = ['WIN32'] )
    else:
        #fox_conf = env.Configure()
        #if fox_conf.CheckCHeader( 'unistd.h' ) : fox_env.Append( CPPDEFINES=['HAVE_UNISTD_H'] )
        #if fox_conf.CheckCHeader( 'dirent.h' ) : fox_env.Append( CPPDEFINES=['HAVE_DIRENT_H'] )
        #if fox_conf.CheckCHeader( 'sys/time.h' ) : fox_env.Append( CPPDEFINES=['HAVE_SYS_TIME_H'] )
        #if fox_conf.CheckCHeader( 'sys/wait.h' ) : fox_env.Append( CPPDEFINES=['HAVE_SYS_WAIT_H'] )
        #if fox_conf.CheckCHeader( 'sys/param.h' ) : fox_env.Append( CPPDEFINES=['HAVE_SYS_PARAM_H'] )
        #if fox_conf.CheckCHeader( 'sys/select.h' ) : fox_env.Append( CPPDEFINES=['HAVE_SYS_SELECT_H'] )
        #if fox_conf.CheckCHeader( 'sys/ndir.h' ) : fox_env.Append( CPPDEFINES=['HAVE_SYS_NDIR_H'] )
        #if fox_conf.CheckCHeader( 'sys/dir.h' ) : fox_env.Append( CPPDEFINES=['HAVE_SYS_DIR_H'] )
        #if fox_conf.CheckCHeader( 'sys/ipc.h' ) and \
        #   fox_conf.CheckCHeader( 'sys/shm.h' ) : fox_env.Append( CPPDEFINES=['HAVE_SYS_XSHM_H'] )
        #if fox_conf.CheckCHeader( 'sys/mman.h' ) : fox_env.Append( CPPDEFINES=['HAVE_SYS_MMAP_H'] )
        #fox_conf.Finish();
        pass
    if 'cl' == env['CC']:
        fox_env.Append( CCFLAGS = ['/GR'] ) # Enable RTTI for Vistual Studio
        unimportant_warnings = [
            '4018', # '<=' : signed/unsigned mismatch
            '4146', # unary minus operator applied to unsigned type, result still unsigned
            '4244', # onversion from 'LONG' to 'FX::FXushort', possible loss of data
            '4307', # '+' : integral constant overflow
            '4800', # forcing value to bool 'true' or 'false' (performance warning)
            ]
        fox_env.Append( CCFLAGS = ['/wd%s'%w for w in unimportant_warnings] )
    if 'icl' == env['CC']:
        unimportant_warnings = [
            '61',   # integer operation result is out of range
            '69',   # integer conversion resulted in truncation
            '186',  # pointless comparison of unsigned integer with zero
            ]
        fox_env.Append( CCFLAGS = ['/Qwd%s'%w for w in unimportant_warnings] )
    #if '/WX' in fox_env['CCFLAGS']: fox_env['CCFLAGS'].remove('/WX')
    #if '-Werror' in fox_env['CCFLAGS']: fox_env['CCFLAGS'].remove('-Werror')
    fox_objs = fox_env.GN_build_static_objects( env.GN_glob('fox/lib/*.cpp'), 'xincs.h', 'fox/lib/pch.cpp', 'GNextern.pdb' )
    fox_env.GN_build_program( 'FOXreswrap', ['fox/utils/reswrap.cpp'], pdb = 'FOXreswrap.pdb', ignoreDefaultLibs=True )
else: fox_objs = []

# ********************
# build extern library
# ********************

srcs = []
if 'xenon' != GN_conf['compiler']: srcs += env.GN_glob( 'glew/*.c' )
srcs += env.GN_glob( Split('lua/*.c zlib/*.c png/*.c pcre/*.c* tinyxml/*.cpp freetype2/*.c'), True )
srcs += jpeg_objs
srcs += fox_objs
env.GN_build_static_library( 'GNextern', srcs )

TODO
====

- 程序中标注TODO的地方

- p0
  - coding style: capital initial for function name.
  - scene framework and gpu resource database:
    - better way to resolve standard/built-in effects and textures (instead of
      using "@")
      - create a utility function to do it. Or,
      - create a file system for build-in resources
  - mesh converter/loader
    - load and view specific model, instead of the whole scene
    - better ASE support:
      - opacity map (teraiyuki\woman.ase)
      - non-geometry node (games\swordman\1.ase)
  - support chinese in XML parser
  - skin mesh test case: porting DXSDK sample.
  - Cg shader
  - Endian swap:
    - Swap vertex buffer endian based on vertex format
    - Swap index buffer endian based on index format.
  - Dictionary template that replaces std::map

- p1
  - Runtime option managers that could be modified by:
    - Environment variable
    - Registry
    - Config file
    - Command line arguments
  - A tweakable variable template for easy parameter tuning.
  - Scene framework:
    - add light entity to SimpleWorldDesc
    - experiment with scene framework that supports ultra large world
      - spatial management
      - resource streaming
  - A coordinate basis renderer (like Maya)
  - A boost style smart pointer template that do not require inheritence form
    GN::RefCounter.
  - Renderer unit test framework
  - Enable ETW in profiler
  - GPU resouce aliasing

- p2
  - mesh classes
    - a cpu mesh that could be used to convert mesh format
    - a half-edge mesh for more complex mesh algorithm
  - PCXS2 GPU plugin:
    - move operations to GPU as much as possible
    - model beautifier
      - add bump map and tessellation to PS2 model if possible.
      - implement a CPU based prototype first.
  - FBX loader
  - 3DS loader
  - COLLADA loader
  - DDS viewer plugin
  	- don't write full viewer from scratch.
  	- just provide a plugin for existing picture viewers like acdsee or something.
  - sigslot class:
    - allow any type of functor
    - check behavior of redundant slot functors.
  - memory-mapped IO.

- p3
  - Custom sscanf(...)
  - cross-platform window util functions:
    - set window title
    - change window size
    - ...
    - use wxWidgets?
  - runtime call-stack dump
  - in game GUI:
  - make sure OGL resource creation/deletion do not affect renderer states
    - depends on OGL renderer state dumper

- p?
  - script layer
  - network layer
  - multi-window rendering
  - refine build system
    - figure out a way to simplify scons script
  - image format conversion
  - a ray tracer (for self-learning purpose)

ISSUES
======

- Could mesh be a first class parameter of GPU, like texture?
  - RESOLVED: No, since that would make resource aliasing very hard, if not impossible.

- Unified interface for different APIs is too difficult, and maybe pointless.
  How about a higher level abstraction: material/effect system?
  - RESOLVED: we need both
    - They stay at different level ans serve for different purpose.
      - Unified API is easy for prototyping
      - Material/effect system is required to build complex rendering framework.
        It could be built upon unified API, or not.

- Do we need embed buffer for short string?

- Custom string class or std::string?
  - RESOLVED: custom string class.
  - WHY?
    - std::string can't accept NULL pointer as valid input.
    - std::char_trait<wchar_t> is not well supported on cygwin.

- TinyXml or Expat w/ DOM wrapper?
  - RESOLVED: expat.
    - expat is faster.
    - custom DOM wrapper fits our requirement better, and is pretty easy to implement.

DROPPED TASKS
=============
- runtime configuable profilers, like loggers
  - WHY: profiler has to be light-weight and fast. Logger style configuration
         is too heavy.

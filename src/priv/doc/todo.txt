- 程序中标注TODO的地方

- to make a simple game, like terris clone:
  - load effect/shader from xml file: done
  - load mesh: done
  - simple GUI
  - task manager/coordinator

- p1
  - multi-thread architect
    - game thread: major game logic thread
    - render thread: the only thread that touches rendering device.
    - resource loading thread(s)
    - configuable resource cache with limited video memory footprint.
  - treat all surfaces as parameter of shader, like uniforms
  - GFX renderer
    - set sampling parameters (such as filters wrapping) at binding time
    - render target management
      - D3D: msaa
      - OGL: FBO with AA

- p2
  - render state block redesign: using packed bit fields.
  - memory pool class is not looking good
    - when call dtor and when not?
    - see others pool implementation on net
  - Drawable optimization:
  	- using hashed string map to reference uniforms and textures.
  - in-game GUI system
    - font class
    - textbox class
  - refine sigslot class to allow any type of functor
  - smart enum class
  - skin mesh test case: porting DXSDK sample.
  - UT
    - array classes
    - LRU list in resource manager
    - make sure OGL resource creation/deletion do not affect renderer states
    - format conversion between ClrFmt and D3DFMT
  - memory-mapped IO.
  - GFX system
    - recreate OGL context, when monitor changed.
    - queryXXX(....)
    - support using "c0" as uniform name of D3D HLSL shader.
    - consider remove drawBegin() and drawEnd()
    - renderer state dump system
    - add support to OGL FSAA
    - Cg shader
    - consider removing syscopy from vertex/index buffer
      - remove sys-copy of VBO.
    - Why D3D quad renderer is so slow, comparing with CEGUI sample application.
    - support render-to-texture on xenon (including depth texture)
    - test: IDirect3DDevice9::UpdateTexture() when target is render target texture.
    - learn EXT_framebuffer_object, ARB_draw_buffer, ARB_pixel_buffer_object
    - shared uniform

- p3
  - code page convertor and test application
    - may support convertion from/to utf8 be enough?
  - blender exporter/importer
  - new build system:
    - two steps:
      - compiler configuration script, called by setupEnv.cmd/setupEnv.sh
      - build script
  - support to multiple joysticks.
  - image format conversion
  - try implementing a ray tracer
  - check doxygen errors and warnings.
  - Custom sscanf(...)
  - cross-platform window util functions:
    - set window title
    - change window size
    - ...
  - runtime call-stack dump
  - hash map/table

ISSUES
======

- Uniform interface for different APIs is too difficult, and maybe pointless.
  How about a higher level abstraction: material/effect system?

- Do we need embed buffer for short string?

- Custom string class or std::string?
  - RESOLVED: custom string class.
  - WHY?
    - std::string can't accept NULL pointer as valid input.
    - std::char_trait<wchar_t> is not well supported on cygwin.

- TinyXml or Expat w/ DOM wrapper?
  - OPEN.
    - TinyXml:
      - easy to use (DOM)
      - no format output to string buffer
    - Expat
      - may faster then TinyXml
      - need a wrapper to make it easy to use
      - no xml output support

TODO
====

- 程序中标注TODO的地方

- p0
  - Handle out-of-memory in DynaArray (not using exception)
  - Special "use current" tag in GpuContext for color and depth render target.
  - Binary 3D model importer
    - FBX
      - replace FBX test app with something else (not owned by Autodesk).
    - assimp looks really promising.
      - assimp currently does not support FBX. Consider implement one for it.
  - D3D resource leaking in GNtestEngine and GNsampleDolphin:
    - It comes from Cg Toolkit. And upgrading to the lasted Feb11 version
      doesn't solve the issue.
  - Optimized vector and geomtry class to be SSE/xnamath compatible.
  - Winphone 7 integration
  - Cuda or OpenCL integration
  - runtime tweakable parameters: client/server communication
    - basic features:
      - NOT for fast changing variables.
      - numeric types: float, integer, enumeration, boolean
        - application defined range or value set
      - geometric types: vec2, vec3, vec4, mat4x4, mat3x3
      - dual way variable changing notification
      - compile time switch to remove tweakable code entirely
      - separate client (tuner) and server (variables)
  - replace STL containers:
  	- queue, list, set

- p1
  - optimize vector/matrix classes (using xnamath or SSE2)
  - upgrade Cg runtime.
  - Use Windows font engine (Direct2D?)
  - mesh converter/loader
    - load and view specific model, instead of the whole scene
    - better ASE support:
      - opacity map (teraiyuki\woman.ase)
      - non-geometry node (games\swordman\1.ase)
  - skin mesh test case: porting DXSDK sample.
  - Unit test for the CommandBuffer class.
  - New build system:
    - based on GNU make.
    - refine SCons script
    - avoid using /Yd in build script for cl.exe
  - Runtime option managers that could be modified by:
    - Environment variable
    - Registry
    - Config file
    - Command line arguments
  - Scene framework:
    - add light entity to SimpleWorldDesc
    - experiment with scene framework that supports ultra large world
      - spatial management
      - resource streaming
  - A coordinate basis renderer (like Maya)
  - A boost style smart pointer template that do not require inheritence form
    GN::RefCounter.
  - Renderer unit test framework
  - Enable ETW in profiler
  - GPU resouce aliasing

- p2
  - refine PCH builder to generate PCH out of "pch.h" directly, instead of from "pch.cpp".
    so that the PCH builder works the same way in gcc and vstudio.
  - Refine uniform loading from XML
  - mesh classes
    - a cpu mesh that could be used to convert mesh format
    - a half-edge mesh for more complex mesh algorithm
  - PCXS2 GPU plugin:
    - move operations to GPU as much as possible
    - model beautifier
      - add bump map and tessellation to PS2 model if possible.
      - implement a CPU based prototype first.
  - DDS viewer plugin
  	- don't write full viewer from scratch.
  	- just provide a plugin for existing picture viewers like acdsee or something.
  - sigslot class:
    - allow any type of functor
    - check behavior of redundant slot functors.
  - refine Delegate performance: avoid virtual functions
  - memory-mapped IO.

- p3
  - Custom sscanf(...)
  - cross-platform window util functions:
    - set window title
    - change window size
    - ...
    - use wxWidgets?
  - runtime call-stack dump
  - in game GUI:
  - make sure OGL resource creation/deletion do not affect renderer states
    - depends on OGL renderer state dumper

- p?
  - script layer
  - network layer
  - multi-window rendering
  - image format conversion
  - a ray tracer (for self-learning purpose)

RESOLVE ISSUES
==============

- FontFace unit should be integer or float?
  - RESOLVED: float.
  - Keep it float in case for 3D texture rendering.
  - For 2D rendering, the renderer could round the float to integer.

- Capital function name or not?
  - RESOLVED: No. Function/Method name starts with lower case character.
  - pros:
    - function/method name is never same as type name: Gpu & gpu()
    - won't conflict with Windows API macro like CreateFile.
  - cons: more renaming works when porting other codes into garnet library.

- Could mesh be a first class parameter of GPU, like texture?
  - RESOLVED: No, since that would make resource aliasing very hard, if not impossible.

- Unified interface for different APIs is too difficult, and maybe pointless.
  How about a higher level abstraction: material/effect system?
  - RESOLVED: we need both
    - They stay at different levels and serve for different purposes.
      - Unified API is easy for prototyping, and simplify tasks like clearing
        screen, presenting, switching display mode, handling device lost.
      - Material/effect system is required to build complex rendering framework.
        It could be built upon unified API, or not.

- Custom string class or std::string?
  - RESOLVED: custom string class.
  - WHY?
    - std::string can't accept NULL pointer as valid input.
    - std::char_trait<wchar_t> is not well supported on cygwin.

- TinyXml, RapidXml or Expat?
  - RESOLVED: expat.
  	- TinyXml is too slow.
    - RapidXml does not support encoding right. It always read text as single
      byte char*, which means it might confuse the second byte of a multi-byte
      character with a ascii character.
    - Custom DOM wrapper fits our requirement better, and is pretty easy to implement.

- COLLADA loader?
  - RESOLVED: no.
    - We've supported ASE already. So there's no need for another TEXT based
     format. We need to support binary format like FBX.

OPEN ISSUES
===========

- Embbed buffer for short string?


DROPPED TASKS
=============
- runtime configuable profilers, like loggers
  - WHY: profiler has to be light-weight and fast. Logger style configuration
         is too heavy.

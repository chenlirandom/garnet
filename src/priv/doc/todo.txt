BUGS
====

- GFX:
  - Startup of GFXOGL module sometimes very slow:
    - pin down to the 1st call to opengl function in oglWinDisp.cpp
    - It seems caused by remote symbol loading

TODO
====

- 程序中标注TODO的地方

- p1
  - resource managers (textures, meshes, materials/effects)
  - sample application
    - render to texture
    - GLSL test application
  - mesh class
  - effect class
    - ut
    - default uniform value
  - blender exporter/importer
  - gui system
    - font class
      - code page convertor
- p2
  - continue implementing GFX module
  - refine GFX module:
    - UT for parameter manager
    - refine device management
  - Rewrite SCons script
  - runtime switchable GN_TRACE( level, msg, .... )
- p3
  - try implementing a ray tracer
  - check doxygen errors and warnings.
  - XWindow class UT
  - Custom sscanf(...)
  - cross-platform window util functions:
    - set window title
    - change window size
    - ...
  - runtime call-stack dump
  - hash map/table
  - implement POSIX version of GN::path:glob()
  - UT for path functions: resolve, glob

DONE
====

- POSIX implementation
  - implement input module on POSIX platform
  - implement GNogl on POSIX platform
- UT for getEnv() and setEnv().
- convert input module to static library
- SCons
  - EMT64 icl support
- Refine GFX:
  - OGL GLSL shader
  - parameter manager
  - quad renderer for GFXOGL module
  - d3d hlsl shader
  - ogl ARB shader
  - Fix link problem of GFX module in static build.
  - remove dependencies to GNd3d
    - move d3dformat to string to gfx d3d module
  - fix device-lost bug in GNgfxTest
  - refine device management
  - drawQuad(...)
    - D3DQuad(): support to FFP
  - buffer manager of GFXOGL
  - vertex binding of GFXOGL
  - enable multiple context support of GLEW
  - Window property save/restore
  - Refine ntWindow class:
    - support external window
    - getClientSize();
  - remove platform specific code from display manager.
  - UT for GFX module: using external render window
- Run UT for both GFXD3D and GFXOGL will throw exception.
  - FIXED: should use different render window class for each instance of NTRenderWindow.

ISSUES
======

- QUESTION: Use boost jam, or refine SCons?
  - bjam
    - pros
      - fast script parsing speed
      - build-in support to amd64
    - cons
      - can't generate VC project
  - SCons
    - pros
      - can generate VC project
      - much more readable then jam code.
    - cons
      - script parsing is a little bit slow
      - no amd64 support
      - can distinguish different version of same compiler
  - ANSWER: SCons

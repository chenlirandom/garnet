Import( 'GN' )

import os.path

def GenConfigHeader( target, source, env ):

	def bool2str( b ):
		if b: return '1'
		else: return '0'

	FILE = open( target[0].path, 'wt' )
	FILE.writelines(
		'// *NOTE*: AUTO GENERATED FILE. DO NOT EDIT!\n'
		'//\n'
		'// This file defines compile time configurations.\n'
		'//\n'
		'\n'
		'// Garnet is build as static or dynamic library.\n'
		'#define GN_PLATFORM_IS_STATIC '       + bool2str( GN.static_build    ) + '\n'
		'\n'
		'// Has OpenGL\n'
		'#define GN_PLATFORM_HAS_OGL   '       + bool2str( GN.has_ogl         ) + '\n'
		'\n'
		'// Has dxerr.h\n'
		'#define GN_PLATFORM_HAS_DXERR '       + bool2str( GN.has_dxerr       ) + '\n'
		'\n'
		'// Has xnamath.h\n'
		'#define GN_PLATFORM_HAS_XNAMATH '     + bool2str( GN.has_xnamath     ) + '\n'
		'\n'
		'// Has directxmath.h\n'
		'#define GN_PLATFORM_HAS_DIRECTXMATH ' + bool2str( GN.has_directxmath ) + '\n'
		'\n'
		'// Has D3D9 (Windows or Xbox)\n'
		'#define GN_PLATFORM_HAS_D3D9  '       + bool2str( GN.has_d3d9        ) + '\n'
		'\n'
		'// Has D3D10\n'
		'#define GN_PLATFORM_HAS_D3D10 '       + bool2str( GN.has_d3d10       ) + '\n'
		'\n'
		'// Has D3D11\n'
		'#define GN_PLATFORM_HAS_D3D11 '       + bool2str( GN.has_d3d11       ) + '\n'
		'\n'
		'// Has D3D11.1\n'
		'#define GN_PLATFORM_HAS_D3D11_1 '     + bool2str( GN.has_d3d11_1     ) + '\n'
		'\n'
		'// Has D3DX11\n'
		'#define GN_PLATFORM_HAS_D3DX11 '      + bool2str( GN.has_d3dx11      ) + '\n'
		)
	FILE.close()
	return 0


env = GN.NewBuildEnv()
target = 'garnet/base/platform.' + GN.target_os + "." + GN.target_cpu + '.h'
env.AlwaysBuild( [target] )
GN.NewTarget( 'GNinc', env.Command( target, None, GenConfigHeader ) )

Import( 'GN' )

env = GN.NewBuildEnv()

# ------------------------------------------------------------------------------
# D3D11 hooks
# ------------------------------------------------------------------------------

d3d11hookdll = GN.BinplaceDLL( GN.BuildDLL( env, 'GNd3d11Hook',
    [
        'd3d11hooks_main.cpp',
        'd3d11factories.cpp',
        'd3d11hooks.cpp',
        'd3d11interfaces.cpp',
    ],
    'pch.h', 'd3d11_pch.cpp' ) )

d3d11_env = env.Clone()
d3d11_env.Append( LIBPATH = ['.'], LIBS = ['GNd3d11Hook'] )

d3d11dll = GN.BinplaceDLL( GN.BuildDLL( d3d11_env, 'd3d11wrapper',
    [
        'd3d11.cpp',
        'd3d11_asm.asm',
    ],
    defFile='d3d11.def' ), rename='d3d11.dll', extraDependencies=d3d11hookdll )

dxgidll = GN.BinplaceDLL( GN.BuildDLL( d3d11_env, 'dxgiwrapper',
    [
        'dxgi.cpp',
        'dxgi_asm.asm',
    ],
    defFile='dxgi.def' ), rename='dxgi.dll', extraDependencies=d3d11hookdll )

d3d11_targets = GN.NewDefaultTarget( 'GNd3d11Hook', [d3d11hookdll, d3d11dll, dxgidll] )

# ------------------------------------------------------------------------------
# D3D9 hooks
# ------------------------------------------------------------------------------

d3d9hookdll = GN.BinplaceDLL( GN.BuildDLL( env, 'GNd3d9Hook',
    [
        'd3d9hooks_main.cpp',
        'd3d9factories.cpp',
        'd3d9hooks.cpp',
        'd3d9interfaces.cpp',
    ],
    'pch.h', 'd3d9_pch.cpp' ) )

d3d9_env = env.Clone()
d3d9_env.Append( LIBPATH = ['.'], LIBS = ['GNd3d9Hook'] )

d3d9dll = GN.BinplaceDLL( GN.BuildDLL( d3d9_env, 'd3d9wrapper',
    [
        'd3d9.cpp',
        'd3d9_asm.asm',
    ],
    defFile='d3d9.def' ), rename='d3d9.dll', extraDependencies=d3d9hookdll )

d3d9_targets = GN.NewDefaultTarget( 'GNd3d9Hook', [d3d9hookdll, d3d9dll] )

GN.NewDefaultTarget( 'GNd3dHook', d3d11_targets + d3d9_targets )

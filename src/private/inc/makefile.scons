Import( 'GN' )

import os.path

def bool2str( b ):
	if b: return '1'
	else: return '0'

def GenConfigHeader( target, source, env ):

	FILE = open( target[0].path, 'wt' )
	FILE.writelines(
		'// *NOTE*: BUILD GENERATED FILE. DO NOT EDIT!\n'
		'//\n'
		'// This file defines compile time configurations.\n'
		'//\n'
		'\n'
		'// Garnet is build with debug code enabled.\n'
		'#define GN_BUILD_DEBUG_ENABLED '     + bool2str( GN.variant == 'debug' ) + '\n'
		'\n'
		'// Garnet is build with profiling code enabled.\n'
		'#define GN_BUILD_PROFILING_ENABLED ' + bool2str( (GN.variant == 'debug') or (GN.variant == 'profiling') ) + '\n'
		'\n'
		'// Garnet is build as static or dynamic libraries.\n'
		'#define GN_BUILD_IS_STATIC '         + bool2str( GN.static_link     ) + '\n'
		'\n'
		'// Garnet is build with OpenGL enabled\n'
		'#define GN_BUILD_HAS_OGL '           + bool2str( GN.has_ogl         ) + '\n'
		'\n'
		'// Garnet is build with D3D9 enabled\n'
		'#define GN_BUILD_HAS_D3D9 '          + bool2str( GN.has_d3d9        ) + '\n'
		'\n'
		'// Garnet is build with D3D11.0 enabled\n'
		'#define GN_BUILD_HAS_D3D11 '         + bool2str( GN.has_d3d11       ) + '\n'
		'\n'
		'// Garnet is build with D3D11.1 enabled\n'
		'#define GN_BUILD_HAS_D3D11_1 '       + bool2str( GN.has_d3d11_1     ) + '\n'
		'\n'
		'// Has xnamath.h\n'
		'#define GN_BUILD_HAS_XNAMATH '       + bool2str( GN.has_xnamath     ) + '\n'
		'\n'
		'// Has directxmath.h\n'
		'#define GN_BUILD_HAS_DIRECTXMATH '   + bool2str( GN.has_directxmath ) + '\n'

		# TODO: consider move the followings to GNcore, since the don't affect public interface of garnet.

		'\n'
		'// Garnet is build with Has dxerr.h\n'
		'#define GN_BUILD_HAS_DXERR '       + bool2str( GN.has_dxerr       ) + '\n'
		'\n'
		'// Garnet is d3dcompiler.h\n'
		'#define GN_BUILD_HAS_D3DCOMPILER ' + bool2str( GN.has_d3dcompiler ) + '\n'
		'\n'
		'// Garnet is build with D3D9X\n'
		'#define GN_BUILD_HAS_D3DX9 '       + bool2str( GN.has_d3dx9       ) + '\n'
		)
	FILE.close()
	return 0


env = GN.NewBuildEnv()
target = 'garnet/base/build.h'
env.AlwaysBuild( [target] )
GN.NewTarget( 'GNinc', env.Command( target, None, GenConfigHeader ) )

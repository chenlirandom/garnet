Import('GN env compiler variant name target')

# local functions
def to_relpath( files ):
    return [ GN.relpath( File(x).srcnode().path, Dir(target_dir).srcnode().path ) for x in files ]

import os.path

# determine target directory
if 'vc80' == compiler.name:
    target_dir = '8.0'
else:
    target_dir = '7.1'

# determine variant string
if 'ppc' == compiler.cpu:
    variant_str = '%s|Xenon'%variant
elif 'x64' == compiler.cpu:
    variant_str = '%s|x64'%variant
elif 'x86' == compiler.cpu:
    variant_str = '%s|Win32'%variant
else:
    GN.error( 'unknown target CPU : %s'%compiler.cpu )
    Exit(-1)

# build target directory
absdir = Dir(target_dir).srcnode().abspath
if not os.path.exists( absdir ) : os.makedirs( absdir )

# compose command line arguments
cmdargs = 'variant=%s compiler=%s os=%s cpu=%s'%(variant,compiler.name, compiler.os, compiler.cpu)

# collect source files
sources = []
for x in target.sources : sources += x.sources
sources += GN.glob( '%s/*.[hi]*'%target.path, True )

# collect header files
incs = []
if 'GNbase' == name:
    incs = GN.glob( '#src/priv/inc/*.[hi]*', True )
elif 'GNextern' == name:
    incs = GN.glob( '#src/extern/inc/*.[hi]*', True )

# do build
proj = env.MSVSProject(
    target      = os.path.join( target_dir, name ) + env['MSVSPROJECTSUFFIX'],
    buildtarget = target.targets[0],
    variant     = variant_str,
    cmdargs     = cmdargs,
    srcs        = to_relpath( sources ),
    incs        = to_relpath( incs ),
    localincs   = [],
    resources   = [],
    misc        = [],
    auto_build_solution = 0,
    )
AlwaysBuild( proj )
Alias( 'msvc', proj )

Import( 'env GN_conf GN_targets' )

import os, os.path

root = os.path.join( GN_conf['platform'], GN_conf['compiler'], GN_conf['variant'] )

def doInstall( alias, dir, names ):
    for name in names:
        if name in GN_targets and GN_targets[name]:
            item = env.Install( dir, GN_targets[name] )
            GN_targets[name] = item
            env.Alias( alias, item )

def doCopyDir( alias, target, source ):
    for src in env.GN_glob('*.*', source, True):
        dst = os.path.join( target, env.GN_relpath(src,source) )
        env.Command( dst, src, Copy('$TARGET', '$SOURCE') )
        env.Alias( alias, dst )

# populate sample directory
doInstall(
    'samples',
    os.path.join( root, 'samples' ),
    Split('GNcoreBin GNgfxD3DBin GNgfxOGLBin GNtest GNgfxTest') )

# make test executable depends on all shared libraries.
for y in Split('GNtest GNgfxTest'):
    if y in GN_targets:
        for x in Split('GNcoreBin GNgfxD3DBin GNgfxOGLBin'):
            if x in GN_targets: env.Depends( GN_targets[y], GN_targets[x] )

# Make binaries depend on manifest and PDB files, to make sure those files are copied
# to binary directory, before execution of the binaries.
for target in Split('GNcoreBin GNgfxD3DBin GNgfxOGLBin GNTest GNgfxTest'):
    if target in GN_targets:
        for x in GN_targets[target][1:]:
            env.Depends( GN_targets[target][0], x )

# run unit test
def run_test( target, source, env ):
    return os.spawnl( os.P_WAIT, target[0].path )
AddPostAction( GN_targets['GNtest'][0], run_test )

# populate SDK directory
sdk_root = os.path.join( root, 'sdk' )
doInstall(
    'sdk',
    os.path.join(sdk_root,'bin'),
    Split('GNcoreBin GNgfxD3DBin GNgfxOGLBin') )
doCopyDir(
    'sdk',
    os.path.join(sdk_root,'inc'),
    os.path.join('#src','priv','inc') )
doInstall(
    'sdk',
    os.path.join(sdk_root,'lib'),
    Split('GNcoreLib GNgfxD3DLib GNgfxOGLLib GNbase GNextern GNd3d GNogl') )
doInstall(
    'sdk',
    os.path.join(sdk_root,'manual'),
    Split('GNman') )

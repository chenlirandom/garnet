Import( 'env GN_conf' )

env = env.Copy()
if '/W4' in env['CCFLAGS']: env['CCFLAGS'].remove('/W4')
if 'icl' == env['CC']:
    unimportant_warnings = [
        '1572', # floating-point comparison
        ]
    env.Append( CCFLAGS = ['/W3'] + ['/Qwd%s'%w for w in unimportant_warnings] )
elif 'cl' == env['CC']:
    env.Append( CCFLAGS= ['/W3'] )
    if 'x64' == env.get('MSVS8_PLATFORM'):
        unimportant_warnings = [
            '4334', # 32-bit shift convert to 64-bit
            '4267', # conversion from 'size_t' to xxx, possible loss of data
            '4244', # conversion from 'type1' to 'type2', possible loss of data
            ]
        env.Append( CCFLAGS = ['/wd%s'%w for w in unimportant_warnings] )

env.Append( CPPPATH = '../inc/garnet/extern' )

# compile jpeg library
jpeg_env = env.Copy()
jpeg_env.Append( CPPPATH = [Dir('jpeg').srcnode()] )
if 'gcc' == env['CC']: jpeg_env.Append( CCFLAGS = ['-Wno-main'] )
jpeg_objs = jpeg_env.GN_build_static_objects( env.GN_glob( 'jpeg/*.c' ), pdb = 'GNextern.pdb' )

# build source list
srcs = []
if 'xenon' != GN_conf['compiler']: srcs += env.GN_glob( 'glew/*.c' )
srcs += env.GN_glob( Split('lua/*.c zlib/*.c png/*.c pcre/*.c* tinyxml/*.cpp') ) + jpeg_objs

env.GN_build_static_library( 'GNextern', srcs )

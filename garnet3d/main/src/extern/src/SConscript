Import( 'GN' )

# ******************
# define build flags
# ******************

ccflags = []
cppdefines = []

if 'icl' == GN.compiler.name :
    unimportant_warnings = [
        '1572', # floating-point comparison
        ]
    ccflags += ['/W2'] + ['/Qwd%s'%w for w in unimportant_warnings]
    cppdefines += ['_CRT_SECURE_NO_DEPRECATE','_CRT_NONSTDC_NO_DEPRECATE']
elif 'vc71' == GN.compiler.name:
    ccflags += ['/W3']
elif 'vc80' == GN.compiler.name:
    ccflags += ['/W3']
    cppdefines += ['_CRT_SECURE_NO_DEPRECATE','_CRT_NONSTDC_NO_DEPRECATE']
    if 'x64' == GN.compiler.cpu:
        unimportant_warnings = [
            '4334', # 32-bit shift convert to 64-bit
            '4267', # conversion from 'size_t' to xxx, possible loss of data
            '4244', # conversion from 'type1' to 'type2', possible loss of data
            ]
        ccflags += ['/wd%s'%w for w in unimportant_warnings]
elif 'xenon' == GN.compiler.name:
    cppdefines += ['NO_GETENV'] # Xenon platform does not support getenv()

# **********************
# define source clusters
# **********************
jpeg_cluster = GN.newSourceCluster( GN.glob( 'jpeg/*.c' ) )
if 'gcc' == GN.compiler.name or 'mingw' == GN.compiler.name: jpeg_cluster.addCompileFlags( CCFLAGS = ['-Wno-main'] )
jpeg_cluster.addCompileFlags( CPPPATH=['jpeg'], CCFLAGS = ccflags, CPPDEFINES = cppdefines )
jpeg_cluster.removeCompileFlags( CCFLAGS = ['/W4','/Wcheck'] )

common_sources = GN.glob( Split('expat/*.c pcre/*.c* png/*.c zlib/*.c'), True )
if 'mingw' != GN.compiler.name: common_sources += GN.glob( Split('freetype2/*.c lua/*.c tinyxml/*.cpp'), True )
if GN.conf['has_ogl']: common_sources += GN.glob( 'glew/*.c' )
common_cluster = GN.newSourceCluster( common_sources )
common_cluster.addCompileFlags( CCFLAGS = ccflags, CPPDEFINES = cppdefines )
common_cluster.removeCompileFlags( CCFLAGS = ['/W4','/Wcheck'] )

# **********************
# define source clusters
# **********************
lib = GN.newTarget( 'stlib', 'GNextern', [jpeg_cluster,common_cluster] )
if 'mswin' == GN.compiler.os:
    lib.externalDependencies = ['glu32','opengl32']
elif 'xenon' != GN.compiler.os:
    lib.externalDependencies = ['GLU','GL','X11']

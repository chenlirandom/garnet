<?xml version="1.0" encoding="utf-8"?>
<effect>
    <parameters>
        <uniform name="MATRIX_PVW" type="MATRIX44" count="1"/>
        <uniform name="MATRIX_WORLD_INV" type="MATRIX44" count="1" desc="inverse world matrix"/>
        <uniform name="LIGHT0_POS" type="VECTOR4" count="1" desc="light position in world space"/>
        <uniform name="LIGHT0_PVW" type="MATRIX44" count="1"/> <!-- transform from object space to light space -->
        <texture name="shadowmap"/>
    </parameters>
    <gpuprograms>
        <gpuprogram name="d3d" lang="HLSL9">
            <uniref shaderParameter="pvw" effectParameter="MATRIX_PVW"/>
            <uniref shaderParameter="invworld" effectParameter="MATRIX_WORLD_INV"/>
            <uniref shaderParameter="light0_pos" effectParameter="LIGHT0_POS"/>
            <uniref shaderParameter="light0_pvw" effectParameter="LIGHT0_PVW"/>
            <texref shaderParameter="shadowmap" effectParameter="shadowmap"/>
            <vs entry="main">
<![CDATA[
struct vsinput
{
	float4 pos : POSITION;
	float3 nrm : NORMAL;
	float2 tex : TEXCOORD0;
};
struct vsoutput
{
	float4 pos    : POSITION;
    float4 shadow : TEXCOORD0;
	float4 nrm    : TEXCOORD1; // xyz: normal in object space;          w : texcoord.u
	float4 lpos   : TEXCOORD2; // xyz: light direction in object space; w : texcoord.v
};
uniform float4x4 pvw;
uniform float4x4 invworld;
uniform float4   light0_pos; // light position in world space
uniform float4x4 light0_pvw;
vsoutput main( vsinput vi )
{
	vsoutput vo;

	// get light direction in object space
	float3 lightpos_os = mul( invworld, light0_pos );
	float3 lightdir_os = lightpos_os - vi.pos.xyz;

	vo.pos    = mul( pvw, vi.pos );
	vo.shadow = mul( light0_pvw, vi.pos );
	vo.nrm.xyz  = vi.nrm;
	vo.nrm.w    = vi.tex.x;
	vo.lpos.xyz = lightdir_os;
	vo.lpos.w   = vi.tex.y;

	return vo;
}
]]>
            </code>
            <ps entry="main">
<![CDATA[
struct vsoutput
{
	float4 pos    : POSITION;
	float4 shadow : TEXCOORD0; // shadow texture cooridnate
	float4 nrm    : TEXCOORD1; // xyz: normal in object space;         w : texcoord.u
	float4 lpos   : TEXCOORD2; // xyz: light position in object space; w : texcoord.v
};
sampler shadowmap;
float4 main( vsoutput vi ) : COLOR0
{
	float shadow = tex2Dproj( shadowmap, vi.shadow );
	float lighting = 0.1 + clamp( dot( normalize(vi.nrm.xyz), normalize(vi.lpos.xyz) ), 0, 1 );
	return shadow * lighting;
}
]]>
            </code>
        </shader>
    </gpuprograms>
    <techniques>
        <technique name="d3d">
            <pass gpuprogram="d3d"/>
        </technique>
    </techniques>
</effect>

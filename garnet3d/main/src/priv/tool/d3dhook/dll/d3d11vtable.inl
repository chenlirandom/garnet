// script generated file. Do _NOT_ edit.

// -----------------------------------------------------------------------------
// ID3D11DeviceChild
// -----------------------------------------------------------------------------
typedef struct ID3D11DeviceChildVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11DeviceChild * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11DeviceChild * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11DeviceChild * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11DeviceChild * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11DeviceChild * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11DeviceChild * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11DeviceChild * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    END_INTERFACE
} ID3D11DeviceChildVtbl;

// -----------------------------------------------------------------------------
// ID3D11DepthStencilState
// -----------------------------------------------------------------------------
typedef struct ID3D11DepthStencilStateVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11DepthStencilState * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11DepthStencilState * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11DepthStencilState * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11DepthStencilState * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11DepthStencilState * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11DepthStencilState * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11DepthStencilState * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    void ( STDMETHODCALLTYPE *GetDesc )(
        ID3D11DepthStencilState * This,
        /* [annotation] */
        _Out_  D3D11_DEPTH_STENCIL_DESC *pDesc);

    END_INTERFACE
} ID3D11DepthStencilStateVtbl;

// -----------------------------------------------------------------------------
// ID3D11BlendState
// -----------------------------------------------------------------------------
typedef struct ID3D11BlendStateVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11BlendState * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11BlendState * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11BlendState * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11BlendState * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11BlendState * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11BlendState * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11BlendState * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    void ( STDMETHODCALLTYPE *GetDesc )(
        ID3D11BlendState * This,
        /* [annotation] */
        _Out_  D3D11_BLEND_DESC *pDesc);

    END_INTERFACE
} ID3D11BlendStateVtbl;

// -----------------------------------------------------------------------------
// ID3D11RasterizerState
// -----------------------------------------------------------------------------
typedef struct ID3D11RasterizerStateVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11RasterizerState * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11RasterizerState * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11RasterizerState * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11RasterizerState * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11RasterizerState * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11RasterizerState * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11RasterizerState * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    void ( STDMETHODCALLTYPE *GetDesc )(
        ID3D11RasterizerState * This,
        /* [annotation] */
        _Out_  D3D11_RASTERIZER_DESC *pDesc);

    END_INTERFACE
} ID3D11RasterizerStateVtbl;

// -----------------------------------------------------------------------------
// ID3D11Resource
// -----------------------------------------------------------------------------
typedef struct ID3D11ResourceVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11Resource * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11Resource * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11Resource * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11Resource * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11Resource * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11Resource * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11Resource * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    void ( STDMETHODCALLTYPE *GetType )(
        ID3D11Resource * This,
        /* [annotation] */
        _Out_  D3D11_RESOURCE_DIMENSION *pResourceDimension);

    void ( STDMETHODCALLTYPE *SetEvictionPriority )(
        ID3D11Resource * This,
        /* [annotation] */
        _In_  UINT EvictionPriority);

    UINT ( STDMETHODCALLTYPE *GetEvictionPriority )(
        ID3D11Resource * This);

    END_INTERFACE
} ID3D11ResourceVtbl;

// -----------------------------------------------------------------------------
// ID3D11Buffer
// -----------------------------------------------------------------------------
typedef struct ID3D11BufferVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11Buffer * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11Buffer * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11Buffer * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11Buffer * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11Buffer * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11Buffer * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11Buffer * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    void ( STDMETHODCALLTYPE *GetType )(
        ID3D11Buffer * This,
        /* [annotation] */
        _Out_  D3D11_RESOURCE_DIMENSION *pResourceDimension);

    void ( STDMETHODCALLTYPE *SetEvictionPriority )(
        ID3D11Buffer * This,
        /* [annotation] */
        _In_  UINT EvictionPriority);

    UINT ( STDMETHODCALLTYPE *GetEvictionPriority )(
        ID3D11Buffer * This);

    void ( STDMETHODCALLTYPE *GetDesc )(
        ID3D11Buffer * This,
        /* [annotation] */
        _Out_  D3D11_BUFFER_DESC *pDesc);

    END_INTERFACE
} ID3D11BufferVtbl;

// -----------------------------------------------------------------------------
// ID3D11Texture1D
// -----------------------------------------------------------------------------
typedef struct ID3D11Texture1DVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11Texture1D * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11Texture1D * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11Texture1D * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11Texture1D * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11Texture1D * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11Texture1D * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11Texture1D * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    void ( STDMETHODCALLTYPE *GetType )(
        ID3D11Texture1D * This,
        /* [annotation] */
        _Out_  D3D11_RESOURCE_DIMENSION *pResourceDimension);

    void ( STDMETHODCALLTYPE *SetEvictionPriority )(
        ID3D11Texture1D * This,
        /* [annotation] */
        _In_  UINT EvictionPriority);

    UINT ( STDMETHODCALLTYPE *GetEvictionPriority )(
        ID3D11Texture1D * This);

    void ( STDMETHODCALLTYPE *GetDesc )(
        ID3D11Texture1D * This,
        /* [annotation] */
        _Out_  D3D11_TEXTURE1D_DESC *pDesc);

    END_INTERFACE
} ID3D11Texture1DVtbl;

// -----------------------------------------------------------------------------
// ID3D11Texture2D
// -----------------------------------------------------------------------------
typedef struct ID3D11Texture2DVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11Texture2D * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11Texture2D * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11Texture2D * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11Texture2D * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11Texture2D * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11Texture2D * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11Texture2D * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    void ( STDMETHODCALLTYPE *GetType )(
        ID3D11Texture2D * This,
        /* [annotation] */
        _Out_  D3D11_RESOURCE_DIMENSION *pResourceDimension);

    void ( STDMETHODCALLTYPE *SetEvictionPriority )(
        ID3D11Texture2D * This,
        /* [annotation] */
        _In_  UINT EvictionPriority);

    UINT ( STDMETHODCALLTYPE *GetEvictionPriority )(
        ID3D11Texture2D * This);

    void ( STDMETHODCALLTYPE *GetDesc )(
        ID3D11Texture2D * This,
        /* [annotation] */
        _Out_  D3D11_TEXTURE2D_DESC *pDesc);

    END_INTERFACE
} ID3D11Texture2DVtbl;

// -----------------------------------------------------------------------------
// ID3D11Texture3D
// -----------------------------------------------------------------------------
typedef struct ID3D11Texture3DVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11Texture3D * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11Texture3D * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11Texture3D * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11Texture3D * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11Texture3D * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11Texture3D * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11Texture3D * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    void ( STDMETHODCALLTYPE *GetType )(
        ID3D11Texture3D * This,
        /* [annotation] */
        _Out_  D3D11_RESOURCE_DIMENSION *pResourceDimension);

    void ( STDMETHODCALLTYPE *SetEvictionPriority )(
        ID3D11Texture3D * This,
        /* [annotation] */
        _In_  UINT EvictionPriority);

    UINT ( STDMETHODCALLTYPE *GetEvictionPriority )(
        ID3D11Texture3D * This);

    void ( STDMETHODCALLTYPE *GetDesc )(
        ID3D11Texture3D * This,
        /* [annotation] */
        _Out_  D3D11_TEXTURE3D_DESC *pDesc);

    END_INTERFACE
} ID3D11Texture3DVtbl;

// -----------------------------------------------------------------------------
// ID3D11View
// -----------------------------------------------------------------------------
typedef struct ID3D11ViewVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11View * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11View * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11View * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11View * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11View * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11View * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11View * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    void ( STDMETHODCALLTYPE *GetResource )(
        ID3D11View * This,
        /* [annotation] */
        _Out_  ID3D11Resource **ppResource);

    END_INTERFACE
} ID3D11ViewVtbl;

// -----------------------------------------------------------------------------
// ID3D11ShaderResourceView
// -----------------------------------------------------------------------------
typedef struct ID3D11ShaderResourceViewVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11ShaderResourceView * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11ShaderResourceView * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11ShaderResourceView * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11ShaderResourceView * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11ShaderResourceView * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11ShaderResourceView * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11ShaderResourceView * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    void ( STDMETHODCALLTYPE *GetResource )(
        ID3D11ShaderResourceView * This,
        /* [annotation] */
        _Out_  ID3D11Resource **ppResource);

    void ( STDMETHODCALLTYPE *GetDesc )(
        ID3D11ShaderResourceView * This,
        /* [annotation] */
        _Out_  D3D11_SHADER_RESOURCE_VIEW_DESC *pDesc);

    END_INTERFACE
} ID3D11ShaderResourceViewVtbl;

// -----------------------------------------------------------------------------
// ID3D11RenderTargetView
// -----------------------------------------------------------------------------
typedef struct ID3D11RenderTargetViewVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11RenderTargetView * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11RenderTargetView * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11RenderTargetView * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11RenderTargetView * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11RenderTargetView * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11RenderTargetView * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11RenderTargetView * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    void ( STDMETHODCALLTYPE *GetResource )(
        ID3D11RenderTargetView * This,
        /* [annotation] */
        _Out_  ID3D11Resource **ppResource);

    void ( STDMETHODCALLTYPE *GetDesc )(
        ID3D11RenderTargetView * This,
        /* [annotation] */
        _Out_  D3D11_RENDER_TARGET_VIEW_DESC *pDesc);

    END_INTERFACE
} ID3D11RenderTargetViewVtbl;

// -----------------------------------------------------------------------------
// ID3D11DepthStencilView
// -----------------------------------------------------------------------------
typedef struct ID3D11DepthStencilViewVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11DepthStencilView * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11DepthStencilView * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11DepthStencilView * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11DepthStencilView * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11DepthStencilView * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11DepthStencilView * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11DepthStencilView * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    void ( STDMETHODCALLTYPE *GetResource )(
        ID3D11DepthStencilView * This,
        /* [annotation] */
        _Out_  ID3D11Resource **ppResource);

    void ( STDMETHODCALLTYPE *GetDesc )(
        ID3D11DepthStencilView * This,
        /* [annotation] */
        _Out_  D3D11_DEPTH_STENCIL_VIEW_DESC *pDesc);

    END_INTERFACE
} ID3D11DepthStencilViewVtbl;

// -----------------------------------------------------------------------------
// ID3D11UnorderedAccessView
// -----------------------------------------------------------------------------
typedef struct ID3D11UnorderedAccessViewVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11UnorderedAccessView * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11UnorderedAccessView * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11UnorderedAccessView * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11UnorderedAccessView * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11UnorderedAccessView * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11UnorderedAccessView * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11UnorderedAccessView * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    void ( STDMETHODCALLTYPE *GetResource )(
        ID3D11UnorderedAccessView * This,
        /* [annotation] */
        _Out_  ID3D11Resource **ppResource);

    void ( STDMETHODCALLTYPE *GetDesc )(
        ID3D11UnorderedAccessView * This,
        /* [annotation] */
        _Out_  D3D11_UNORDERED_ACCESS_VIEW_DESC *pDesc);

    END_INTERFACE
} ID3D11UnorderedAccessViewVtbl;

// -----------------------------------------------------------------------------
// ID3D11VertexShader
// -----------------------------------------------------------------------------
typedef struct ID3D11VertexShaderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11VertexShader * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11VertexShader * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11VertexShader * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11VertexShader * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11VertexShader * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11VertexShader * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11VertexShader * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    END_INTERFACE
} ID3D11VertexShaderVtbl;

// -----------------------------------------------------------------------------
// ID3D11HullShader
// -----------------------------------------------------------------------------
typedef struct ID3D11HullShaderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11HullShader * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11HullShader * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11HullShader * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11HullShader * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11HullShader * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11HullShader * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11HullShader * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    END_INTERFACE
} ID3D11HullShaderVtbl;

// -----------------------------------------------------------------------------
// ID3D11DomainShader
// -----------------------------------------------------------------------------
typedef struct ID3D11DomainShaderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11DomainShader * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11DomainShader * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11DomainShader * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11DomainShader * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11DomainShader * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11DomainShader * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11DomainShader * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    END_INTERFACE
} ID3D11DomainShaderVtbl;

// -----------------------------------------------------------------------------
// ID3D11GeometryShader
// -----------------------------------------------------------------------------
typedef struct ID3D11GeometryShaderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11GeometryShader * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11GeometryShader * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11GeometryShader * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11GeometryShader * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11GeometryShader * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11GeometryShader * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11GeometryShader * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    END_INTERFACE
} ID3D11GeometryShaderVtbl;

// -----------------------------------------------------------------------------
// ID3D11PixelShader
// -----------------------------------------------------------------------------
typedef struct ID3D11PixelShaderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11PixelShader * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11PixelShader * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11PixelShader * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11PixelShader * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11PixelShader * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11PixelShader * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11PixelShader * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    END_INTERFACE
} ID3D11PixelShaderVtbl;

// -----------------------------------------------------------------------------
// ID3D11ComputeShader
// -----------------------------------------------------------------------------
typedef struct ID3D11ComputeShaderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11ComputeShader * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11ComputeShader * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11ComputeShader * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11ComputeShader * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11ComputeShader * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11ComputeShader * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11ComputeShader * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    END_INTERFACE
} ID3D11ComputeShaderVtbl;

// -----------------------------------------------------------------------------
// ID3D11InputLayout
// -----------------------------------------------------------------------------
typedef struct ID3D11InputLayoutVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11InputLayout * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11InputLayout * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11InputLayout * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11InputLayout * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11InputLayout * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11InputLayout * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11InputLayout * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    END_INTERFACE
} ID3D11InputLayoutVtbl;

// -----------------------------------------------------------------------------
// ID3D11SamplerState
// -----------------------------------------------------------------------------
typedef struct ID3D11SamplerStateVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11SamplerState * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11SamplerState * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11SamplerState * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11SamplerState * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11SamplerState * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11SamplerState * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11SamplerState * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    void ( STDMETHODCALLTYPE *GetDesc )(
        ID3D11SamplerState * This,
        /* [annotation] */
        _Out_  D3D11_SAMPLER_DESC *pDesc);

    END_INTERFACE
} ID3D11SamplerStateVtbl;

// -----------------------------------------------------------------------------
// ID3D11Asynchronous
// -----------------------------------------------------------------------------
typedef struct ID3D11AsynchronousVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11Asynchronous * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11Asynchronous * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11Asynchronous * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11Asynchronous * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11Asynchronous * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11Asynchronous * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11Asynchronous * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    UINT ( STDMETHODCALLTYPE *GetDataSize )(
        ID3D11Asynchronous * This);

    END_INTERFACE
} ID3D11AsynchronousVtbl;

// -----------------------------------------------------------------------------
// ID3D11Query
// -----------------------------------------------------------------------------
typedef struct ID3D11QueryVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11Query * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11Query * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11Query * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11Query * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11Query * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11Query * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11Query * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    UINT ( STDMETHODCALLTYPE *GetDataSize )(
        ID3D11Query * This);

    void ( STDMETHODCALLTYPE *GetDesc )(
        ID3D11Query * This,
        /* [annotation] */
        _Out_  D3D11_QUERY_DESC *pDesc);

    END_INTERFACE
} ID3D11QueryVtbl;

// -----------------------------------------------------------------------------
// ID3D11Predicate
// -----------------------------------------------------------------------------
typedef struct ID3D11PredicateVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11Predicate * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11Predicate * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11Predicate * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11Predicate * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11Predicate * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11Predicate * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11Predicate * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    UINT ( STDMETHODCALLTYPE *GetDataSize )(
        ID3D11Predicate * This);

    void ( STDMETHODCALLTYPE *GetDesc )(
        ID3D11Predicate * This,
        /* [annotation] */
        _Out_  D3D11_QUERY_DESC *pDesc);

    END_INTERFACE
} ID3D11PredicateVtbl;

// -----------------------------------------------------------------------------
// ID3D11Counter
// -----------------------------------------------------------------------------
typedef struct ID3D11CounterVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11Counter * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11Counter * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11Counter * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11Counter * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11Counter * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11Counter * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11Counter * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    UINT ( STDMETHODCALLTYPE *GetDataSize )(
        ID3D11Counter * This);

    void ( STDMETHODCALLTYPE *GetDesc )(
        ID3D11Counter * This,
        /* [annotation] */
        _Out_  D3D11_COUNTER_DESC *pDesc);

    END_INTERFACE
} ID3D11CounterVtbl;

// -----------------------------------------------------------------------------
// ID3D11ClassInstance
// -----------------------------------------------------------------------------
typedef struct ID3D11ClassInstanceVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11ClassInstance * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11ClassInstance * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11ClassInstance * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11ClassInstance * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11ClassInstance * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11ClassInstance * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11ClassInstance * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    void ( STDMETHODCALLTYPE *GetClassLinkage )(
        ID3D11ClassInstance * This,
        /* [annotation] */
        _Out_  ID3D11ClassLinkage **ppLinkage);

    void ( STDMETHODCALLTYPE *GetDesc )(
        ID3D11ClassInstance * This,
        /* [annotation] */
        _Out_  D3D11_CLASS_INSTANCE_DESC *pDesc);

    void ( STDMETHODCALLTYPE *GetInstanceName )(
        ID3D11ClassInstance * This,
        /* [annotation] */
        _Out_writes_opt_(*pBufferLength)  LPSTR pInstanceName,
        /* [annotation] */
        _Inout_  SIZE_T *pBufferLength);

    void ( STDMETHODCALLTYPE *GetTypeName )(
        ID3D11ClassInstance * This,
        /* [annotation] */
        _Out_writes_opt_(*pBufferLength)  LPSTR pTypeName,
        /* [annotation] */
        _Inout_  SIZE_T *pBufferLength);

    END_INTERFACE
} ID3D11ClassInstanceVtbl;

// -----------------------------------------------------------------------------
// ID3D11ClassLinkage
// -----------------------------------------------------------------------------
typedef struct ID3D11ClassLinkageVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11ClassLinkage * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11ClassLinkage * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11ClassLinkage * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11ClassLinkage * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11ClassLinkage * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11ClassLinkage * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11ClassLinkage * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    HRESULT ( STDMETHODCALLTYPE *GetClassInstance )(
        ID3D11ClassLinkage * This,
        /* [annotation] */
        _In_  LPCSTR pClassInstanceName,
        /* [annotation] */
        _In_  UINT InstanceIndex,
        /* [annotation] */
        _Out_  ID3D11ClassInstance **ppInstance);

    HRESULT ( STDMETHODCALLTYPE *CreateClassInstance )(
        ID3D11ClassLinkage * This,
        /* [annotation] */
        _In_  LPCSTR pClassTypeName,
        /* [annotation] */
        _In_  UINT ConstantBufferOffset,
        /* [annotation] */
        _In_  UINT ConstantVectorOffset,
        /* [annotation] */
        _In_  UINT TextureOffset,
        /* [annotation] */
        _In_  UINT SamplerOffset,
        /* [annotation] */
        _Out_  ID3D11ClassInstance **ppInstance);

    END_INTERFACE
} ID3D11ClassLinkageVtbl;

// -----------------------------------------------------------------------------
// ID3D11CommandList
// -----------------------------------------------------------------------------
typedef struct ID3D11CommandListVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11CommandList * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11CommandList * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11CommandList * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11CommandList * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11CommandList * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11CommandList * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11CommandList * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    UINT ( STDMETHODCALLTYPE *GetContextFlags )(
        ID3D11CommandList * This);

    END_INTERFACE
} ID3D11CommandListVtbl;

// -----------------------------------------------------------------------------
// ID3D11DeviceContext
// -----------------------------------------------------------------------------
typedef struct ID3D11DeviceContextVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11DeviceContext * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11DeviceContext * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11DeviceContext * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    void ( STDMETHODCALLTYPE *VSSetConstantBuffers )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppConstantBuffers);

    void ( STDMETHODCALLTYPE *PSSetShaderResources )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
        /* [annotation] */
        _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const *ppShaderResourceViews);

    void ( STDMETHODCALLTYPE *PSSetShader )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_opt_  ID3D11PixelShader *pPixelShader,
        /* [annotation] */
        _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const *ppClassInstances,
        UINT NumClassInstances);

    void ( STDMETHODCALLTYPE *PSSetSamplers )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
        /* [annotation] */
        _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const *ppSamplers);

    void ( STDMETHODCALLTYPE *VSSetShader )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_opt_  ID3D11VertexShader *pVertexShader,
        /* [annotation] */
        _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const *ppClassInstances,
        UINT NumClassInstances);

    void ( STDMETHODCALLTYPE *DrawIndexed )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  UINT IndexCount,
        /* [annotation] */
        _In_  UINT StartIndexLocation,
        /* [annotation] */
        _In_  INT BaseVertexLocation);

    void ( STDMETHODCALLTYPE *Draw )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  UINT VertexCount,
        /* [annotation] */
        _In_  UINT StartVertexLocation);

    HRESULT ( STDMETHODCALLTYPE *Map )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  ID3D11Resource *pResource,
        /* [annotation] */
        _In_  UINT Subresource,
        /* [annotation] */
        _In_  D3D11_MAP MapType,
        /* [annotation] */
        _In_  UINT MapFlags,
        /* [annotation] */
        _Out_  D3D11_MAPPED_SUBRESOURCE *pMappedResource);

    void ( STDMETHODCALLTYPE *Unmap )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  ID3D11Resource *pResource,
        /* [annotation] */
        _In_  UINT Subresource);

    void ( STDMETHODCALLTYPE *PSSetConstantBuffers )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppConstantBuffers);

    void ( STDMETHODCALLTYPE *IASetInputLayout )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_opt_  ID3D11InputLayout *pInputLayout);

    void ( STDMETHODCALLTYPE *IASetVertexBuffers )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppVertexBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  const UINT *pStrides,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  const UINT *pOffsets);

    void ( STDMETHODCALLTYPE *IASetIndexBuffer )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_opt_  ID3D11Buffer *pIndexBuffer,
        /* [annotation] */
        _In_  DXGI_FORMAT Format,
        /* [annotation] */
        _In_  UINT Offset);

    void ( STDMETHODCALLTYPE *DrawIndexedInstanced )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  UINT IndexCountPerInstance,
        /* [annotation] */
        _In_  UINT InstanceCount,
        /* [annotation] */
        _In_  UINT StartIndexLocation,
        /* [annotation] */
        _In_  INT BaseVertexLocation,
        /* [annotation] */
        _In_  UINT StartInstanceLocation);

    void ( STDMETHODCALLTYPE *DrawInstanced )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  UINT VertexCountPerInstance,
        /* [annotation] */
        _In_  UINT InstanceCount,
        /* [annotation] */
        _In_  UINT StartVertexLocation,
        /* [annotation] */
        _In_  UINT StartInstanceLocation);

    void ( STDMETHODCALLTYPE *GSSetConstantBuffers )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppConstantBuffers);

    void ( STDMETHODCALLTYPE *GSSetShader )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_opt_  ID3D11GeometryShader *pShader,
        /* [annotation] */
        _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const *ppClassInstances,
        UINT NumClassInstances);

    void ( STDMETHODCALLTYPE *IASetPrimitiveTopology )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  D3D11_PRIMITIVE_TOPOLOGY Topology);

    void ( STDMETHODCALLTYPE *VSSetShaderResources )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
        /* [annotation] */
        _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const *ppShaderResourceViews);

    void ( STDMETHODCALLTYPE *VSSetSamplers )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
        /* [annotation] */
        _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const *ppSamplers);

    void ( STDMETHODCALLTYPE *Begin )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  ID3D11Asynchronous *pAsync);

    void ( STDMETHODCALLTYPE *End )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  ID3D11Asynchronous *pAsync);

    HRESULT ( STDMETHODCALLTYPE *GetData )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  ID3D11Asynchronous *pAsync,
        /* [annotation] */
        _Out_writes_bytes_opt_( DataSize )  void *pData,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_  UINT GetDataFlags);

    void ( STDMETHODCALLTYPE *SetPredication )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_opt_  ID3D11Predicate *pPredicate,
        /* [annotation] */
        _In_  BOOL PredicateValue);

    void ( STDMETHODCALLTYPE *GSSetShaderResources )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
        /* [annotation] */
        _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const *ppShaderResourceViews);

    void ( STDMETHODCALLTYPE *GSSetSamplers )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
        /* [annotation] */
        _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const *ppSamplers);

    void ( STDMETHODCALLTYPE *OMSetRenderTargets )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT )  UINT NumViews,
        /* [annotation] */
        _In_reads_opt_(NumViews)  ID3D11RenderTargetView *const *ppRenderTargetViews,
        /* [annotation] */
        _In_opt_  ID3D11DepthStencilView *pDepthStencilView);

    void ( STDMETHODCALLTYPE *OMSetRenderTargetsAndUnorderedAccessViews )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  UINT NumRTVs,
        /* [annotation] */
        _In_reads_opt_(NumRTVs)  ID3D11RenderTargetView *const *ppRenderTargetViews,
        /* [annotation] */
        _In_opt_  ID3D11DepthStencilView *pDepthStencilView,
        /* [annotation] */
        _In_range_( 0, D3D11_1_UAV_SLOT_COUNT - 1 )  UINT UAVStartSlot,
        /* [annotation] */
        _In_  UINT NumUAVs,
        /* [annotation] */
        _In_reads_opt_(NumUAVs)  ID3D11UnorderedAccessView *const *ppUnorderedAccessViews,
        /* [annotation] */
        _In_reads_opt_(NumUAVs)  const UINT *pUAVInitialCounts);

    void ( STDMETHODCALLTYPE *OMSetBlendState )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_opt_  ID3D11BlendState *pBlendState,
        /* [annotation] */
        _In_opt_  const FLOAT BlendFactor[ 4 ],
        /* [annotation] */
        _In_  UINT SampleMask);

    void ( STDMETHODCALLTYPE *OMSetDepthStencilState )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_opt_  ID3D11DepthStencilState *pDepthStencilState,
        /* [annotation] */
        _In_  UINT StencilRef);

    void ( STDMETHODCALLTYPE *SOSetTargets )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_SO_BUFFER_SLOT_COUNT)  UINT NumBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppSOTargets,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  const UINT *pOffsets);

    void ( STDMETHODCALLTYPE *DrawAuto )(
        ID3D11DeviceContext * This);

    void ( STDMETHODCALLTYPE *DrawIndexedInstancedIndirect )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  ID3D11Buffer *pBufferForArgs,
        /* [annotation] */
        _In_  UINT AlignedByteOffsetForArgs);

    void ( STDMETHODCALLTYPE *DrawInstancedIndirect )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  ID3D11Buffer *pBufferForArgs,
        /* [annotation] */
        _In_  UINT AlignedByteOffsetForArgs);

    void ( STDMETHODCALLTYPE *Dispatch )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  UINT ThreadGroupCountX,
        /* [annotation] */
        _In_  UINT ThreadGroupCountY,
        /* [annotation] */
        _In_  UINT ThreadGroupCountZ);

    void ( STDMETHODCALLTYPE *DispatchIndirect )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  ID3D11Buffer *pBufferForArgs,
        /* [annotation] */
        _In_  UINT AlignedByteOffsetForArgs);

    void ( STDMETHODCALLTYPE *RSSetState )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_opt_  ID3D11RasterizerState *pRasterizerState);

    void ( STDMETHODCALLTYPE *RSSetViewports )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE)  UINT NumViewports,
        /* [annotation] */
        _In_reads_opt_(NumViewports)  const D3D11_VIEWPORT *pViewports);

    void ( STDMETHODCALLTYPE *RSSetScissorRects )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE)  UINT NumRects,
        /* [annotation] */
        _In_reads_opt_(NumRects)  const D3D11_RECT *pRects);

    void ( STDMETHODCALLTYPE *CopySubresourceRegion )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  ID3D11Resource *pDstResource,
        /* [annotation] */
        _In_  UINT DstSubresource,
        /* [annotation] */
        _In_  UINT DstX,
        /* [annotation] */
        _In_  UINT DstY,
        /* [annotation] */
        _In_  UINT DstZ,
        /* [annotation] */
        _In_  ID3D11Resource *pSrcResource,
        /* [annotation] */
        _In_  UINT SrcSubresource,
        /* [annotation] */
        _In_opt_  const D3D11_BOX *pSrcBox);

    void ( STDMETHODCALLTYPE *CopyResource )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  ID3D11Resource *pDstResource,
        /* [annotation] */
        _In_  ID3D11Resource *pSrcResource);

    void ( STDMETHODCALLTYPE *UpdateSubresource )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  ID3D11Resource *pDstResource,
        /* [annotation] */
        _In_  UINT DstSubresource,
        /* [annotation] */
        _In_opt_  const D3D11_BOX *pDstBox,
        /* [annotation] */
        _In_  const void *pSrcData,
        /* [annotation] */
        _In_  UINT SrcRowPitch,
        /* [annotation] */
        _In_  UINT SrcDepthPitch);

    void ( STDMETHODCALLTYPE *CopyStructureCount )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  ID3D11Buffer *pDstBuffer,
        /* [annotation] */
        _In_  UINT DstAlignedByteOffset,
        /* [annotation] */
        _In_  ID3D11UnorderedAccessView *pSrcView);

    void ( STDMETHODCALLTYPE *ClearRenderTargetView )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  ID3D11RenderTargetView *pRenderTargetView,
        /* [annotation] */
        _In_  const FLOAT ColorRGBA[ 4 ]);

    void ( STDMETHODCALLTYPE *ClearUnorderedAccessViewUint )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  ID3D11UnorderedAccessView *pUnorderedAccessView,
        /* [annotation] */
        _In_  const UINT Values[ 4 ]);

    void ( STDMETHODCALLTYPE *ClearUnorderedAccessViewFloat )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  ID3D11UnorderedAccessView *pUnorderedAccessView,
        /* [annotation] */
        _In_  const FLOAT Values[ 4 ]);

    void ( STDMETHODCALLTYPE *ClearDepthStencilView )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  ID3D11DepthStencilView *pDepthStencilView,
        /* [annotation] */
        _In_  UINT ClearFlags,
        /* [annotation] */
        _In_  FLOAT Depth,
        /* [annotation] */
        _In_  UINT8 Stencil);

    void ( STDMETHODCALLTYPE *GenerateMips )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  ID3D11ShaderResourceView *pShaderResourceView);

    void ( STDMETHODCALLTYPE *SetResourceMinLOD )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  ID3D11Resource *pResource,
        FLOAT MinLOD);

    FLOAT ( STDMETHODCALLTYPE *GetResourceMinLOD )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  ID3D11Resource *pResource);

    void ( STDMETHODCALLTYPE *ResolveSubresource )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  ID3D11Resource *pDstResource,
        /* [annotation] */
        _In_  UINT DstSubresource,
        /* [annotation] */
        _In_  ID3D11Resource *pSrcResource,
        /* [annotation] */
        _In_  UINT SrcSubresource,
        /* [annotation] */
        _In_  DXGI_FORMAT Format);

    void ( STDMETHODCALLTYPE *ExecuteCommandList )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_  ID3D11CommandList *pCommandList,
        BOOL RestoreContextState);

    void ( STDMETHODCALLTYPE *HSSetShaderResources )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
        /* [annotation] */
        _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const *ppShaderResourceViews);

    void ( STDMETHODCALLTYPE *HSSetShader )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_opt_  ID3D11HullShader *pHullShader,
        /* [annotation] */
        _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const *ppClassInstances,
        UINT NumClassInstances);

    void ( STDMETHODCALLTYPE *HSSetSamplers )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
        /* [annotation] */
        _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const *ppSamplers);

    void ( STDMETHODCALLTYPE *HSSetConstantBuffers )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppConstantBuffers);

    void ( STDMETHODCALLTYPE *DSSetShaderResources )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
        /* [annotation] */
        _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const *ppShaderResourceViews);

    void ( STDMETHODCALLTYPE *DSSetShader )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_opt_  ID3D11DomainShader *pDomainShader,
        /* [annotation] */
        _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const *ppClassInstances,
        UINT NumClassInstances);

    void ( STDMETHODCALLTYPE *DSSetSamplers )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
        /* [annotation] */
        _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const *ppSamplers);

    void ( STDMETHODCALLTYPE *DSSetConstantBuffers )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppConstantBuffers);

    void ( STDMETHODCALLTYPE *CSSetShaderResources )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
        /* [annotation] */
        _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const *ppShaderResourceViews);

    void ( STDMETHODCALLTYPE *CSSetUnorderedAccessViews )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_1_UAV_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_1_UAV_SLOT_COUNT - StartSlot )  UINT NumUAVs,
        /* [annotation] */
        _In_reads_opt_(NumUAVs)  ID3D11UnorderedAccessView *const *ppUnorderedAccessViews,
        /* [annotation] */
        _In_reads_opt_(NumUAVs)  const UINT *pUAVInitialCounts);

    void ( STDMETHODCALLTYPE *CSSetShader )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_opt_  ID3D11ComputeShader *pComputeShader,
        /* [annotation] */
        _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const *ppClassInstances,
        UINT NumClassInstances);

    void ( STDMETHODCALLTYPE *CSSetSamplers )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
        /* [annotation] */
        _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const *ppSamplers);

    void ( STDMETHODCALLTYPE *CSSetConstantBuffers )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppConstantBuffers);

    void ( STDMETHODCALLTYPE *VSGetConstantBuffers )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppConstantBuffers);

    void ( STDMETHODCALLTYPE *PSGetShaderResources )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
        /* [annotation] */
        _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView **ppShaderResourceViews);

    void ( STDMETHODCALLTYPE *PSGetShader )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _Out_  ID3D11PixelShader **ppPixelShader,
        /* [annotation] */
        _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance **ppClassInstances,
        /* [annotation] */
        _Inout_opt_  UINT *pNumClassInstances);

    void ( STDMETHODCALLTYPE *PSGetSamplers )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
        /* [annotation] */
        _Out_writes_opt_(NumSamplers)  ID3D11SamplerState **ppSamplers);

    void ( STDMETHODCALLTYPE *VSGetShader )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _Out_  ID3D11VertexShader **ppVertexShader,
        /* [annotation] */
        _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance **ppClassInstances,
        /* [annotation] */
        _Inout_opt_  UINT *pNumClassInstances);

    void ( STDMETHODCALLTYPE *PSGetConstantBuffers )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppConstantBuffers);

    void ( STDMETHODCALLTYPE *IAGetInputLayout )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _Out_  ID3D11InputLayout **ppInputLayout);

    void ( STDMETHODCALLTYPE *IAGetVertexBuffers )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppVertexBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  UINT *pStrides,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  UINT *pOffsets);

    void ( STDMETHODCALLTYPE *IAGetIndexBuffer )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _Out_opt_  ID3D11Buffer **pIndexBuffer,
        /* [annotation] */
        _Out_opt_  DXGI_FORMAT *Format,
        /* [annotation] */
        _Out_opt_  UINT *Offset);

    void ( STDMETHODCALLTYPE *GSGetConstantBuffers )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppConstantBuffers);

    void ( STDMETHODCALLTYPE *GSGetShader )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _Out_  ID3D11GeometryShader **ppGeometryShader,
        /* [annotation] */
        _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance **ppClassInstances,
        /* [annotation] */
        _Inout_opt_  UINT *pNumClassInstances);

    void ( STDMETHODCALLTYPE *IAGetPrimitiveTopology )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _Out_  D3D11_PRIMITIVE_TOPOLOGY *pTopology);

    void ( STDMETHODCALLTYPE *VSGetShaderResources )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
        /* [annotation] */
        _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView **ppShaderResourceViews);

    void ( STDMETHODCALLTYPE *VSGetSamplers )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
        /* [annotation] */
        _Out_writes_opt_(NumSamplers)  ID3D11SamplerState **ppSamplers);

    void ( STDMETHODCALLTYPE *GetPredication )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _Out_opt_  ID3D11Predicate **ppPredicate,
        /* [annotation] */
        _Out_opt_  BOOL *pPredicateValue);

    void ( STDMETHODCALLTYPE *GSGetShaderResources )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
        /* [annotation] */
        _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView **ppShaderResourceViews);

    void ( STDMETHODCALLTYPE *GSGetSamplers )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
        /* [annotation] */
        _Out_writes_opt_(NumSamplers)  ID3D11SamplerState **ppSamplers);

    void ( STDMETHODCALLTYPE *OMGetRenderTargets )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT )  UINT NumViews,
        /* [annotation] */
        _Out_writes_opt_(NumViews)  ID3D11RenderTargetView **ppRenderTargetViews,
        /* [annotation] */
        _Out_opt_  ID3D11DepthStencilView **ppDepthStencilView);

    void ( STDMETHODCALLTYPE *OMGetRenderTargetsAndUnorderedAccessViews )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT )  UINT NumRTVs,
        /* [annotation] */
        _Out_writes_opt_(NumRTVs)  ID3D11RenderTargetView **ppRenderTargetViews,
        /* [annotation] */
        _Out_opt_  ID3D11DepthStencilView **ppDepthStencilView,
        /* [annotation] */
        _In_range_( 0, D3D11_PS_CS_UAV_REGISTER_COUNT - 1 )  UINT UAVStartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_PS_CS_UAV_REGISTER_COUNT - UAVStartSlot )  UINT NumUAVs,
        /* [annotation] */
        _Out_writes_opt_(NumUAVs)  ID3D11UnorderedAccessView **ppUnorderedAccessViews);

    void ( STDMETHODCALLTYPE *OMGetBlendState )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _Out_opt_  ID3D11BlendState **ppBlendState,
        /* [annotation] */
        _Out_opt_  FLOAT BlendFactor[ 4 ],
        /* [annotation] */
        _Out_opt_  UINT *pSampleMask);

    void ( STDMETHODCALLTYPE *OMGetDepthStencilState )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _Out_opt_  ID3D11DepthStencilState **ppDepthStencilState,
        /* [annotation] */
        _Out_opt_  UINT *pStencilRef);

    void ( STDMETHODCALLTYPE *SOGetTargets )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_SO_BUFFER_SLOT_COUNT )  UINT NumBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppSOTargets);

    void ( STDMETHODCALLTYPE *RSGetState )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _Out_  ID3D11RasterizerState **ppRasterizerState);

    void ( STDMETHODCALLTYPE *RSGetViewports )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _Inout_ /*_range(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE )*/   UINT *pNumViewports,
        /* [annotation] */
        _Out_writes_opt_(*pNumViewports)  D3D11_VIEWPORT *pViewports);

    void ( STDMETHODCALLTYPE *RSGetScissorRects )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _Inout_ /*_range(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE )*/   UINT *pNumRects,
        /* [annotation] */
        _Out_writes_opt_(*pNumRects)  D3D11_RECT *pRects);

    void ( STDMETHODCALLTYPE *HSGetShaderResources )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
        /* [annotation] */
        _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView **ppShaderResourceViews);

    void ( STDMETHODCALLTYPE *HSGetShader )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _Out_  ID3D11HullShader **ppHullShader,
        /* [annotation] */
        _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance **ppClassInstances,
        /* [annotation] */
        _Inout_opt_  UINT *pNumClassInstances);

    void ( STDMETHODCALLTYPE *HSGetSamplers )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
        /* [annotation] */
        _Out_writes_opt_(NumSamplers)  ID3D11SamplerState **ppSamplers);

    void ( STDMETHODCALLTYPE *HSGetConstantBuffers )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppConstantBuffers);

    void ( STDMETHODCALLTYPE *DSGetShaderResources )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
        /* [annotation] */
        _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView **ppShaderResourceViews);

    void ( STDMETHODCALLTYPE *DSGetShader )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _Out_  ID3D11DomainShader **ppDomainShader,
        /* [annotation] */
        _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance **ppClassInstances,
        /* [annotation] */
        _Inout_opt_  UINT *pNumClassInstances);

    void ( STDMETHODCALLTYPE *DSGetSamplers )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
        /* [annotation] */
        _Out_writes_opt_(NumSamplers)  ID3D11SamplerState **ppSamplers);

    void ( STDMETHODCALLTYPE *DSGetConstantBuffers )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppConstantBuffers);

    void ( STDMETHODCALLTYPE *CSGetShaderResources )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
        /* [annotation] */
        _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView **ppShaderResourceViews);

    void ( STDMETHODCALLTYPE *CSGetUnorderedAccessViews )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_PS_CS_UAV_REGISTER_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_PS_CS_UAV_REGISTER_COUNT - StartSlot )  UINT NumUAVs,
        /* [annotation] */
        _Out_writes_opt_(NumUAVs)  ID3D11UnorderedAccessView **ppUnorderedAccessViews);

    void ( STDMETHODCALLTYPE *CSGetShader )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _Out_  ID3D11ComputeShader **ppComputeShader,
        /* [annotation] */
        _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance **ppClassInstances,
        /* [annotation] */
        _Inout_opt_  UINT *pNumClassInstances);

    void ( STDMETHODCALLTYPE *CSGetSamplers )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
        /* [annotation] */
        _Out_writes_opt_(NumSamplers)  ID3D11SamplerState **ppSamplers);

    void ( STDMETHODCALLTYPE *CSGetConstantBuffers )(
        ID3D11DeviceContext * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppConstantBuffers);

    void ( STDMETHODCALLTYPE *ClearState )(
        ID3D11DeviceContext * This);

    void ( STDMETHODCALLTYPE *Flush )(
        ID3D11DeviceContext * This);

    D3D11_DEVICE_CONTEXT_TYPE ( STDMETHODCALLTYPE *GetType )(
        ID3D11DeviceContext * This);

    UINT ( STDMETHODCALLTYPE *GetContextFlags )(
        ID3D11DeviceContext * This);

    HRESULT ( STDMETHODCALLTYPE *FinishCommandList )(
        ID3D11DeviceContext * This,
        BOOL RestoreDeferredContextState,
        /* [annotation] */
        _Out_opt_  ID3D11CommandList **ppCommandList);

    END_INTERFACE
} ID3D11DeviceContextVtbl;

// -----------------------------------------------------------------------------
// ID3D11VideoDecoder
// -----------------------------------------------------------------------------
typedef struct ID3D11VideoDecoderVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11VideoDecoder * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11VideoDecoder * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11VideoDecoder * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11VideoDecoder * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11VideoDecoder * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11VideoDecoder * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11VideoDecoder * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    HRESULT ( STDMETHODCALLTYPE *GetCreationParameters )(
        ID3D11VideoDecoder * This,
        /* [annotation] */
        _Out_  D3D11_VIDEO_DECODER_DESC *pVideoDesc,
        /* [annotation] */
        _Out_  D3D11_VIDEO_DECODER_CONFIG *pConfig);

    HRESULT ( STDMETHODCALLTYPE *GetDriverHandle )(
        ID3D11VideoDecoder * This,
        /* [annotation] */
        _Out_  HANDLE *pDriverHandle);

    END_INTERFACE
} ID3D11VideoDecoderVtbl;

// -----------------------------------------------------------------------------
// ID3D11VideoProcessorEnumerator
// -----------------------------------------------------------------------------
typedef struct ID3D11VideoProcessorEnumeratorVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11VideoProcessorEnumerator * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11VideoProcessorEnumerator * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11VideoProcessorEnumerator * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11VideoProcessorEnumerator * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11VideoProcessorEnumerator * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11VideoProcessorEnumerator * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11VideoProcessorEnumerator * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    HRESULT ( STDMETHODCALLTYPE *GetVideoProcessorContentDesc )(
        ID3D11VideoProcessorEnumerator * This,
        /* [annotation] */
        _Out_  D3D11_VIDEO_PROCESSOR_CONTENT_DESC *pContentDesc);

    HRESULT ( STDMETHODCALLTYPE *CheckVideoProcessorFormat )(
        ID3D11VideoProcessorEnumerator * This,
        /* [annotation] */
        _In_  DXGI_FORMAT Format,
        /* [annotation] */
        _Out_  UINT *pFlags);

    HRESULT ( STDMETHODCALLTYPE *GetVideoProcessorCaps )(
        ID3D11VideoProcessorEnumerator * This,
        /* [annotation] */
        _Out_  D3D11_VIDEO_PROCESSOR_CAPS *pCaps);

    HRESULT ( STDMETHODCALLTYPE *GetVideoProcessorRateConversionCaps )(
        ID3D11VideoProcessorEnumerator * This,
        /* [annotation] */
        _In_  UINT TypeIndex,
        /* [annotation] */
        _Out_  D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS *pCaps);

    HRESULT ( STDMETHODCALLTYPE *GetVideoProcessorCustomRate )(
        ID3D11VideoProcessorEnumerator * This,
        /* [annotation] */
        _In_  UINT TypeIndex,
        /* [annotation] */
        _In_  UINT CustomRateIndex,
        /* [annotation] */
        _Out_  D3D11_VIDEO_PROCESSOR_CUSTOM_RATE *pRate);

    HRESULT ( STDMETHODCALLTYPE *GetVideoProcessorFilterRange )(
        ID3D11VideoProcessorEnumerator * This,
        /* [annotation] */
        _In_  D3D11_VIDEO_PROCESSOR_FILTER Filter,
        /* [annotation] */
        _Out_  D3D11_VIDEO_PROCESSOR_FILTER_RANGE *pRange);

    END_INTERFACE
} ID3D11VideoProcessorEnumeratorVtbl;

// -----------------------------------------------------------------------------
// ID3D11VideoProcessor
// -----------------------------------------------------------------------------
typedef struct ID3D11VideoProcessorVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11VideoProcessor * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11VideoProcessor * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11VideoProcessor * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11VideoProcessor * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11VideoProcessor * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11VideoProcessor * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11VideoProcessor * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    void ( STDMETHODCALLTYPE *GetContentDesc )(
        ID3D11VideoProcessor * This,
        /* [annotation] */
        _Out_  D3D11_VIDEO_PROCESSOR_CONTENT_DESC *pDesc);

    void ( STDMETHODCALLTYPE *GetRateConversionCaps )(
        ID3D11VideoProcessor * This,
        /* [annotation] */
        _Out_  D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS *pCaps);

    END_INTERFACE
} ID3D11VideoProcessorVtbl;

// -----------------------------------------------------------------------------
// ID3D11AuthenticatedChannel
// -----------------------------------------------------------------------------
typedef struct ID3D11AuthenticatedChannelVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11AuthenticatedChannel * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11AuthenticatedChannel * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11AuthenticatedChannel * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11AuthenticatedChannel * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11AuthenticatedChannel * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11AuthenticatedChannel * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11AuthenticatedChannel * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    HRESULT ( STDMETHODCALLTYPE *GetCertificateSize )(
        ID3D11AuthenticatedChannel * This,
        /* [annotation] */
        _Out_  UINT *pCertificateSize);

    HRESULT ( STDMETHODCALLTYPE *GetCertificate )(
        ID3D11AuthenticatedChannel * This,
        /* [annotation] */
        _In_  UINT CertificateSize,
        /* [annotation] */
        _Out_writes_bytes_(CertificateSize)  BYTE *pCertificate);

    void ( STDMETHODCALLTYPE *GetChannelHandle )(
        ID3D11AuthenticatedChannel * This,
        /* [annotation] */
        _Out_  HANDLE *pChannelHandle);

    END_INTERFACE
} ID3D11AuthenticatedChannelVtbl;

// -----------------------------------------------------------------------------
// ID3D11CryptoSession
// -----------------------------------------------------------------------------
typedef struct ID3D11CryptoSessionVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11CryptoSession * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11CryptoSession * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11CryptoSession * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11CryptoSession * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11CryptoSession * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11CryptoSession * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11CryptoSession * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    void ( STDMETHODCALLTYPE *GetCryptoType )(
        ID3D11CryptoSession * This,
        /* [annotation] */
        _Out_  GUID *pCryptoType);

    void ( STDMETHODCALLTYPE *GetDecoderProfile )(
        ID3D11CryptoSession * This,
        /* [annotation] */
        _Out_  GUID *pDecoderProfile);

    HRESULT ( STDMETHODCALLTYPE *GetCertificateSize )(
        ID3D11CryptoSession * This,
        /* [annotation] */
        _Out_  UINT *pCertificateSize);

    HRESULT ( STDMETHODCALLTYPE *GetCertificate )(
        ID3D11CryptoSession * This,
        /* [annotation] */
        _In_  UINT CertificateSize,
        /* [annotation] */
        _Out_writes_bytes_(CertificateSize)  BYTE *pCertificate);

    void ( STDMETHODCALLTYPE *GetCryptoSessionHandle )(
        ID3D11CryptoSession * This,
        /* [annotation] */
        _Out_  HANDLE *pCryptoSessionHandle);

    END_INTERFACE
} ID3D11CryptoSessionVtbl;

// -----------------------------------------------------------------------------
// ID3D11VideoDecoderOutputView
// -----------------------------------------------------------------------------
typedef struct ID3D11VideoDecoderOutputViewVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11VideoDecoderOutputView * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11VideoDecoderOutputView * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11VideoDecoderOutputView * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11VideoDecoderOutputView * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11VideoDecoderOutputView * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11VideoDecoderOutputView * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11VideoDecoderOutputView * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    void ( STDMETHODCALLTYPE *GetResource )(
        ID3D11VideoDecoderOutputView * This,
        /* [annotation] */
        _Out_  ID3D11Resource **ppResource);

    void ( STDMETHODCALLTYPE *GetDesc )(
        ID3D11VideoDecoderOutputView * This,
        /* [annotation] */
        _Out_  D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC *pDesc);

    END_INTERFACE
} ID3D11VideoDecoderOutputViewVtbl;

// -----------------------------------------------------------------------------
// ID3D11VideoProcessorInputView
// -----------------------------------------------------------------------------
typedef struct ID3D11VideoProcessorInputViewVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11VideoProcessorInputView * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11VideoProcessorInputView * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11VideoProcessorInputView * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11VideoProcessorInputView * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11VideoProcessorInputView * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11VideoProcessorInputView * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11VideoProcessorInputView * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    void ( STDMETHODCALLTYPE *GetResource )(
        ID3D11VideoProcessorInputView * This,
        /* [annotation] */
        _Out_  ID3D11Resource **ppResource);

    void ( STDMETHODCALLTYPE *GetDesc )(
        ID3D11VideoProcessorInputView * This,
        /* [annotation] */
        _Out_  D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC *pDesc);

    END_INTERFACE
} ID3D11VideoProcessorInputViewVtbl;

// -----------------------------------------------------------------------------
// ID3D11VideoProcessorOutputView
// -----------------------------------------------------------------------------
typedef struct ID3D11VideoProcessorOutputViewVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11VideoProcessorOutputView * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11VideoProcessorOutputView * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11VideoProcessorOutputView * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11VideoProcessorOutputView * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11VideoProcessorOutputView * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11VideoProcessorOutputView * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11VideoProcessorOutputView * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    void ( STDMETHODCALLTYPE *GetResource )(
        ID3D11VideoProcessorOutputView * This,
        /* [annotation] */
        _Out_  ID3D11Resource **ppResource);

    void ( STDMETHODCALLTYPE *GetDesc )(
        ID3D11VideoProcessorOutputView * This,
        /* [annotation] */
        _Out_  D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC *pDesc);

    END_INTERFACE
} ID3D11VideoProcessorOutputViewVtbl;

// -----------------------------------------------------------------------------
// ID3D11VideoContext
// -----------------------------------------------------------------------------
typedef struct ID3D11VideoContextVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11VideoContext * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11VideoContext * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11VideoContext * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    HRESULT ( STDMETHODCALLTYPE *GetDecoderBuffer )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoDecoder *pDecoder,
        /* [annotation] */
        _In_  D3D11_VIDEO_DECODER_BUFFER_TYPE Type,
        /* [annotation] */
        _Out_  UINT *pBufferSize,
        /* [annotation] */
        _Out_writes_bytes_opt_(*pBufferSize)  void **ppBuffer);

    HRESULT ( STDMETHODCALLTYPE *ReleaseDecoderBuffer )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoDecoder *pDecoder,
        /* [annotation] */
        _In_  D3D11_VIDEO_DECODER_BUFFER_TYPE Type);

    HRESULT ( STDMETHODCALLTYPE *DecoderBeginFrame )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoDecoder *pDecoder,
        /* [annotation] */
        _In_  ID3D11VideoDecoderOutputView *pView,
        /* [annotation] */
        _In_  UINT ContentKeySize,
        /* [annotation] */
        _In_reads_bytes_opt_(ContentKeySize)  const void *pContentKey);

    HRESULT ( STDMETHODCALLTYPE *DecoderEndFrame )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoDecoder *pDecoder);

    HRESULT ( STDMETHODCALLTYPE *SubmitDecoderBuffers )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoDecoder *pDecoder,
        /* [annotation] */
        _In_  UINT NumBuffers,
        /* [annotation] */
        _In_reads_(NumBuffers)  const D3D11_VIDEO_DECODER_BUFFER_DESC *pBufferDesc);

    HRESULT ( STDMETHODCALLTYPE *DecoderExtension )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoDecoder *pDecoder,
        /* [annotation] */
        _In_  const D3D11_VIDEO_DECODER_EXTENSION *pExtensionData);

    void ( STDMETHODCALLTYPE *VideoProcessorSetOutputTargetRect )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  BOOL Enable,
        /* [annotation] */
        _In_opt_  const RECT *pRect);

    void ( STDMETHODCALLTYPE *VideoProcessorSetOutputBackgroundColor )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  BOOL YCbCr,
        /* [annotation] */
        _In_  const D3D11_VIDEO_COLOR *pColor);

    void ( STDMETHODCALLTYPE *VideoProcessorSetOutputColorSpace )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  const D3D11_VIDEO_PROCESSOR_COLOR_SPACE *pColorSpace);

    void ( STDMETHODCALLTYPE *VideoProcessorSetOutputAlphaFillMode )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE AlphaFillMode,
        /* [annotation] */
        _In_  UINT StreamIndex);

    void ( STDMETHODCALLTYPE *VideoProcessorSetOutputConstriction )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  BOOL Enable,
        /* [annotation] */
        _In_  SIZE Size);

    void ( STDMETHODCALLTYPE *VideoProcessorSetOutputStereoMode )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  BOOL Enable);

    HRESULT ( STDMETHODCALLTYPE *VideoProcessorSetOutputExtension )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  const GUID *pExtensionGuid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_  void *pData);

    void ( STDMETHODCALLTYPE *VideoProcessorGetOutputTargetRect )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _Out_  BOOL *Enabled,
        /* [annotation] */
        _Out_  RECT *pRect);

    void ( STDMETHODCALLTYPE *VideoProcessorGetOutputBackgroundColor )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _Out_  BOOL *pYCbCr,
        /* [annotation] */
        _Out_  D3D11_VIDEO_COLOR *pColor);

    void ( STDMETHODCALLTYPE *VideoProcessorGetOutputColorSpace )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _Out_  D3D11_VIDEO_PROCESSOR_COLOR_SPACE *pColorSpace);

    void ( STDMETHODCALLTYPE *VideoProcessorGetOutputAlphaFillMode )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _Out_  D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE *pAlphaFillMode,
        /* [annotation] */
        _Out_  UINT *pStreamIndex);

    void ( STDMETHODCALLTYPE *VideoProcessorGetOutputConstriction )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _Out_  BOOL *pEnabled,
        /* [annotation] */
        _Out_  SIZE *pSize);

    void ( STDMETHODCALLTYPE *VideoProcessorGetOutputStereoMode )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _Out_  BOOL *pEnabled);

    HRESULT ( STDMETHODCALLTYPE *VideoProcessorGetOutputExtension )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  const GUID *pExtensionGuid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _Out_  void *pData);

    void ( STDMETHODCALLTYPE *VideoProcessorSetStreamFrameFormat )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _In_  D3D11_VIDEO_FRAME_FORMAT FrameFormat);

    void ( STDMETHODCALLTYPE *VideoProcessorSetStreamColorSpace )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _In_  const D3D11_VIDEO_PROCESSOR_COLOR_SPACE *pColorSpace);

    void ( STDMETHODCALLTYPE *VideoProcessorSetStreamOutputRate )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _In_  D3D11_VIDEO_PROCESSOR_OUTPUT_RATE OutputRate,
        /* [annotation] */
        _In_  BOOL RepeatFrame,
        /* [annotation] */
        _In_opt_  const DXGI_RATIONAL *pCustomRate);

    void ( STDMETHODCALLTYPE *VideoProcessorSetStreamSourceRect )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _In_  BOOL Enable,
        /* [annotation] */
        _In_opt_  const RECT *pRect);

    void ( STDMETHODCALLTYPE *VideoProcessorSetStreamDestRect )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _In_  BOOL Enable,
        /* [annotation] */
        _In_opt_  const RECT *pRect);

    void ( STDMETHODCALLTYPE *VideoProcessorSetStreamAlpha )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _In_  BOOL Enable,
        /* [annotation] */
        _In_  FLOAT Alpha);

    void ( STDMETHODCALLTYPE *VideoProcessorSetStreamPalette )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _In_  UINT Count,
        /* [annotation] */
        _In_reads_opt_(Count)  const UINT *pEntries);

    void ( STDMETHODCALLTYPE *VideoProcessorSetStreamPixelAspectRatio )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _In_  BOOL Enable,
        /* [annotation] */
        _In_opt_  const DXGI_RATIONAL *pSourceAspectRatio,
        /* [annotation] */
        _In_opt_  const DXGI_RATIONAL *pDestinationAspectRatio);

    void ( STDMETHODCALLTYPE *VideoProcessorSetStreamLumaKey )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _In_  BOOL Enable,
        /* [annotation] */
        _In_  FLOAT Lower,
        /* [annotation] */
        _In_  FLOAT Upper);

    void ( STDMETHODCALLTYPE *VideoProcessorSetStreamStereoFormat )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _In_  BOOL Enable,
        /* [annotation] */
        _In_  D3D11_VIDEO_PROCESSOR_STEREO_FORMAT Format,
        /* [annotation] */
        _In_  BOOL LeftViewFrame0,
        /* [annotation] */
        _In_  BOOL BaseViewFrame0,
        /* [annotation] */
        _In_  D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE FlipMode,
        /* [annotation] */
        _In_  int MonoOffset);

    void ( STDMETHODCALLTYPE *VideoProcessorSetStreamAutoProcessingMode )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _In_  BOOL Enable);

    void ( STDMETHODCALLTYPE *VideoProcessorSetStreamFilter )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _In_  D3D11_VIDEO_PROCESSOR_FILTER Filter,
        /* [annotation] */
        _In_  BOOL Enable,
        /* [annotation] */
        _In_  int Level);

    HRESULT ( STDMETHODCALLTYPE *VideoProcessorSetStreamExtension )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _In_  const GUID *pExtensionGuid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_  void *pData);

    void ( STDMETHODCALLTYPE *VideoProcessorGetStreamFrameFormat )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _Out_  D3D11_VIDEO_FRAME_FORMAT *pFrameFormat);

    void ( STDMETHODCALLTYPE *VideoProcessorGetStreamColorSpace )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _Out_  D3D11_VIDEO_PROCESSOR_COLOR_SPACE *pColorSpace);

    void ( STDMETHODCALLTYPE *VideoProcessorGetStreamOutputRate )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _Out_  D3D11_VIDEO_PROCESSOR_OUTPUT_RATE *pOutputRate,
        /* [annotation] */
        _Out_  BOOL *pRepeatFrame,
        /* [annotation] */
        _Out_  DXGI_RATIONAL *pCustomRate);

    void ( STDMETHODCALLTYPE *VideoProcessorGetStreamSourceRect )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _Out_  BOOL *pEnabled,
        /* [annotation] */
        _Out_  RECT *pRect);

    void ( STDMETHODCALLTYPE *VideoProcessorGetStreamDestRect )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _Out_  BOOL *pEnabled,
        /* [annotation] */
        _Out_  RECT *pRect);

    void ( STDMETHODCALLTYPE *VideoProcessorGetStreamAlpha )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _Out_  BOOL *pEnabled,
        /* [annotation] */
        _Out_  FLOAT *pAlpha);

    void ( STDMETHODCALLTYPE *VideoProcessorGetStreamPalette )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _In_  UINT Count,
        /* [annotation] */
        _Out_writes_(Count)  UINT *pEntries);

    void ( STDMETHODCALLTYPE *VideoProcessorGetStreamPixelAspectRatio )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _Out_  BOOL *pEnabled,
        /* [annotation] */
        _Out_  DXGI_RATIONAL *pSourceAspectRatio,
        /* [annotation] */
        _Out_  DXGI_RATIONAL *pDestinationAspectRatio);

    void ( STDMETHODCALLTYPE *VideoProcessorGetStreamLumaKey )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _Out_  BOOL *pEnabled,
        /* [annotation] */
        _Out_  FLOAT *pLower,
        /* [annotation] */
        _Out_  FLOAT *pUpper);

    void ( STDMETHODCALLTYPE *VideoProcessorGetStreamStereoFormat )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _Out_  BOOL *pEnable,
        /* [annotation] */
        _Out_  D3D11_VIDEO_PROCESSOR_STEREO_FORMAT *pFormat,
        /* [annotation] */
        _Out_  BOOL *pLeftViewFrame0,
        /* [annotation] */
        _Out_  BOOL *pBaseViewFrame0,
        /* [annotation] */
        _Out_  D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE *pFlipMode,
        /* [annotation] */
        _Out_  int *MonoOffset);

    void ( STDMETHODCALLTYPE *VideoProcessorGetStreamAutoProcessingMode )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _Out_  BOOL *pEnabled);

    void ( STDMETHODCALLTYPE *VideoProcessorGetStreamFilter )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _In_  D3D11_VIDEO_PROCESSOR_FILTER Filter,
        /* [annotation] */
        _Out_  BOOL *pEnabled,
        /* [annotation] */
        _Out_  int *pLevel);

    HRESULT ( STDMETHODCALLTYPE *VideoProcessorGetStreamExtension )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _In_  const GUID *pExtensionGuid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _Out_  void *pData);

    HRESULT ( STDMETHODCALLTYPE *VideoProcessorBlt )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  ID3D11VideoProcessorOutputView *pView,
        /* [annotation] */
        _In_  UINT OutputFrame,
        /* [annotation] */
        _In_  UINT StreamCount,
        /* [annotation] */
        _In_reads_(StreamCount)  const D3D11_VIDEO_PROCESSOR_STREAM *pStreams);

    HRESULT ( STDMETHODCALLTYPE *NegotiateCryptoSessionKeyExchange )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11CryptoSession *pCryptoSession,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _Inout_updates_bytes_(DataSize)  void *pData);

    void ( STDMETHODCALLTYPE *EncryptionBlt )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11CryptoSession *pCryptoSession,
        /* [annotation] */
        _In_  ID3D11Texture2D *pSrcSurface,
        /* [annotation] */
        _In_  ID3D11Texture2D *pDstSurface,
        /* [annotation] */
        _In_  UINT IVSize,
        /* [annotation] */
        _In_reads_bytes_opt_(IVSize)  void *pIV);

    void ( STDMETHODCALLTYPE *DecryptionBlt )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11CryptoSession *pCryptoSession,
        /* [annotation] */
        _In_  ID3D11Texture2D *pSrcSurface,
        /* [annotation] */
        _In_  ID3D11Texture2D *pDstSurface,
        /* [annotation] */
        _In_opt_  D3D11_ENCRYPTED_BLOCK_INFO *pEncryptedBlockInfo,
        /* [annotation] */
        _In_  UINT ContentKeySize,
        /* [annotation] */
        _In_reads_bytes_opt_(ContentKeySize)  const void *pContentKey,
        /* [annotation] */
        _In_  UINT IVSize,
        /* [annotation] */
        _In_reads_bytes_opt_(IVSize)  void *pIV);

    void ( STDMETHODCALLTYPE *StartSessionKeyRefresh )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11CryptoSession *pCryptoSession,
        /* [annotation] */
        _In_  UINT RandomNumberSize,
        /* [annotation] */
        _Out_writes_bytes_(RandomNumberSize)  void *pRandomNumber);

    void ( STDMETHODCALLTYPE *FinishSessionKeyRefresh )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11CryptoSession *pCryptoSession);

    HRESULT ( STDMETHODCALLTYPE *GetEncryptionBltKey )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11CryptoSession *pCryptoSession,
        /* [annotation] */
        _In_  UINT KeySize,
        /* [annotation] */
        _Out_writes_bytes_(KeySize)  void *pReadbackKey);

    HRESULT ( STDMETHODCALLTYPE *NegotiateAuthenticatedChannelKeyExchange )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11AuthenticatedChannel *pChannel,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _Inout_updates_bytes_(DataSize)  void *pData);

    HRESULT ( STDMETHODCALLTYPE *QueryAuthenticatedChannel )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11AuthenticatedChannel *pChannel,
        /* [annotation] */
        _In_  UINT InputSize,
        /* [annotation] */
        _In_reads_bytes_(InputSize)  const void *pInput,
        /* [annotation] */
        _In_  UINT OutputSize,
        /* [annotation] */
        _Out_writes_bytes_(OutputSize)  void *pOutput);

    HRESULT ( STDMETHODCALLTYPE *ConfigureAuthenticatedChannel )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11AuthenticatedChannel *pChannel,
        /* [annotation] */
        _In_  UINT InputSize,
        /* [annotation] */
        _In_reads_bytes_(InputSize)  const void *pInput,
        /* [annotation] */
        _Out_  D3D11_AUTHENTICATED_CONFIGURE_OUTPUT *pOutput);

    void ( STDMETHODCALLTYPE *VideoProcessorSetStreamRotation )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _In_  BOOL Enable,
        /* [annotation] */
        _In_  D3D11_VIDEO_PROCESSOR_ROTATION Rotation);

    void ( STDMETHODCALLTYPE *VideoProcessorGetStreamRotation )(
        ID3D11VideoContext * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessor *pVideoProcessor,
        /* [annotation] */
        _In_  UINT StreamIndex,
        /* [annotation] */
        _Out_  BOOL *pEnable,
        /* [annotation] */
        _Out_  D3D11_VIDEO_PROCESSOR_ROTATION *pRotation);

    END_INTERFACE
} ID3D11VideoContextVtbl;

// -----------------------------------------------------------------------------
// ID3D11VideoDevice
// -----------------------------------------------------------------------------
typedef struct ID3D11VideoDeviceVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11VideoDevice * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11VideoDevice * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11VideoDevice * This);

    HRESULT ( STDMETHODCALLTYPE *CreateVideoDecoder )(
        ID3D11VideoDevice * This,
        /* [annotation] */
        _In_  const D3D11_VIDEO_DECODER_DESC *pVideoDesc,
        /* [annotation] */
        _In_  const D3D11_VIDEO_DECODER_CONFIG *pConfig,
        /* [annotation] */
        _Out_  ID3D11VideoDecoder **ppDecoder);

    HRESULT ( STDMETHODCALLTYPE *CreateVideoProcessor )(
        ID3D11VideoDevice * This,
        /* [annotation] */
        _In_  ID3D11VideoProcessorEnumerator *pEnum,
        /* [annotation] */
        _In_  UINT RateConversionIndex,
        /* [annotation] */
        _Out_  ID3D11VideoProcessor **ppVideoProcessor);

    HRESULT ( STDMETHODCALLTYPE *CreateAuthenticatedChannel )(
        ID3D11VideoDevice * This,
        /* [annotation] */
        _In_  D3D11_AUTHENTICATED_CHANNEL_TYPE ChannelType,
        /* [annotation] */
        _Out_  ID3D11AuthenticatedChannel **ppAuthenticatedChannel);

    HRESULT ( STDMETHODCALLTYPE *CreateCryptoSession )(
        ID3D11VideoDevice * This,
        /* [annotation] */
        _In_  const GUID *pCryptoType,
        /* [annotation] */
        _In_opt_  const GUID *pDecoderProfile,
        /* [annotation] */
        _In_  const GUID *pKeyExchangeType,
        /* [annotation] */
        _Outptr_  ID3D11CryptoSession **ppCryptoSession);

    HRESULT ( STDMETHODCALLTYPE *CreateVideoDecoderOutputView )(
        ID3D11VideoDevice * This,
        /* [annotation] */
        _In_  ID3D11Resource *pResource,
        /* [annotation] */
        _In_  const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC *pDesc,
        /* [annotation] */
        _Out_opt_  ID3D11VideoDecoderOutputView **ppVDOVView);

    HRESULT ( STDMETHODCALLTYPE *CreateVideoProcessorInputView )(
        ID3D11VideoDevice * This,
        /* [annotation] */
        _In_  ID3D11Resource *pResource,
        /* [annotation] */
        _In_  ID3D11VideoProcessorEnumerator *pEnum,
        /* [annotation] */
        _In_  const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC *pDesc,
        /* [annotation] */
        _Out_opt_  ID3D11VideoProcessorInputView **ppVPIView);

    HRESULT ( STDMETHODCALLTYPE *CreateVideoProcessorOutputView )(
        ID3D11VideoDevice * This,
        /* [annotation] */
        _In_  ID3D11Resource *pResource,
        /* [annotation] */
        _In_  ID3D11VideoProcessorEnumerator *pEnum,
        /* [annotation] */
        _In_  const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC *pDesc,
        /* [annotation] */
        _Out_opt_  ID3D11VideoProcessorOutputView **ppVPOView);

    HRESULT ( STDMETHODCALLTYPE *CreateVideoProcessorEnumerator )(
        ID3D11VideoDevice * This,
        /* [annotation] */
        _In_  const D3D11_VIDEO_PROCESSOR_CONTENT_DESC *pDesc,
        /* [annotation] */
        _Out_  ID3D11VideoProcessorEnumerator **ppEnum);

    UINT ( STDMETHODCALLTYPE *GetVideoDecoderProfileCount )(
        ID3D11VideoDevice * This);

    HRESULT ( STDMETHODCALLTYPE *GetVideoDecoderProfile )(
        ID3D11VideoDevice * This,
        /* [annotation] */
        _In_  UINT Index,
        /* [annotation] */
        _Out_  GUID *pDecoderProfile);

    HRESULT ( STDMETHODCALLTYPE *CheckVideoDecoderFormat )(
        ID3D11VideoDevice * This,
        /* [annotation] */
        _In_  const GUID *pDecoderProfile,
        /* [annotation] */
        _In_  DXGI_FORMAT Format,
        /* [annotation] */
        _Out_  BOOL *pSupported);

    HRESULT ( STDMETHODCALLTYPE *GetVideoDecoderConfigCount )(
        ID3D11VideoDevice * This,
        /* [annotation] */
        _In_  const D3D11_VIDEO_DECODER_DESC *pDesc,
        /* [annotation] */
        _Out_  UINT *pCount);

    HRESULT ( STDMETHODCALLTYPE *GetVideoDecoderConfig )(
        ID3D11VideoDevice * This,
        /* [annotation] */
        _In_  const D3D11_VIDEO_DECODER_DESC *pDesc,
        /* [annotation] */
        _In_  UINT Index,
        /* [annotation] */
        _Out_  D3D11_VIDEO_DECODER_CONFIG *pConfig);

    HRESULT ( STDMETHODCALLTYPE *GetContentProtectionCaps )(
        ID3D11VideoDevice * This,
        /* [annotation] */
        _In_opt_  const GUID *pCryptoType,
        /* [annotation] */
        _In_opt_  const GUID *pDecoderProfile,
        /* [annotation] */
        _Out_  D3D11_VIDEO_CONTENT_PROTECTION_CAPS *pCaps);

    HRESULT ( STDMETHODCALLTYPE *CheckCryptoKeyExchange )(
        ID3D11VideoDevice * This,
        /* [annotation] */
        _In_  const GUID *pCryptoType,
        /* [annotation] */
        _In_opt_  const GUID *pDecoderProfile,
        /* [annotation] */
        _In_  UINT Index,
        /* [annotation] */
        _Out_  GUID *pKeyExchangeType);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11VideoDevice * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_(DataSize)  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11VideoDevice * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    END_INTERFACE
} ID3D11VideoDeviceVtbl;

// -----------------------------------------------------------------------------
// ID3D11Device
// -----------------------------------------------------------------------------
typedef struct ID3D11DeviceVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11Device * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11Device * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11Device * This);

    HRESULT ( STDMETHODCALLTYPE *CreateBuffer )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  const D3D11_BUFFER_DESC *pDesc,
        /* [annotation] */
        _In_opt_  const D3D11_SUBRESOURCE_DATA *pInitialData,
        /* [annotation] */
        _Out_opt_  ID3D11Buffer **ppBuffer);

    HRESULT ( STDMETHODCALLTYPE *CreateTexture1D )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  const D3D11_TEXTURE1D_DESC *pDesc,
        /* [annotation] */
        _In_reads_opt_(_Inexpressible_(pDesc->MipLevels * pDesc->ArraySize))  const D3D11_SUBRESOURCE_DATA *pInitialData,
        /* [annotation] */
        _Out_opt_  ID3D11Texture1D **ppTexture1D);

    HRESULT ( STDMETHODCALLTYPE *CreateTexture2D )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  const D3D11_TEXTURE2D_DESC *pDesc,
        /* [annotation] */
        _In_reads_opt_(_Inexpressible_(pDesc->MipLevels * pDesc->ArraySize))  const D3D11_SUBRESOURCE_DATA *pInitialData,
        /* [annotation] */
        _Out_opt_  ID3D11Texture2D **ppTexture2D);

    HRESULT ( STDMETHODCALLTYPE *CreateTexture3D )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  const D3D11_TEXTURE3D_DESC *pDesc,
        /* [annotation] */
        _In_reads_opt_(_Inexpressible_(pDesc->MipLevels))  const D3D11_SUBRESOURCE_DATA *pInitialData,
        /* [annotation] */
        _Out_opt_  ID3D11Texture3D **ppTexture3D);

    HRESULT ( STDMETHODCALLTYPE *CreateShaderResourceView )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  ID3D11Resource *pResource,
        /* [annotation] */
        _In_opt_  const D3D11_SHADER_RESOURCE_VIEW_DESC *pDesc,
        /* [annotation] */
        _Out_opt_  ID3D11ShaderResourceView **ppSRView);

    HRESULT ( STDMETHODCALLTYPE *CreateUnorderedAccessView )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  ID3D11Resource *pResource,
        /* [annotation] */
        _In_opt_  const D3D11_UNORDERED_ACCESS_VIEW_DESC *pDesc,
        /* [annotation] */
        _Out_opt_  ID3D11UnorderedAccessView **ppUAView);

    HRESULT ( STDMETHODCALLTYPE *CreateRenderTargetView )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  ID3D11Resource *pResource,
        /* [annotation] */
        _In_opt_  const D3D11_RENDER_TARGET_VIEW_DESC *pDesc,
        /* [annotation] */
        _Out_opt_  ID3D11RenderTargetView **ppRTView);

    HRESULT ( STDMETHODCALLTYPE *CreateDepthStencilView )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  ID3D11Resource *pResource,
        /* [annotation] */
        _In_opt_  const D3D11_DEPTH_STENCIL_VIEW_DESC *pDesc,
        /* [annotation] */
        _Out_opt_  ID3D11DepthStencilView **ppDepthStencilView);

    HRESULT ( STDMETHODCALLTYPE *CreateInputLayout )(
        ID3D11Device * This,
        /* [annotation] */
        _In_reads_(NumElements)  const D3D11_INPUT_ELEMENT_DESC *pInputElementDescs,
        /* [annotation] */
        _In_range_( 0, D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT )  UINT NumElements,
        /* [annotation] */
        _In_  const void *pShaderBytecodeWithInputSignature,
        /* [annotation] */
        _In_  SIZE_T BytecodeLength,
        /* [annotation] */
        _Out_opt_  ID3D11InputLayout **ppInputLayout);

    HRESULT ( STDMETHODCALLTYPE *CreateVertexShader )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  const void *pShaderBytecode,
        /* [annotation] */
        _In_  SIZE_T BytecodeLength,
        /* [annotation] */
        _In_opt_  ID3D11ClassLinkage *pClassLinkage,
        /* [annotation] */
        _Out_opt_  ID3D11VertexShader **ppVertexShader);

    HRESULT ( STDMETHODCALLTYPE *CreateGeometryShader )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  const void *pShaderBytecode,
        /* [annotation] */
        _In_  SIZE_T BytecodeLength,
        /* [annotation] */
        _In_opt_  ID3D11ClassLinkage *pClassLinkage,
        /* [annotation] */
        _Out_opt_  ID3D11GeometryShader **ppGeometryShader);

    HRESULT ( STDMETHODCALLTYPE *CreateGeometryShaderWithStreamOutput )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  const void *pShaderBytecode,
        /* [annotation] */
        _In_  SIZE_T BytecodeLength,
        /* [annotation] */
        _In_reads_opt_(NumEntries)  const D3D11_SO_DECLARATION_ENTRY *pSODeclaration,
        /* [annotation] */
        _In_range_( 0, D3D11_SO_STREAM_COUNT * D3D11_SO_OUTPUT_COMPONENT_COUNT )  UINT NumEntries,
        /* [annotation] */
        _In_reads_opt_(NumStrides)  const UINT *pBufferStrides,
        /* [annotation] */
        _In_range_( 0, D3D11_SO_BUFFER_SLOT_COUNT )  UINT NumStrides,
        /* [annotation] */
        _In_  UINT RasterizedStream,
        /* [annotation] */
        _In_opt_  ID3D11ClassLinkage *pClassLinkage,
        /* [annotation] */
        _Out_opt_  ID3D11GeometryShader **ppGeometryShader);

    HRESULT ( STDMETHODCALLTYPE *CreatePixelShader )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  const void *pShaderBytecode,
        /* [annotation] */
        _In_  SIZE_T BytecodeLength,
        /* [annotation] */
        _In_opt_  ID3D11ClassLinkage *pClassLinkage,
        /* [annotation] */
        _Out_opt_  ID3D11PixelShader **ppPixelShader);

    HRESULT ( STDMETHODCALLTYPE *CreateHullShader )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  const void *pShaderBytecode,
        /* [annotation] */
        _In_  SIZE_T BytecodeLength,
        /* [annotation] */
        _In_opt_  ID3D11ClassLinkage *pClassLinkage,
        /* [annotation] */
        _Out_opt_  ID3D11HullShader **ppHullShader);

    HRESULT ( STDMETHODCALLTYPE *CreateDomainShader )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  const void *pShaderBytecode,
        /* [annotation] */
        _In_  SIZE_T BytecodeLength,
        /* [annotation] */
        _In_opt_  ID3D11ClassLinkage *pClassLinkage,
        /* [annotation] */
        _Out_opt_  ID3D11DomainShader **ppDomainShader);

    HRESULT ( STDMETHODCALLTYPE *CreateComputeShader )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  const void *pShaderBytecode,
        /* [annotation] */
        _In_  SIZE_T BytecodeLength,
        /* [annotation] */
        _In_opt_  ID3D11ClassLinkage *pClassLinkage,
        /* [annotation] */
        _Out_opt_  ID3D11ComputeShader **ppComputeShader);

    HRESULT ( STDMETHODCALLTYPE *CreateClassLinkage )(
        ID3D11Device * This,
        /* [annotation] */
        _Out_  ID3D11ClassLinkage **ppLinkage);

    HRESULT ( STDMETHODCALLTYPE *CreateBlendState )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  const D3D11_BLEND_DESC *pBlendStateDesc,
        /* [annotation] */
        _Out_opt_  ID3D11BlendState **ppBlendState);

    HRESULT ( STDMETHODCALLTYPE *CreateDepthStencilState )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  const D3D11_DEPTH_STENCIL_DESC *pDepthStencilDesc,
        /* [annotation] */
        _Out_opt_  ID3D11DepthStencilState **ppDepthStencilState);

    HRESULT ( STDMETHODCALLTYPE *CreateRasterizerState )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  const D3D11_RASTERIZER_DESC *pRasterizerDesc,
        /* [annotation] */
        _Out_opt_  ID3D11RasterizerState **ppRasterizerState);

    HRESULT ( STDMETHODCALLTYPE *CreateSamplerState )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  const D3D11_SAMPLER_DESC *pSamplerDesc,
        /* [annotation] */
        _Out_opt_  ID3D11SamplerState **ppSamplerState);

    HRESULT ( STDMETHODCALLTYPE *CreateQuery )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  const D3D11_QUERY_DESC *pQueryDesc,
        /* [annotation] */
        _Out_opt_  ID3D11Query **ppQuery);

    HRESULT ( STDMETHODCALLTYPE *CreatePredicate )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  const D3D11_QUERY_DESC *pPredicateDesc,
        /* [annotation] */
        _Out_opt_  ID3D11Predicate **ppPredicate);

    HRESULT ( STDMETHODCALLTYPE *CreateCounter )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  const D3D11_COUNTER_DESC *pCounterDesc,
        /* [annotation] */
        _Out_opt_  ID3D11Counter **ppCounter);

    HRESULT ( STDMETHODCALLTYPE *CreateDeferredContext )(
        ID3D11Device * This,
        UINT ContextFlags,
        /* [annotation] */
        _Out_opt_  ID3D11DeviceContext **ppDeferredContext);

    HRESULT ( STDMETHODCALLTYPE *OpenSharedResource )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  HANDLE hResource,
        /* [annotation] */
        _In_  REFIID ReturnedInterface,
        /* [annotation] */
        _Out_opt_  void **ppResource);

    HRESULT ( STDMETHODCALLTYPE *CheckFormatSupport )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  DXGI_FORMAT Format,
        /* [annotation] */
        _Out_  UINT *pFormatSupport);

    HRESULT ( STDMETHODCALLTYPE *CheckMultisampleQualityLevels )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  DXGI_FORMAT Format,
        /* [annotation] */
        _In_  UINT SampleCount,
        /* [annotation] */
        _Out_  UINT *pNumQualityLevels);

    void ( STDMETHODCALLTYPE *CheckCounterInfo )(
        ID3D11Device * This,
        /* [annotation] */
        _Out_  D3D11_COUNTER_INFO *pCounterInfo);

    HRESULT ( STDMETHODCALLTYPE *CheckCounter )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  const D3D11_COUNTER_DESC *pDesc,
        /* [annotation] */
        _Out_  D3D11_COUNTER_TYPE *pType,
        /* [annotation] */
        _Out_  UINT *pActiveCounters,
        /* [annotation] */
        _Out_writes_opt_(*pNameLength)  LPSTR szName,
        /* [annotation] */
        _Inout_opt_  UINT *pNameLength,
        /* [annotation] */
        _Out_writes_opt_(*pUnitsLength)  LPSTR szUnits,
        /* [annotation] */
        _Inout_opt_  UINT *pUnitsLength,
        /* [annotation] */
        _Out_writes_opt_(*pDescriptionLength)  LPSTR szDescription,
        /* [annotation] */
        _Inout_opt_  UINT *pDescriptionLength);

    HRESULT ( STDMETHODCALLTYPE *CheckFeatureSupport )(
        ID3D11Device * This,
        D3D11_FEATURE Feature,
        /* [annotation] */
        _Out_writes_bytes_(FeatureSupportDataSize)  void *pFeatureSupportData,
        UINT FeatureSupportDataSize);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_(*pDataSize)  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_(DataSize)  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11Device * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    D3D_FEATURE_LEVEL ( STDMETHODCALLTYPE *GetFeatureLevel )(
        ID3D11Device * This);

    UINT ( STDMETHODCALLTYPE *GetCreationFlags )(
        ID3D11Device * This);

    HRESULT ( STDMETHODCALLTYPE *GetDeviceRemovedReason )(
        ID3D11Device * This);

    void ( STDMETHODCALLTYPE *GetImmediateContext )(
        ID3D11Device * This,
        /* [annotation] */
        _Out_  ID3D11DeviceContext **ppImmediateContext);

    HRESULT ( STDMETHODCALLTYPE *SetExceptionMode )(
        ID3D11Device * This,
        UINT RaiseFlags);

    UINT ( STDMETHODCALLTYPE *GetExceptionMode )(
        ID3D11Device * This);

    END_INTERFACE
} ID3D11DeviceVtbl;

// -----------------------------------------------------------------------------
// ID3D11BlendState1
// -----------------------------------------------------------------------------
typedef struct ID3D11BlendState1Vtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11BlendState1 * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11BlendState1 * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11BlendState1 * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11BlendState1 * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11BlendState1 * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11BlendState1 * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11BlendState1 * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    void ( STDMETHODCALLTYPE *GetDesc )(
        ID3D11BlendState1 * This,
        /* [annotation] */
        _Out_  D3D11_BLEND_DESC *pDesc);

    void ( STDMETHODCALLTYPE *GetDesc1 )(
        ID3D11BlendState1 * This,
        /* [annotation] */
        _Out_  D3D11_BLEND_DESC1 *pDesc);

    END_INTERFACE
} ID3D11BlendState1Vtbl;

// -----------------------------------------------------------------------------
// ID3D11RasterizerState1
// -----------------------------------------------------------------------------
typedef struct ID3D11RasterizerState1Vtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11RasterizerState1 * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11RasterizerState1 * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11RasterizerState1 * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11RasterizerState1 * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11RasterizerState1 * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11RasterizerState1 * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11RasterizerState1 * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    void ( STDMETHODCALLTYPE *GetDesc )(
        ID3D11RasterizerState1 * This,
        /* [annotation] */
        _Out_  D3D11_RASTERIZER_DESC *pDesc);

    void ( STDMETHODCALLTYPE *GetDesc1 )(
        ID3D11RasterizerState1 * This,
        /* [annotation] */
        _Out_  D3D11_RASTERIZER_DESC1 *pDesc);

    END_INTERFACE
} ID3D11RasterizerState1Vtbl;

// -----------------------------------------------------------------------------
// ID3DDeviceContextState
// -----------------------------------------------------------------------------
typedef struct ID3DDeviceContextStateVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3DDeviceContextState * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3DDeviceContextState * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3DDeviceContextState * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3DDeviceContextState * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3DDeviceContextState * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3DDeviceContextState * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3DDeviceContextState * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    END_INTERFACE
} ID3DDeviceContextStateVtbl;

// -----------------------------------------------------------------------------
// ID3D11DeviceContext1
// -----------------------------------------------------------------------------
typedef struct ID3D11DeviceContext1Vtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11DeviceContext1 * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11DeviceContext1 * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11DeviceContext1 * This);

    void ( STDMETHODCALLTYPE *GetDevice )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _Out_  ID3D11Device **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_( *pDataSize )  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_( DataSize )  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    void ( STDMETHODCALLTYPE *VSSetConstantBuffers )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppConstantBuffers);

    void ( STDMETHODCALLTYPE *PSSetShaderResources )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
        /* [annotation] */
        _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const *ppShaderResourceViews);

    void ( STDMETHODCALLTYPE *PSSetShader )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_opt_  ID3D11PixelShader *pPixelShader,
        /* [annotation] */
        _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const *ppClassInstances,
        UINT NumClassInstances);

    void ( STDMETHODCALLTYPE *PSSetSamplers )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
        /* [annotation] */
        _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const *ppSamplers);

    void ( STDMETHODCALLTYPE *VSSetShader )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_opt_  ID3D11VertexShader *pVertexShader,
        /* [annotation] */
        _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const *ppClassInstances,
        UINT NumClassInstances);

    void ( STDMETHODCALLTYPE *DrawIndexed )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  UINT IndexCount,
        /* [annotation] */
        _In_  UINT StartIndexLocation,
        /* [annotation] */
        _In_  INT BaseVertexLocation);

    void ( STDMETHODCALLTYPE *Draw )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  UINT VertexCount,
        /* [annotation] */
        _In_  UINT StartVertexLocation);

    HRESULT ( STDMETHODCALLTYPE *Map )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11Resource *pResource,
        /* [annotation] */
        _In_  UINT Subresource,
        /* [annotation] */
        _In_  D3D11_MAP MapType,
        /* [annotation] */
        _In_  UINT MapFlags,
        /* [annotation] */
        _Out_  D3D11_MAPPED_SUBRESOURCE *pMappedResource);

    void ( STDMETHODCALLTYPE *Unmap )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11Resource *pResource,
        /* [annotation] */
        _In_  UINT Subresource);

    void ( STDMETHODCALLTYPE *PSSetConstantBuffers )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppConstantBuffers);

    void ( STDMETHODCALLTYPE *IASetInputLayout )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_opt_  ID3D11InputLayout *pInputLayout);

    void ( STDMETHODCALLTYPE *IASetVertexBuffers )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppVertexBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  const UINT *pStrides,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  const UINT *pOffsets);

    void ( STDMETHODCALLTYPE *IASetIndexBuffer )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_opt_  ID3D11Buffer *pIndexBuffer,
        /* [annotation] */
        _In_  DXGI_FORMAT Format,
        /* [annotation] */
        _In_  UINT Offset);

    void ( STDMETHODCALLTYPE *DrawIndexedInstanced )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  UINT IndexCountPerInstance,
        /* [annotation] */
        _In_  UINT InstanceCount,
        /* [annotation] */
        _In_  UINT StartIndexLocation,
        /* [annotation] */
        _In_  INT BaseVertexLocation,
        /* [annotation] */
        _In_  UINT StartInstanceLocation);

    void ( STDMETHODCALLTYPE *DrawInstanced )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  UINT VertexCountPerInstance,
        /* [annotation] */
        _In_  UINT InstanceCount,
        /* [annotation] */
        _In_  UINT StartVertexLocation,
        /* [annotation] */
        _In_  UINT StartInstanceLocation);

    void ( STDMETHODCALLTYPE *GSSetConstantBuffers )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppConstantBuffers);

    void ( STDMETHODCALLTYPE *GSSetShader )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_opt_  ID3D11GeometryShader *pShader,
        /* [annotation] */
        _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const *ppClassInstances,
        UINT NumClassInstances);

    void ( STDMETHODCALLTYPE *IASetPrimitiveTopology )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  D3D11_PRIMITIVE_TOPOLOGY Topology);

    void ( STDMETHODCALLTYPE *VSSetShaderResources )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
        /* [annotation] */
        _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const *ppShaderResourceViews);

    void ( STDMETHODCALLTYPE *VSSetSamplers )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
        /* [annotation] */
        _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const *ppSamplers);

    void ( STDMETHODCALLTYPE *Begin )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11Asynchronous *pAsync);

    void ( STDMETHODCALLTYPE *End )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11Asynchronous *pAsync);

    HRESULT ( STDMETHODCALLTYPE *GetData )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11Asynchronous *pAsync,
        /* [annotation] */
        _Out_writes_bytes_opt_( DataSize )  void *pData,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_  UINT GetDataFlags);

    void ( STDMETHODCALLTYPE *SetPredication )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_opt_  ID3D11Predicate *pPredicate,
        /* [annotation] */
        _In_  BOOL PredicateValue);

    void ( STDMETHODCALLTYPE *GSSetShaderResources )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
        /* [annotation] */
        _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const *ppShaderResourceViews);

    void ( STDMETHODCALLTYPE *GSSetSamplers )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
        /* [annotation] */
        _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const *ppSamplers);

    void ( STDMETHODCALLTYPE *OMSetRenderTargets )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT )  UINT NumViews,
        /* [annotation] */
        _In_reads_opt_(NumViews)  ID3D11RenderTargetView *const *ppRenderTargetViews,
        /* [annotation] */
        _In_opt_  ID3D11DepthStencilView *pDepthStencilView);

    void ( STDMETHODCALLTYPE *OMSetRenderTargetsAndUnorderedAccessViews )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  UINT NumRTVs,
        /* [annotation] */
        _In_reads_opt_(NumRTVs)  ID3D11RenderTargetView *const *ppRenderTargetViews,
        /* [annotation] */
        _In_opt_  ID3D11DepthStencilView *pDepthStencilView,
        /* [annotation] */
        _In_range_( 0, D3D11_1_UAV_SLOT_COUNT - 1 )  UINT UAVStartSlot,
        /* [annotation] */
        _In_  UINT NumUAVs,
        /* [annotation] */
        _In_reads_opt_(NumUAVs)  ID3D11UnorderedAccessView *const *ppUnorderedAccessViews,
        /* [annotation] */
        _In_reads_opt_(NumUAVs)  const UINT *pUAVInitialCounts);

    void ( STDMETHODCALLTYPE *OMSetBlendState )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_opt_  ID3D11BlendState *pBlendState,
        /* [annotation] */
        _In_opt_  const FLOAT BlendFactor[ 4 ],
        /* [annotation] */
        _In_  UINT SampleMask);

    void ( STDMETHODCALLTYPE *OMSetDepthStencilState )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_opt_  ID3D11DepthStencilState *pDepthStencilState,
        /* [annotation] */
        _In_  UINT StencilRef);

    void ( STDMETHODCALLTYPE *SOSetTargets )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_SO_BUFFER_SLOT_COUNT)  UINT NumBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppSOTargets,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  const UINT *pOffsets);

    void ( STDMETHODCALLTYPE *DrawAuto )(
        ID3D11DeviceContext1 * This);

    void ( STDMETHODCALLTYPE *DrawIndexedInstancedIndirect )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11Buffer *pBufferForArgs,
        /* [annotation] */
        _In_  UINT AlignedByteOffsetForArgs);

    void ( STDMETHODCALLTYPE *DrawInstancedIndirect )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11Buffer *pBufferForArgs,
        /* [annotation] */
        _In_  UINT AlignedByteOffsetForArgs);

    void ( STDMETHODCALLTYPE *Dispatch )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  UINT ThreadGroupCountX,
        /* [annotation] */
        _In_  UINT ThreadGroupCountY,
        /* [annotation] */
        _In_  UINT ThreadGroupCountZ);

    void ( STDMETHODCALLTYPE *DispatchIndirect )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11Buffer *pBufferForArgs,
        /* [annotation] */
        _In_  UINT AlignedByteOffsetForArgs);

    void ( STDMETHODCALLTYPE *RSSetState )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_opt_  ID3D11RasterizerState *pRasterizerState);

    void ( STDMETHODCALLTYPE *RSSetViewports )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE)  UINT NumViewports,
        /* [annotation] */
        _In_reads_opt_(NumViewports)  const D3D11_VIEWPORT *pViewports);

    void ( STDMETHODCALLTYPE *RSSetScissorRects )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE)  UINT NumRects,
        /* [annotation] */
        _In_reads_opt_(NumRects)  const D3D11_RECT *pRects);

    void ( STDMETHODCALLTYPE *CopySubresourceRegion )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11Resource *pDstResource,
        /* [annotation] */
        _In_  UINT DstSubresource,
        /* [annotation] */
        _In_  UINT DstX,
        /* [annotation] */
        _In_  UINT DstY,
        /* [annotation] */
        _In_  UINT DstZ,
        /* [annotation] */
        _In_  ID3D11Resource *pSrcResource,
        /* [annotation] */
        _In_  UINT SrcSubresource,
        /* [annotation] */
        _In_opt_  const D3D11_BOX *pSrcBox);

    void ( STDMETHODCALLTYPE *CopyResource )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11Resource *pDstResource,
        /* [annotation] */
        _In_  ID3D11Resource *pSrcResource);

    void ( STDMETHODCALLTYPE *UpdateSubresource )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11Resource *pDstResource,
        /* [annotation] */
        _In_  UINT DstSubresource,
        /* [annotation] */
        _In_opt_  const D3D11_BOX *pDstBox,
        /* [annotation] */
        _In_  const void *pSrcData,
        /* [annotation] */
        _In_  UINT SrcRowPitch,
        /* [annotation] */
        _In_  UINT SrcDepthPitch);

    void ( STDMETHODCALLTYPE *CopyStructureCount )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11Buffer *pDstBuffer,
        /* [annotation] */
        _In_  UINT DstAlignedByteOffset,
        /* [annotation] */
        _In_  ID3D11UnorderedAccessView *pSrcView);

    void ( STDMETHODCALLTYPE *ClearRenderTargetView )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11RenderTargetView *pRenderTargetView,
        /* [annotation] */
        _In_  const FLOAT ColorRGBA[ 4 ]);

    void ( STDMETHODCALLTYPE *ClearUnorderedAccessViewUint )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11UnorderedAccessView *pUnorderedAccessView,
        /* [annotation] */
        _In_  const UINT Values[ 4 ]);

    void ( STDMETHODCALLTYPE *ClearUnorderedAccessViewFloat )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11UnorderedAccessView *pUnorderedAccessView,
        /* [annotation] */
        _In_  const FLOAT Values[ 4 ]);

    void ( STDMETHODCALLTYPE *ClearDepthStencilView )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11DepthStencilView *pDepthStencilView,
        /* [annotation] */
        _In_  UINT ClearFlags,
        /* [annotation] */
        _In_  FLOAT Depth,
        /* [annotation] */
        _In_  UINT8 Stencil);

    void ( STDMETHODCALLTYPE *GenerateMips )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11ShaderResourceView *pShaderResourceView);

    void ( STDMETHODCALLTYPE *SetResourceMinLOD )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11Resource *pResource,
        FLOAT MinLOD);

    FLOAT ( STDMETHODCALLTYPE *GetResourceMinLOD )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11Resource *pResource);

    void ( STDMETHODCALLTYPE *ResolveSubresource )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11Resource *pDstResource,
        /* [annotation] */
        _In_  UINT DstSubresource,
        /* [annotation] */
        _In_  ID3D11Resource *pSrcResource,
        /* [annotation] */
        _In_  UINT SrcSubresource,
        /* [annotation] */
        _In_  DXGI_FORMAT Format);

    void ( STDMETHODCALLTYPE *ExecuteCommandList )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11CommandList *pCommandList,
        BOOL RestoreContextState);

    void ( STDMETHODCALLTYPE *HSSetShaderResources )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
        /* [annotation] */
        _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const *ppShaderResourceViews);

    void ( STDMETHODCALLTYPE *HSSetShader )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_opt_  ID3D11HullShader *pHullShader,
        /* [annotation] */
        _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const *ppClassInstances,
        UINT NumClassInstances);

    void ( STDMETHODCALLTYPE *HSSetSamplers )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
        /* [annotation] */
        _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const *ppSamplers);

    void ( STDMETHODCALLTYPE *HSSetConstantBuffers )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppConstantBuffers);

    void ( STDMETHODCALLTYPE *DSSetShaderResources )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
        /* [annotation] */
        _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const *ppShaderResourceViews);

    void ( STDMETHODCALLTYPE *DSSetShader )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_opt_  ID3D11DomainShader *pDomainShader,
        /* [annotation] */
        _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const *ppClassInstances,
        UINT NumClassInstances);

    void ( STDMETHODCALLTYPE *DSSetSamplers )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
        /* [annotation] */
        _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const *ppSamplers);

    void ( STDMETHODCALLTYPE *DSSetConstantBuffers )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppConstantBuffers);

    void ( STDMETHODCALLTYPE *CSSetShaderResources )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
        /* [annotation] */
        _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const *ppShaderResourceViews);

    void ( STDMETHODCALLTYPE *CSSetUnorderedAccessViews )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_1_UAV_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_1_UAV_SLOT_COUNT - StartSlot )  UINT NumUAVs,
        /* [annotation] */
        _In_reads_opt_(NumUAVs)  ID3D11UnorderedAccessView *const *ppUnorderedAccessViews,
        /* [annotation] */
        _In_reads_opt_(NumUAVs)  const UINT *pUAVInitialCounts);

    void ( STDMETHODCALLTYPE *CSSetShader )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_opt_  ID3D11ComputeShader *pComputeShader,
        /* [annotation] */
        _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const *ppClassInstances,
        UINT NumClassInstances);

    void ( STDMETHODCALLTYPE *CSSetSamplers )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
        /* [annotation] */
        _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const *ppSamplers);

    void ( STDMETHODCALLTYPE *CSSetConstantBuffers )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppConstantBuffers);

    void ( STDMETHODCALLTYPE *VSGetConstantBuffers )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppConstantBuffers);

    void ( STDMETHODCALLTYPE *PSGetShaderResources )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
        /* [annotation] */
        _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView **ppShaderResourceViews);

    void ( STDMETHODCALLTYPE *PSGetShader )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _Out_  ID3D11PixelShader **ppPixelShader,
        /* [annotation] */
        _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance **ppClassInstances,
        /* [annotation] */
        _Inout_opt_  UINT *pNumClassInstances);

    void ( STDMETHODCALLTYPE *PSGetSamplers )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
        /* [annotation] */
        _Out_writes_opt_(NumSamplers)  ID3D11SamplerState **ppSamplers);

    void ( STDMETHODCALLTYPE *VSGetShader )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _Out_  ID3D11VertexShader **ppVertexShader,
        /* [annotation] */
        _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance **ppClassInstances,
        /* [annotation] */
        _Inout_opt_  UINT *pNumClassInstances);

    void ( STDMETHODCALLTYPE *PSGetConstantBuffers )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppConstantBuffers);

    void ( STDMETHODCALLTYPE *IAGetInputLayout )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _Out_  ID3D11InputLayout **ppInputLayout);

    void ( STDMETHODCALLTYPE *IAGetVertexBuffers )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppVertexBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  UINT *pStrides,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  UINT *pOffsets);

    void ( STDMETHODCALLTYPE *IAGetIndexBuffer )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _Out_opt_  ID3D11Buffer **pIndexBuffer,
        /* [annotation] */
        _Out_opt_  DXGI_FORMAT *Format,
        /* [annotation] */
        _Out_opt_  UINT *Offset);

    void ( STDMETHODCALLTYPE *GSGetConstantBuffers )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppConstantBuffers);

    void ( STDMETHODCALLTYPE *GSGetShader )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _Out_  ID3D11GeometryShader **ppGeometryShader,
        /* [annotation] */
        _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance **ppClassInstances,
        /* [annotation] */
        _Inout_opt_  UINT *pNumClassInstances);

    void ( STDMETHODCALLTYPE *IAGetPrimitiveTopology )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _Out_  D3D11_PRIMITIVE_TOPOLOGY *pTopology);

    void ( STDMETHODCALLTYPE *VSGetShaderResources )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
        /* [annotation] */
        _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView **ppShaderResourceViews);

    void ( STDMETHODCALLTYPE *VSGetSamplers )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
        /* [annotation] */
        _Out_writes_opt_(NumSamplers)  ID3D11SamplerState **ppSamplers);

    void ( STDMETHODCALLTYPE *GetPredication )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _Out_opt_  ID3D11Predicate **ppPredicate,
        /* [annotation] */
        _Out_opt_  BOOL *pPredicateValue);

    void ( STDMETHODCALLTYPE *GSGetShaderResources )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
        /* [annotation] */
        _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView **ppShaderResourceViews);

    void ( STDMETHODCALLTYPE *GSGetSamplers )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
        /* [annotation] */
        _Out_writes_opt_(NumSamplers)  ID3D11SamplerState **ppSamplers);

    void ( STDMETHODCALLTYPE *OMGetRenderTargets )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT )  UINT NumViews,
        /* [annotation] */
        _Out_writes_opt_(NumViews)  ID3D11RenderTargetView **ppRenderTargetViews,
        /* [annotation] */
        _Out_opt_  ID3D11DepthStencilView **ppDepthStencilView);

    void ( STDMETHODCALLTYPE *OMGetRenderTargetsAndUnorderedAccessViews )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT )  UINT NumRTVs,
        /* [annotation] */
        _Out_writes_opt_(NumRTVs)  ID3D11RenderTargetView **ppRenderTargetViews,
        /* [annotation] */
        _Out_opt_  ID3D11DepthStencilView **ppDepthStencilView,
        /* [annotation] */
        _In_range_( 0, D3D11_PS_CS_UAV_REGISTER_COUNT - 1 )  UINT UAVStartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_PS_CS_UAV_REGISTER_COUNT - UAVStartSlot )  UINT NumUAVs,
        /* [annotation] */
        _Out_writes_opt_(NumUAVs)  ID3D11UnorderedAccessView **ppUnorderedAccessViews);

    void ( STDMETHODCALLTYPE *OMGetBlendState )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _Out_opt_  ID3D11BlendState **ppBlendState,
        /* [annotation] */
        _Out_opt_  FLOAT BlendFactor[ 4 ],
        /* [annotation] */
        _Out_opt_  UINT *pSampleMask);

    void ( STDMETHODCALLTYPE *OMGetDepthStencilState )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _Out_opt_  ID3D11DepthStencilState **ppDepthStencilState,
        /* [annotation] */
        _Out_opt_  UINT *pStencilRef);

    void ( STDMETHODCALLTYPE *SOGetTargets )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_SO_BUFFER_SLOT_COUNT )  UINT NumBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppSOTargets);

    void ( STDMETHODCALLTYPE *RSGetState )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _Out_  ID3D11RasterizerState **ppRasterizerState);

    void ( STDMETHODCALLTYPE *RSGetViewports )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _Inout_ /*_range(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE )*/   UINT *pNumViewports,
        /* [annotation] */
        _Out_writes_opt_(*pNumViewports)  D3D11_VIEWPORT *pViewports);

    void ( STDMETHODCALLTYPE *RSGetScissorRects )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _Inout_ /*_range(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE )*/   UINT *pNumRects,
        /* [annotation] */
        _Out_writes_opt_(*pNumRects)  D3D11_RECT *pRects);

    void ( STDMETHODCALLTYPE *HSGetShaderResources )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
        /* [annotation] */
        _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView **ppShaderResourceViews);

    void ( STDMETHODCALLTYPE *HSGetShader )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _Out_  ID3D11HullShader **ppHullShader,
        /* [annotation] */
        _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance **ppClassInstances,
        /* [annotation] */
        _Inout_opt_  UINT *pNumClassInstances);

    void ( STDMETHODCALLTYPE *HSGetSamplers )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
        /* [annotation] */
        _Out_writes_opt_(NumSamplers)  ID3D11SamplerState **ppSamplers);

    void ( STDMETHODCALLTYPE *HSGetConstantBuffers )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppConstantBuffers);

    void ( STDMETHODCALLTYPE *DSGetShaderResources )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
        /* [annotation] */
        _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView **ppShaderResourceViews);

    void ( STDMETHODCALLTYPE *DSGetShader )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _Out_  ID3D11DomainShader **ppDomainShader,
        /* [annotation] */
        _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance **ppClassInstances,
        /* [annotation] */
        _Inout_opt_  UINT *pNumClassInstances);

    void ( STDMETHODCALLTYPE *DSGetSamplers )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
        /* [annotation] */
        _Out_writes_opt_(NumSamplers)  ID3D11SamplerState **ppSamplers);

    void ( STDMETHODCALLTYPE *DSGetConstantBuffers )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppConstantBuffers);

    void ( STDMETHODCALLTYPE *CSGetShaderResources )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews,
        /* [annotation] */
        _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView **ppShaderResourceViews);

    void ( STDMETHODCALLTYPE *CSGetUnorderedAccessViews )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_PS_CS_UAV_REGISTER_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_PS_CS_UAV_REGISTER_COUNT - StartSlot )  UINT NumUAVs,
        /* [annotation] */
        _Out_writes_opt_(NumUAVs)  ID3D11UnorderedAccessView **ppUnorderedAccessViews);

    void ( STDMETHODCALLTYPE *CSGetShader )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _Out_  ID3D11ComputeShader **ppComputeShader,
        /* [annotation] */
        _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance **ppClassInstances,
        /* [annotation] */
        _Inout_opt_  UINT *pNumClassInstances);

    void ( STDMETHODCALLTYPE *CSGetSamplers )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers,
        /* [annotation] */
        _Out_writes_opt_(NumSamplers)  ID3D11SamplerState **ppSamplers);

    void ( STDMETHODCALLTYPE *CSGetConstantBuffers )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppConstantBuffers);

    void ( STDMETHODCALLTYPE *ClearState )(
        ID3D11DeviceContext1 * This);

    void ( STDMETHODCALLTYPE *Flush )(
        ID3D11DeviceContext1 * This);

    D3D11_DEVICE_CONTEXT_TYPE ( STDMETHODCALLTYPE *GetType )(
        ID3D11DeviceContext1 * This);

    UINT ( STDMETHODCALLTYPE *GetContextFlags )(
        ID3D11DeviceContext1 * This);

    HRESULT ( STDMETHODCALLTYPE *FinishCommandList )(
        ID3D11DeviceContext1 * This,
        BOOL RestoreDeferredContextState,
        /* [annotation] */
        _Out_opt_  ID3D11CommandList **ppCommandList);

    void ( STDMETHODCALLTYPE *CopySubresourceRegion1 )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11Resource *pDstResource,
        /* [annotation] */
        _In_  UINT DstSubresource,
        /* [annotation] */
        _In_  UINT DstX,
        /* [annotation] */
        _In_  UINT DstY,
        /* [annotation] */
        _In_  UINT DstZ,
        /* [annotation] */
        _In_  ID3D11Resource *pSrcResource,
        /* [annotation] */
        _In_  UINT SrcSubresource,
        /* [annotation] */
        _In_opt_  const D3D11_BOX *pSrcBox,
        /* [annotation] */
        _In_  UINT CopyFlags);

    void ( STDMETHODCALLTYPE *UpdateSubresource1 )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11Resource *pDstResource,
        /* [annotation] */
        _In_  UINT DstSubresource,
        /* [annotation] */
        _In_opt_  const D3D11_BOX *pDstBox,
        /* [annotation] */
        _In_  const void *pSrcData,
        /* [annotation] */
        _In_  UINT SrcRowPitch,
        /* [annotation] */
        _In_  UINT SrcDepthPitch,
        /* [annotation] */
        _In_  UINT CopyFlags);

    void ( STDMETHODCALLTYPE *DiscardResource )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11Resource *pResource);

    void ( STDMETHODCALLTYPE *DiscardView )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11View *pResourceView);

    void ( STDMETHODCALLTYPE *VSSetConstantBuffers1 )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppConstantBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  const UINT *pFirstConstant,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  const UINT *pNumConstants);

    void ( STDMETHODCALLTYPE *HSSetConstantBuffers1 )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppConstantBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  const UINT *pFirstConstant,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  const UINT *pNumConstants);

    void ( STDMETHODCALLTYPE *DSSetConstantBuffers1 )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppConstantBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  const UINT *pFirstConstant,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  const UINT *pNumConstants);

    void ( STDMETHODCALLTYPE *GSSetConstantBuffers1 )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppConstantBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  const UINT *pFirstConstant,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  const UINT *pNumConstants);

    void ( STDMETHODCALLTYPE *PSSetConstantBuffers1 )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppConstantBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  const UINT *pFirstConstant,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  const UINT *pNumConstants);

    void ( STDMETHODCALLTYPE *CSSetConstantBuffers1 )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  ID3D11Buffer *const *ppConstantBuffers,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  const UINT *pFirstConstant,
        /* [annotation] */
        _In_reads_opt_(NumBuffers)  const UINT *pNumConstants);

    void ( STDMETHODCALLTYPE *VSGetConstantBuffers1 )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppConstantBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  UINT *pFirstConstant,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  UINT *pNumConstants);

    void ( STDMETHODCALLTYPE *HSGetConstantBuffers1 )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppConstantBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  UINT *pFirstConstant,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  UINT *pNumConstants);

    void ( STDMETHODCALLTYPE *DSGetConstantBuffers1 )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppConstantBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  UINT *pFirstConstant,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  UINT *pNumConstants);

    void ( STDMETHODCALLTYPE *GSGetConstantBuffers1 )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppConstantBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  UINT *pFirstConstant,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  UINT *pNumConstants);

    void ( STDMETHODCALLTYPE *PSGetConstantBuffers1 )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppConstantBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  UINT *pFirstConstant,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  UINT *pNumConstants);

    void ( STDMETHODCALLTYPE *CSGetConstantBuffers1 )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot,
        /* [annotation] */
        _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  ID3D11Buffer **ppConstantBuffers,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  UINT *pFirstConstant,
        /* [annotation] */
        _Out_writes_opt_(NumBuffers)  UINT *pNumConstants);

    void ( STDMETHODCALLTYPE *SwapDeviceContextState )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3DDeviceContextState *pState,
        /* [annotation] */
        _Out_opt_  ID3DDeviceContextState **ppPreviousState);

    void ( STDMETHODCALLTYPE *ClearView )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11View *pView,
        /* [annotation] */
        _In_  const FLOAT Color[ 4 ],
        /* [annotation] */
        _In_reads_opt_(NumRects)  const D3D11_RECT *pRect,
        UINT NumRects);

    void ( STDMETHODCALLTYPE *DiscardView1 )(
        ID3D11DeviceContext1 * This,
        /* [annotation] */
        _In_  ID3D11View *pResourceView,
        /* [annotation] */
        _In_reads_opt_(NumRects)  const D3D11_RECT *pRects,
        UINT NumRects);

    END_INTERFACE
} ID3D11DeviceContext1Vtbl;

// -----------------------------------------------------------------------------
// ID3D11Device1
// -----------------------------------------------------------------------------
typedef struct ID3D11Device1Vtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11Device1 * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11Device1 * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11Device1 * This);

    HRESULT ( STDMETHODCALLTYPE *CreateBuffer )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  const D3D11_BUFFER_DESC *pDesc,
        /* [annotation] */
        _In_opt_  const D3D11_SUBRESOURCE_DATA *pInitialData,
        /* [annotation] */
        _Out_opt_  ID3D11Buffer **ppBuffer);

    HRESULT ( STDMETHODCALLTYPE *CreateTexture1D )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  const D3D11_TEXTURE1D_DESC *pDesc,
        /* [annotation] */
        _In_reads_opt_(_Inexpressible_(pDesc->MipLevels * pDesc->ArraySize))  const D3D11_SUBRESOURCE_DATA *pInitialData,
        /* [annotation] */
        _Out_opt_  ID3D11Texture1D **ppTexture1D);

    HRESULT ( STDMETHODCALLTYPE *CreateTexture2D )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  const D3D11_TEXTURE2D_DESC *pDesc,
        /* [annotation] */
        _In_reads_opt_(_Inexpressible_(pDesc->MipLevels * pDesc->ArraySize))  const D3D11_SUBRESOURCE_DATA *pInitialData,
        /* [annotation] */
        _Out_opt_  ID3D11Texture2D **ppTexture2D);

    HRESULT ( STDMETHODCALLTYPE *CreateTexture3D )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  const D3D11_TEXTURE3D_DESC *pDesc,
        /* [annotation] */
        _In_reads_opt_(_Inexpressible_(pDesc->MipLevels))  const D3D11_SUBRESOURCE_DATA *pInitialData,
        /* [annotation] */
        _Out_opt_  ID3D11Texture3D **ppTexture3D);

    HRESULT ( STDMETHODCALLTYPE *CreateShaderResourceView )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  ID3D11Resource *pResource,
        /* [annotation] */
        _In_opt_  const D3D11_SHADER_RESOURCE_VIEW_DESC *pDesc,
        /* [annotation] */
        _Out_opt_  ID3D11ShaderResourceView **ppSRView);

    HRESULT ( STDMETHODCALLTYPE *CreateUnorderedAccessView )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  ID3D11Resource *pResource,
        /* [annotation] */
        _In_opt_  const D3D11_UNORDERED_ACCESS_VIEW_DESC *pDesc,
        /* [annotation] */
        _Out_opt_  ID3D11UnorderedAccessView **ppUAView);

    HRESULT ( STDMETHODCALLTYPE *CreateRenderTargetView )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  ID3D11Resource *pResource,
        /* [annotation] */
        _In_opt_  const D3D11_RENDER_TARGET_VIEW_DESC *pDesc,
        /* [annotation] */
        _Out_opt_  ID3D11RenderTargetView **ppRTView);

    HRESULT ( STDMETHODCALLTYPE *CreateDepthStencilView )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  ID3D11Resource *pResource,
        /* [annotation] */
        _In_opt_  const D3D11_DEPTH_STENCIL_VIEW_DESC *pDesc,
        /* [annotation] */
        _Out_opt_  ID3D11DepthStencilView **ppDepthStencilView);

    HRESULT ( STDMETHODCALLTYPE *CreateInputLayout )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_reads_(NumElements)  const D3D11_INPUT_ELEMENT_DESC *pInputElementDescs,
        /* [annotation] */
        _In_range_( 0, D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT )  UINT NumElements,
        /* [annotation] */
        _In_  const void *pShaderBytecodeWithInputSignature,
        /* [annotation] */
        _In_  SIZE_T BytecodeLength,
        /* [annotation] */
        _Out_opt_  ID3D11InputLayout **ppInputLayout);

    HRESULT ( STDMETHODCALLTYPE *CreateVertexShader )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  const void *pShaderBytecode,
        /* [annotation] */
        _In_  SIZE_T BytecodeLength,
        /* [annotation] */
        _In_opt_  ID3D11ClassLinkage *pClassLinkage,
        /* [annotation] */
        _Out_opt_  ID3D11VertexShader **ppVertexShader);

    HRESULT ( STDMETHODCALLTYPE *CreateGeometryShader )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  const void *pShaderBytecode,
        /* [annotation] */
        _In_  SIZE_T BytecodeLength,
        /* [annotation] */
        _In_opt_  ID3D11ClassLinkage *pClassLinkage,
        /* [annotation] */
        _Out_opt_  ID3D11GeometryShader **ppGeometryShader);

    HRESULT ( STDMETHODCALLTYPE *CreateGeometryShaderWithStreamOutput )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  const void *pShaderBytecode,
        /* [annotation] */
        _In_  SIZE_T BytecodeLength,
        /* [annotation] */
        _In_reads_opt_(NumEntries)  const D3D11_SO_DECLARATION_ENTRY *pSODeclaration,
        /* [annotation] */
        _In_range_( 0, D3D11_SO_STREAM_COUNT * D3D11_SO_OUTPUT_COMPONENT_COUNT )  UINT NumEntries,
        /* [annotation] */
        _In_reads_opt_(NumStrides)  const UINT *pBufferStrides,
        /* [annotation] */
        _In_range_( 0, D3D11_SO_BUFFER_SLOT_COUNT )  UINT NumStrides,
        /* [annotation] */
        _In_  UINT RasterizedStream,
        /* [annotation] */
        _In_opt_  ID3D11ClassLinkage *pClassLinkage,
        /* [annotation] */
        _Out_opt_  ID3D11GeometryShader **ppGeometryShader);

    HRESULT ( STDMETHODCALLTYPE *CreatePixelShader )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  const void *pShaderBytecode,
        /* [annotation] */
        _In_  SIZE_T BytecodeLength,
        /* [annotation] */
        _In_opt_  ID3D11ClassLinkage *pClassLinkage,
        /* [annotation] */
        _Out_opt_  ID3D11PixelShader **ppPixelShader);

    HRESULT ( STDMETHODCALLTYPE *CreateHullShader )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  const void *pShaderBytecode,
        /* [annotation] */
        _In_  SIZE_T BytecodeLength,
        /* [annotation] */
        _In_opt_  ID3D11ClassLinkage *pClassLinkage,
        /* [annotation] */
        _Out_opt_  ID3D11HullShader **ppHullShader);

    HRESULT ( STDMETHODCALLTYPE *CreateDomainShader )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  const void *pShaderBytecode,
        /* [annotation] */
        _In_  SIZE_T BytecodeLength,
        /* [annotation] */
        _In_opt_  ID3D11ClassLinkage *pClassLinkage,
        /* [annotation] */
        _Out_opt_  ID3D11DomainShader **ppDomainShader);

    HRESULT ( STDMETHODCALLTYPE *CreateComputeShader )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  const void *pShaderBytecode,
        /* [annotation] */
        _In_  SIZE_T BytecodeLength,
        /* [annotation] */
        _In_opt_  ID3D11ClassLinkage *pClassLinkage,
        /* [annotation] */
        _Out_opt_  ID3D11ComputeShader **ppComputeShader);

    HRESULT ( STDMETHODCALLTYPE *CreateClassLinkage )(
        ID3D11Device1 * This,
        /* [annotation] */
        _Out_  ID3D11ClassLinkage **ppLinkage);

    HRESULT ( STDMETHODCALLTYPE *CreateBlendState )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  const D3D11_BLEND_DESC *pBlendStateDesc,
        /* [annotation] */
        _Out_opt_  ID3D11BlendState **ppBlendState);

    HRESULT ( STDMETHODCALLTYPE *CreateDepthStencilState )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  const D3D11_DEPTH_STENCIL_DESC *pDepthStencilDesc,
        /* [annotation] */
        _Out_opt_  ID3D11DepthStencilState **ppDepthStencilState);

    HRESULT ( STDMETHODCALLTYPE *CreateRasterizerState )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  const D3D11_RASTERIZER_DESC *pRasterizerDesc,
        /* [annotation] */
        _Out_opt_  ID3D11RasterizerState **ppRasterizerState);

    HRESULT ( STDMETHODCALLTYPE *CreateSamplerState )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  const D3D11_SAMPLER_DESC *pSamplerDesc,
        /* [annotation] */
        _Out_opt_  ID3D11SamplerState **ppSamplerState);

    HRESULT ( STDMETHODCALLTYPE *CreateQuery )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  const D3D11_QUERY_DESC *pQueryDesc,
        /* [annotation] */
        _Out_opt_  ID3D11Query **ppQuery);

    HRESULT ( STDMETHODCALLTYPE *CreatePredicate )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  const D3D11_QUERY_DESC *pPredicateDesc,
        /* [annotation] */
        _Out_opt_  ID3D11Predicate **ppPredicate);

    HRESULT ( STDMETHODCALLTYPE *CreateCounter )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  const D3D11_COUNTER_DESC *pCounterDesc,
        /* [annotation] */
        _Out_opt_  ID3D11Counter **ppCounter);

    HRESULT ( STDMETHODCALLTYPE *CreateDeferredContext )(
        ID3D11Device1 * This,
        UINT ContextFlags,
        /* [annotation] */
        _Out_opt_  ID3D11DeviceContext **ppDeferredContext);

    HRESULT ( STDMETHODCALLTYPE *OpenSharedResource )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  HANDLE hResource,
        /* [annotation] */
        _In_  REFIID ReturnedInterface,
        /* [annotation] */
        _Out_opt_  void **ppResource);

    HRESULT ( STDMETHODCALLTYPE *CheckFormatSupport )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  DXGI_FORMAT Format,
        /* [annotation] */
        _Out_  UINT *pFormatSupport);

    HRESULT ( STDMETHODCALLTYPE *CheckMultisampleQualityLevels )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  DXGI_FORMAT Format,
        /* [annotation] */
        _In_  UINT SampleCount,
        /* [annotation] */
        _Out_  UINT *pNumQualityLevels);

    void ( STDMETHODCALLTYPE *CheckCounterInfo )(
        ID3D11Device1 * This,
        /* [annotation] */
        _Out_  D3D11_COUNTER_INFO *pCounterInfo);

    HRESULT ( STDMETHODCALLTYPE *CheckCounter )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  const D3D11_COUNTER_DESC *pDesc,
        /* [annotation] */
        _Out_  D3D11_COUNTER_TYPE *pType,
        /* [annotation] */
        _Out_  UINT *pActiveCounters,
        /* [annotation] */
        _Out_writes_opt_(*pNameLength)  LPSTR szName,
        /* [annotation] */
        _Inout_opt_  UINT *pNameLength,
        /* [annotation] */
        _Out_writes_opt_(*pUnitsLength)  LPSTR szUnits,
        /* [annotation] */
        _Inout_opt_  UINT *pUnitsLength,
        /* [annotation] */
        _Out_writes_opt_(*pDescriptionLength)  LPSTR szDescription,
        /* [annotation] */
        _Inout_opt_  UINT *pDescriptionLength);

    HRESULT ( STDMETHODCALLTYPE *CheckFeatureSupport )(
        ID3D11Device1 * This,
        D3D11_FEATURE Feature,
        /* [annotation] */
        _Out_writes_bytes_(FeatureSupportDataSize)  void *pFeatureSupportData,
        UINT FeatureSupportDataSize);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _Inout_  UINT *pDataSize,
        /* [annotation] */
        _Out_writes_bytes_opt_(*pDataSize)  void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_  UINT DataSize,
        /* [annotation] */
        _In_reads_bytes_opt_(DataSize)  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  REFGUID guid,
        /* [annotation] */
        _In_opt_  const IUnknown *pData);

    D3D_FEATURE_LEVEL ( STDMETHODCALLTYPE *GetFeatureLevel )(
        ID3D11Device1 * This);

    UINT ( STDMETHODCALLTYPE *GetCreationFlags )(
        ID3D11Device1 * This);

    HRESULT ( STDMETHODCALLTYPE *GetDeviceRemovedReason )(
        ID3D11Device1 * This);

    void ( STDMETHODCALLTYPE *GetImmediateContext )(
        ID3D11Device1 * This,
        /* [annotation] */
        _Out_  ID3D11DeviceContext **ppImmediateContext);

    HRESULT ( STDMETHODCALLTYPE *SetExceptionMode )(
        ID3D11Device1 * This,
        UINT RaiseFlags);

    UINT ( STDMETHODCALLTYPE *GetExceptionMode )(
        ID3D11Device1 * This);

    void ( STDMETHODCALLTYPE *GetImmediateContext1 )(
        ID3D11Device1 * This,
        /* [annotation] */
        _Out_  ID3D11DeviceContext1 **ppImmediateContext);

    HRESULT ( STDMETHODCALLTYPE *CreateDeferredContext1 )(
        ID3D11Device1 * This,
        UINT ContextFlags,
        /* [annotation] */
        _Out_opt_  ID3D11DeviceContext1 **ppDeferredContext);

    HRESULT ( STDMETHODCALLTYPE *CreateBlendState1 )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  const D3D11_BLEND_DESC1 *pBlendStateDesc,
        /* [annotation] */
        _Out_opt_  ID3D11BlendState1 **ppBlendState);

    HRESULT ( STDMETHODCALLTYPE *CreateRasterizerState1 )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  const D3D11_RASTERIZER_DESC1 *pRasterizerDesc,
        /* [annotation] */
        _Out_opt_  ID3D11RasterizerState1 **ppRasterizerState);

    HRESULT ( STDMETHODCALLTYPE *CreateDeviceContextState )(
        ID3D11Device1 * This,
        UINT Flags,
        /* [annotation] */
        _In_reads_( FeatureLevels )  const D3D_FEATURE_LEVEL *pFeatureLevels,
        UINT FeatureLevels,
        UINT SDKVersion,
        REFIID EmulatedInterface,
        /* [annotation] */
        _Out_opt_  D3D_FEATURE_LEVEL *pChosenFeatureLevel,
        /* [annotation] */
        _Out_opt_  ID3DDeviceContextState **ppContextState);

    HRESULT ( STDMETHODCALLTYPE *OpenSharedResource1 )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  HANDLE hResource,
        /* [annotation] */
        _In_  REFIID returnedInterface,
        /* [annotation] */
        _Out_  void **ppResource);

    HRESULT ( STDMETHODCALLTYPE *OpenSharedResourceByName )(
        ID3D11Device1 * This,
        /* [annotation] */
        _In_  LPCWSTR lpName,
        /* [annotation] */
        _In_  DWORD dwDesiredAccess,
        /* [annotation] */
        _In_  REFIID returnedInterface,
        /* [annotation] */
        _Out_  void **ppResource);

    END_INTERFACE
} ID3D11Device1Vtbl;

// -----------------------------------------------------------------------------
// ID3DUserDefinedAnnotation
// -----------------------------------------------------------------------------
typedef struct ID3DUserDefinedAnnotationVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3DUserDefinedAnnotation * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3DUserDefinedAnnotation * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3DUserDefinedAnnotation * This);

    INT ( STDMETHODCALLTYPE *BeginEvent )(
        ID3DUserDefinedAnnotation * This,
        /* [annotation] */
        _In_  LPCWSTR Name);

    INT ( STDMETHODCALLTYPE *EndEvent )(
        ID3DUserDefinedAnnotation * This);

    void ( STDMETHODCALLTYPE *SetMarker )(
        ID3DUserDefinedAnnotation * This,
        /* [annotation] */
        _In_  LPCWSTR Name);

    BOOL ( STDMETHODCALLTYPE *GetStatus )(
        ID3DUserDefinedAnnotation * This);

    END_INTERFACE
} ID3DUserDefinedAnnotationVtbl;

// -----------------------------------------------------------------------------
// ID3D11Debug
// -----------------------------------------------------------------------------
typedef struct ID3D11DebugVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11Debug * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11Debug * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11Debug * This);

    HRESULT ( STDMETHODCALLTYPE *SetFeatureMask )(
        ID3D11Debug * This,
        UINT Mask);

    UINT ( STDMETHODCALLTYPE *GetFeatureMask )(
        ID3D11Debug * This);

    HRESULT ( STDMETHODCALLTYPE *SetPresentPerRenderOpDelay )(
        ID3D11Debug * This,
        UINT Milliseconds);

    UINT ( STDMETHODCALLTYPE *GetPresentPerRenderOpDelay )(
        ID3D11Debug * This);

    HRESULT ( STDMETHODCALLTYPE *SetSwapChain )(
        ID3D11Debug * This,
        /* [annotation] */
        _In_opt_  IDXGISwapChain *pSwapChain);

    HRESULT ( STDMETHODCALLTYPE *GetSwapChain )(
        ID3D11Debug * This,
        /* [annotation] */
        _Out_  IDXGISwapChain **ppSwapChain);

    HRESULT ( STDMETHODCALLTYPE *ValidateContext )(
        ID3D11Debug * This,
        /* [annotation] */
        _In_  ID3D11DeviceContext *pContext);

    HRESULT ( STDMETHODCALLTYPE *ReportLiveDeviceObjects )(
        ID3D11Debug * This,
        D3D11_RLDO_FLAGS Flags);

    HRESULT ( STDMETHODCALLTYPE *ValidateContextForDispatch )(
        ID3D11Debug * This,
        /* [annotation] */
        _In_  ID3D11DeviceContext *pContext);

    END_INTERFACE
} ID3D11DebugVtbl;

// -----------------------------------------------------------------------------
// ID3D11SwitchToRef
// -----------------------------------------------------------------------------
typedef struct ID3D11SwitchToRefVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11SwitchToRef * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11SwitchToRef * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11SwitchToRef * This);

    BOOL ( STDMETHODCALLTYPE *SetUseRef )(
        ID3D11SwitchToRef * This,
        BOOL UseRef);

    BOOL ( STDMETHODCALLTYPE *GetUseRef )(
        ID3D11SwitchToRef * This);

    END_INTERFACE
} ID3D11SwitchToRefVtbl;

// -----------------------------------------------------------------------------
// ID3D11TracingDevice
// -----------------------------------------------------------------------------
typedef struct ID3D11TracingDeviceVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11TracingDevice * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11TracingDevice * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11TracingDevice * This);

    HRESULT ( STDMETHODCALLTYPE *SetShaderTrackingOptionsByType )(
        ID3D11TracingDevice * This,
        /* [annotation] */
        _In_  UINT ResourceTypeFlags,
        /* [annotation] */
        _In_  UINT Options);

    HRESULT ( STDMETHODCALLTYPE *SetShaderTrackingOptions )(
        ID3D11TracingDevice * This,
        /* [annotation] */
        _In_  IUnknown *pShader,
        /* [annotation] */
        _In_  UINT Options);

    END_INTERFACE
} ID3D11TracingDeviceVtbl;

// -----------------------------------------------------------------------------
// ID3D11RefTrackingOptions
// -----------------------------------------------------------------------------
typedef struct ID3D11RefTrackingOptionsVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11RefTrackingOptions * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11RefTrackingOptions * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11RefTrackingOptions * This);

    HRESULT ( STDMETHODCALLTYPE *SetTrackingOptions )(
        ID3D11RefTrackingOptions * This,
        UINT uOptions);

    END_INTERFACE
} ID3D11RefTrackingOptionsVtbl;

// -----------------------------------------------------------------------------
// ID3D11RefDefaultTrackingOptions
// -----------------------------------------------------------------------------
typedef struct ID3D11RefDefaultTrackingOptionsVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11RefDefaultTrackingOptions * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11RefDefaultTrackingOptions * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11RefDefaultTrackingOptions * This);

    HRESULT ( STDMETHODCALLTYPE *SetTrackingOptions )(
        ID3D11RefDefaultTrackingOptions * This,
        UINT ResourceTypeFlags,
        UINT Options);

    END_INTERFACE
} ID3D11RefDefaultTrackingOptionsVtbl;

// -----------------------------------------------------------------------------
// ID3D11InfoQueue
// -----------------------------------------------------------------------------
typedef struct ID3D11InfoQueueVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        ID3D11InfoQueue * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        ID3D11InfoQueue * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        ID3D11InfoQueue * This);

    HRESULT ( STDMETHODCALLTYPE *SetMessageCountLimit )(
        ID3D11InfoQueue * This,
        /* [annotation] */
        _In_  UINT64 MessageCountLimit);

    void ( STDMETHODCALLTYPE *ClearStoredMessages )(
        ID3D11InfoQueue * This);

    HRESULT ( STDMETHODCALLTYPE *GetMessage )(
        ID3D11InfoQueue * This,
        /* [annotation] */
        _In_  UINT64 MessageIndex,
        /* [annotation] */
        _Out_writes_bytes_opt_(*pMessageByteLength)  D3D11_MESSAGE *pMessage,
        /* [annotation] */
        _Inout_  SIZE_T *pMessageByteLength);

    UINT64 ( STDMETHODCALLTYPE *GetNumMessagesAllowedByStorageFilter )(
        ID3D11InfoQueue * This);

    UINT64 ( STDMETHODCALLTYPE *GetNumMessagesDeniedByStorageFilter )(
        ID3D11InfoQueue * This);

    UINT64 ( STDMETHODCALLTYPE *GetNumStoredMessages )(
        ID3D11InfoQueue * This);

    UINT64 ( STDMETHODCALLTYPE *GetNumStoredMessagesAllowedByRetrievalFilter )(
        ID3D11InfoQueue * This);

    UINT64 ( STDMETHODCALLTYPE *GetNumMessagesDiscardedByMessageCountLimit )(
        ID3D11InfoQueue * This);

    UINT64 ( STDMETHODCALLTYPE *GetMessageCountLimit )(
        ID3D11InfoQueue * This);

    HRESULT ( STDMETHODCALLTYPE *AddStorageFilterEntries )(
        ID3D11InfoQueue * This,
        /* [annotation] */
        _In_  D3D11_INFO_QUEUE_FILTER *pFilter);

    HRESULT ( STDMETHODCALLTYPE *GetStorageFilter )(
        ID3D11InfoQueue * This,
        /* [annotation] */
        _Out_writes_bytes_opt_(*pFilterByteLength)  D3D11_INFO_QUEUE_FILTER *pFilter,
        /* [annotation] */
        _Inout_  SIZE_T *pFilterByteLength);

    void ( STDMETHODCALLTYPE *ClearStorageFilter )(
        ID3D11InfoQueue * This);

    HRESULT ( STDMETHODCALLTYPE *PushEmptyStorageFilter )(
        ID3D11InfoQueue * This);

    HRESULT ( STDMETHODCALLTYPE *PushCopyOfStorageFilter )(
        ID3D11InfoQueue * This);

    HRESULT ( STDMETHODCALLTYPE *PushStorageFilter )(
        ID3D11InfoQueue * This,
        /* [annotation] */
        _In_  D3D11_INFO_QUEUE_FILTER *pFilter);

    void ( STDMETHODCALLTYPE *PopStorageFilter )(
        ID3D11InfoQueue * This);

    UINT ( STDMETHODCALLTYPE *GetStorageFilterStackSize )(
        ID3D11InfoQueue * This);

    HRESULT ( STDMETHODCALLTYPE *AddRetrievalFilterEntries )(
        ID3D11InfoQueue * This,
        /* [annotation] */
        _In_  D3D11_INFO_QUEUE_FILTER *pFilter);

    HRESULT ( STDMETHODCALLTYPE *GetRetrievalFilter )(
        ID3D11InfoQueue * This,
        /* [annotation] */
        _Out_writes_bytes_opt_(*pFilterByteLength)  D3D11_INFO_QUEUE_FILTER *pFilter,
        /* [annotation] */
        _Inout_  SIZE_T *pFilterByteLength);

    void ( STDMETHODCALLTYPE *ClearRetrievalFilter )(
        ID3D11InfoQueue * This);

    HRESULT ( STDMETHODCALLTYPE *PushEmptyRetrievalFilter )(
        ID3D11InfoQueue * This);

    HRESULT ( STDMETHODCALLTYPE *PushCopyOfRetrievalFilter )(
        ID3D11InfoQueue * This);

    HRESULT ( STDMETHODCALLTYPE *PushRetrievalFilter )(
        ID3D11InfoQueue * This,
        /* [annotation] */
        _In_  D3D11_INFO_QUEUE_FILTER *pFilter);

    void ( STDMETHODCALLTYPE *PopRetrievalFilter )(
        ID3D11InfoQueue * This);

    UINT ( STDMETHODCALLTYPE *GetRetrievalFilterStackSize )(
        ID3D11InfoQueue * This);

    HRESULT ( STDMETHODCALLTYPE *AddMessage )(
        ID3D11InfoQueue * This,
        /* [annotation] */
        _In_  D3D11_MESSAGE_CATEGORY Category,
        /* [annotation] */
        _In_  D3D11_MESSAGE_SEVERITY Severity,
        /* [annotation] */
        _In_  D3D11_MESSAGE_ID ID,
        /* [annotation] */
        _In_  LPCSTR pDescription);

    HRESULT ( STDMETHODCALLTYPE *AddApplicationMessage )(
        ID3D11InfoQueue * This,
        /* [annotation] */
        _In_  D3D11_MESSAGE_SEVERITY Severity,
        /* [annotation] */
        _In_  LPCSTR pDescription);

    HRESULT ( STDMETHODCALLTYPE *SetBreakOnCategory )(
        ID3D11InfoQueue * This,
        /* [annotation] */
        _In_  D3D11_MESSAGE_CATEGORY Category,
        /* [annotation] */
        _In_  BOOL bEnable);

    HRESULT ( STDMETHODCALLTYPE *SetBreakOnSeverity )(
        ID3D11InfoQueue * This,
        /* [annotation] */
        _In_  D3D11_MESSAGE_SEVERITY Severity,
        /* [annotation] */
        _In_  BOOL bEnable);

    HRESULT ( STDMETHODCALLTYPE *SetBreakOnID )(
        ID3D11InfoQueue * This,
        /* [annotation] */
        _In_  D3D11_MESSAGE_ID ID,
        /* [annotation] */
        _In_  BOOL bEnable);

    BOOL ( STDMETHODCALLTYPE *GetBreakOnCategory )(
        ID3D11InfoQueue * This,
        /* [annotation] */
        _In_  D3D11_MESSAGE_CATEGORY Category);

    BOOL ( STDMETHODCALLTYPE *GetBreakOnSeverity )(
        ID3D11InfoQueue * This,
        /* [annotation] */
        _In_  D3D11_MESSAGE_SEVERITY Severity);

    BOOL ( STDMETHODCALLTYPE *GetBreakOnID )(
        ID3D11InfoQueue * This,
        /* [annotation] */
        _In_  D3D11_MESSAGE_ID ID);

    void ( STDMETHODCALLTYPE *SetMuteDebugOutput )(
        ID3D11InfoQueue * This,
        /* [annotation] */
        _In_  BOOL bMute);

    BOOL ( STDMETHODCALLTYPE *GetMuteDebugOutput )(
        ID3D11InfoQueue * This);

    END_INTERFACE
} ID3D11InfoQueueVtbl;

// -----------------------------------------------------------------------------
// IDXGIObject
// -----------------------------------------------------------------------------
typedef struct IDXGIObjectVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        IDXGIObject * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        IDXGIObject * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        IDXGIObject * This);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        IDXGIObject * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [in] */ UINT DataSize,
        /* [annotation][in] */
        _In_reads_bytes_(DataSize)  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        IDXGIObject * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][in] */
        _In_  const IUnknown *pUnknown);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        IDXGIObject * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][out][in] */
        _Inout_  UINT *pDataSize,
        /* [annotation][out] */
        _Out_writes_bytes_(*pDataSize)  void *pData);

    HRESULT ( STDMETHODCALLTYPE *GetParent )(
        IDXGIObject * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppParent);

    END_INTERFACE
} IDXGIObjectVtbl;

// -----------------------------------------------------------------------------
// IDXGIDeviceSubObject
// -----------------------------------------------------------------------------
typedef struct IDXGIDeviceSubObjectVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        IDXGIDeviceSubObject * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        IDXGIDeviceSubObject * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        IDXGIDeviceSubObject * This);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        IDXGIDeviceSubObject * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [in] */ UINT DataSize,
        /* [annotation][in] */
        _In_reads_bytes_(DataSize)  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        IDXGIDeviceSubObject * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][in] */
        _In_  const IUnknown *pUnknown);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        IDXGIDeviceSubObject * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][out][in] */
        _Inout_  UINT *pDataSize,
        /* [annotation][out] */
        _Out_writes_bytes_(*pDataSize)  void *pData);

    HRESULT ( STDMETHODCALLTYPE *GetParent )(
        IDXGIDeviceSubObject * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppParent);

    HRESULT ( STDMETHODCALLTYPE *GetDevice )(
        IDXGIDeviceSubObject * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppDevice);

    END_INTERFACE
} IDXGIDeviceSubObjectVtbl;

// -----------------------------------------------------------------------------
// IDXGIResource
// -----------------------------------------------------------------------------
typedef struct IDXGIResourceVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        IDXGIResource * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        IDXGIResource * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        IDXGIResource * This);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        IDXGIResource * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [in] */ UINT DataSize,
        /* [annotation][in] */
        _In_reads_bytes_(DataSize)  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        IDXGIResource * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][in] */
        _In_  const IUnknown *pUnknown);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        IDXGIResource * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][out][in] */
        _Inout_  UINT *pDataSize,
        /* [annotation][out] */
        _Out_writes_bytes_(*pDataSize)  void *pData);

    HRESULT ( STDMETHODCALLTYPE *GetParent )(
        IDXGIResource * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppParent);

    HRESULT ( STDMETHODCALLTYPE *GetDevice )(
        IDXGIResource * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetSharedHandle )(
        IDXGIResource * This,
        /* [annotation][out] */
        _Out_  HANDLE *pSharedHandle);

    HRESULT ( STDMETHODCALLTYPE *GetUsage )(
        IDXGIResource * This,
        /* [annotation][out] */
        _Out_  DXGI_USAGE *pUsage);

    HRESULT ( STDMETHODCALLTYPE *SetEvictionPriority )(
        IDXGIResource * This,
        /* [in] */ UINT EvictionPriority);

    HRESULT ( STDMETHODCALLTYPE *GetEvictionPriority )(
        IDXGIResource * This,
        /* [annotation][retval][out] */
        _Out_  UINT *pEvictionPriority);

    END_INTERFACE
} IDXGIResourceVtbl;

// -----------------------------------------------------------------------------
// IDXGIKeyedMutex
// -----------------------------------------------------------------------------
typedef struct IDXGIKeyedMutexVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        IDXGIKeyedMutex * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        IDXGIKeyedMutex * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        IDXGIKeyedMutex * This);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        IDXGIKeyedMutex * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [in] */ UINT DataSize,
        /* [annotation][in] */
        _In_reads_bytes_(DataSize)  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        IDXGIKeyedMutex * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][in] */
        _In_  const IUnknown *pUnknown);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        IDXGIKeyedMutex * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][out][in] */
        _Inout_  UINT *pDataSize,
        /* [annotation][out] */
        _Out_writes_bytes_(*pDataSize)  void *pData);

    HRESULT ( STDMETHODCALLTYPE *GetParent )(
        IDXGIKeyedMutex * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppParent);

    HRESULT ( STDMETHODCALLTYPE *GetDevice )(
        IDXGIKeyedMutex * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *AcquireSync )(
        IDXGIKeyedMutex * This,
        /* [in] */ UINT64 Key,
        /* [in] */ DWORD dwMilliseconds);

    HRESULT ( STDMETHODCALLTYPE *ReleaseSync )(
        IDXGIKeyedMutex * This,
        /* [in] */ UINT64 Key);

    END_INTERFACE
} IDXGIKeyedMutexVtbl;

// -----------------------------------------------------------------------------
// IDXGISurface
// -----------------------------------------------------------------------------
typedef struct IDXGISurfaceVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        IDXGISurface * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        IDXGISurface * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        IDXGISurface * This);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        IDXGISurface * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [in] */ UINT DataSize,
        /* [annotation][in] */
        _In_reads_bytes_(DataSize)  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        IDXGISurface * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][in] */
        _In_  const IUnknown *pUnknown);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        IDXGISurface * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][out][in] */
        _Inout_  UINT *pDataSize,
        /* [annotation][out] */
        _Out_writes_bytes_(*pDataSize)  void *pData);

    HRESULT ( STDMETHODCALLTYPE *GetParent )(
        IDXGISurface * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppParent);

    HRESULT ( STDMETHODCALLTYPE *GetDevice )(
        IDXGISurface * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetDesc )(
        IDXGISurface * This,
        /* [annotation][out] */
        _Out_  DXGI_SURFACE_DESC *pDesc);

    HRESULT ( STDMETHODCALLTYPE *Map )(
        IDXGISurface * This,
        /* [annotation][out] */
        _Out_  DXGI_MAPPED_RECT *pLockedRect,
        /* [in] */ UINT MapFlags);

    HRESULT ( STDMETHODCALLTYPE *Unmap )(
        IDXGISurface * This);

    END_INTERFACE
} IDXGISurfaceVtbl;

// -----------------------------------------------------------------------------
// IDXGISurface1
// -----------------------------------------------------------------------------
typedef struct IDXGISurface1Vtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        IDXGISurface1 * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        IDXGISurface1 * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        IDXGISurface1 * This);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        IDXGISurface1 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [in] */ UINT DataSize,
        /* [annotation][in] */
        _In_reads_bytes_(DataSize)  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        IDXGISurface1 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][in] */
        _In_  const IUnknown *pUnknown);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        IDXGISurface1 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][out][in] */
        _Inout_  UINT *pDataSize,
        /* [annotation][out] */
        _Out_writes_bytes_(*pDataSize)  void *pData);

    HRESULT ( STDMETHODCALLTYPE *GetParent )(
        IDXGISurface1 * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppParent);

    HRESULT ( STDMETHODCALLTYPE *GetDevice )(
        IDXGISurface1 * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetDesc )(
        IDXGISurface1 * This,
        /* [annotation][out] */
        _Out_  DXGI_SURFACE_DESC *pDesc);

    HRESULT ( STDMETHODCALLTYPE *Map )(
        IDXGISurface1 * This,
        /* [annotation][out] */
        _Out_  DXGI_MAPPED_RECT *pLockedRect,
        /* [in] */ UINT MapFlags);

    HRESULT ( STDMETHODCALLTYPE *Unmap )(
        IDXGISurface1 * This);

    HRESULT ( STDMETHODCALLTYPE *GetDC )(
        IDXGISurface1 * This,
        /* [in] */ BOOL Discard,
        /* [annotation][out] */
        _Out_  HDC *phdc);

    HRESULT ( STDMETHODCALLTYPE *ReleaseDC )(
        IDXGISurface1 * This,
        /* [annotation][in] */
        _In_opt_  RECT *pDirtyRect);

    END_INTERFACE
} IDXGISurface1Vtbl;

// -----------------------------------------------------------------------------
// IDXGIAdapter
// -----------------------------------------------------------------------------
typedef struct IDXGIAdapterVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        IDXGIAdapter * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        IDXGIAdapter * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        IDXGIAdapter * This);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        IDXGIAdapter * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [in] */ UINT DataSize,
        /* [annotation][in] */
        _In_reads_bytes_(DataSize)  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        IDXGIAdapter * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][in] */
        _In_  const IUnknown *pUnknown);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        IDXGIAdapter * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][out][in] */
        _Inout_  UINT *pDataSize,
        /* [annotation][out] */
        _Out_writes_bytes_(*pDataSize)  void *pData);

    HRESULT ( STDMETHODCALLTYPE *GetParent )(
        IDXGIAdapter * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppParent);

    HRESULT ( STDMETHODCALLTYPE *EnumOutputs )(
        IDXGIAdapter * This,
        /* [in] */ UINT Output,
        /* [annotation][out][in] */
        _Out_  IDXGIOutput **ppOutput);

    HRESULT ( STDMETHODCALLTYPE *GetDesc )(
        IDXGIAdapter * This,
        /* [annotation][out] */
        _Out_  DXGI_ADAPTER_DESC *pDesc);

    HRESULT ( STDMETHODCALLTYPE *CheckInterfaceSupport )(
        IDXGIAdapter * This,
        /* [annotation][in] */
        _In_  REFGUID InterfaceName,
        /* [annotation][out] */
        _Out_  LARGE_INTEGER *pUMDVersion);

    END_INTERFACE
} IDXGIAdapterVtbl;

// -----------------------------------------------------------------------------
// IDXGIOutput
// -----------------------------------------------------------------------------
typedef struct IDXGIOutputVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        IDXGIOutput * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        IDXGIOutput * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        IDXGIOutput * This);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        IDXGIOutput * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [in] */ UINT DataSize,
        /* [annotation][in] */
        _In_reads_bytes_(DataSize)  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        IDXGIOutput * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][in] */
        _In_  const IUnknown *pUnknown);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        IDXGIOutput * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][out][in] */
        _Inout_  UINT *pDataSize,
        /* [annotation][out] */
        _Out_writes_bytes_(*pDataSize)  void *pData);

    HRESULT ( STDMETHODCALLTYPE *GetParent )(
        IDXGIOutput * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppParent);

    HRESULT ( STDMETHODCALLTYPE *GetDesc )(
        IDXGIOutput * This,
        /* [annotation][out] */
        _Out_  DXGI_OUTPUT_DESC *pDesc);

    HRESULT ( STDMETHODCALLTYPE *GetDisplayModeList )(
        IDXGIOutput * This,
        /* [in] */ DXGI_FORMAT EnumFormat,
        /* [in] */ UINT Flags,
        /* [annotation][out][in] */
        _Inout_  UINT *pNumModes,
        /* [annotation][out] */
        _Out_writes_to_opt_(*pNumModes,*pNumModes)  DXGI_MODE_DESC *pDesc);

    HRESULT ( STDMETHODCALLTYPE *FindClosestMatchingMode )(
        IDXGIOutput * This,
        /* [annotation][in] */
        _In_  const DXGI_MODE_DESC *pModeToMatch,
        /* [annotation][out] */
        _Out_  DXGI_MODE_DESC *pClosestMatch,
        /* [annotation][in] */
        _In_opt_  IUnknown *pConcernedDevice);

    HRESULT ( STDMETHODCALLTYPE *WaitForVBlank )(
        IDXGIOutput * This);

    HRESULT ( STDMETHODCALLTYPE *TakeOwnership )(
        IDXGIOutput * This,
        /* [annotation][in] */
        _In_  IUnknown *pDevice,
        BOOL Exclusive);

    void ( STDMETHODCALLTYPE *ReleaseOwnership )(
        IDXGIOutput * This);

    HRESULT ( STDMETHODCALLTYPE *GetGammaControlCapabilities )(
        IDXGIOutput * This,
        /* [annotation][out] */
        _Out_  DXGI_GAMMA_CONTROL_CAPABILITIES *pGammaCaps);

    HRESULT ( STDMETHODCALLTYPE *SetGammaControl )(
        IDXGIOutput * This,
        /* [annotation][in] */
        _In_  const DXGI_GAMMA_CONTROL *pArray);

    HRESULT ( STDMETHODCALLTYPE *GetGammaControl )(
        IDXGIOutput * This,
        /* [annotation][out] */
        _Out_  DXGI_GAMMA_CONTROL *pArray);

    HRESULT ( STDMETHODCALLTYPE *SetDisplaySurface )(
        IDXGIOutput * This,
        /* [annotation][in] */
        _In_  IDXGISurface *pScanoutSurface);

    HRESULT ( STDMETHODCALLTYPE *GetDisplaySurfaceData )(
        IDXGIOutput * This,
        /* [annotation][in] */
        _In_  IDXGISurface *pDestination);

    HRESULT ( STDMETHODCALLTYPE *GetFrameStatistics )(
        IDXGIOutput * This,
        /* [annotation][out] */
        _Out_  DXGI_FRAME_STATISTICS *pStats);

    END_INTERFACE
} IDXGIOutputVtbl;

// -----------------------------------------------------------------------------
// IDXGISwapChain
// -----------------------------------------------------------------------------
typedef struct IDXGISwapChainVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        IDXGISwapChain * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        IDXGISwapChain * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        IDXGISwapChain * This);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        IDXGISwapChain * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [in] */ UINT DataSize,
        /* [annotation][in] */
        _In_reads_bytes_(DataSize)  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        IDXGISwapChain * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][in] */
        _In_  const IUnknown *pUnknown);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        IDXGISwapChain * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][out][in] */
        _Inout_  UINT *pDataSize,
        /* [annotation][out] */
        _Out_writes_bytes_(*pDataSize)  void *pData);

    HRESULT ( STDMETHODCALLTYPE *GetParent )(
        IDXGISwapChain * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppParent);

    HRESULT ( STDMETHODCALLTYPE *GetDevice )(
        IDXGISwapChain * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *Present )(
        IDXGISwapChain * This,
        /* [in] */ UINT SyncInterval,
        /* [in] */ UINT Flags);

    HRESULT ( STDMETHODCALLTYPE *GetBuffer )(
        IDXGISwapChain * This,
        /* [in] */ UINT Buffer,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][out][in] */
        _Out_  void **ppSurface);

    HRESULT ( STDMETHODCALLTYPE *SetFullscreenState )(
        IDXGISwapChain * This,
        /* [in] */ BOOL Fullscreen,
        /* [annotation][in] */
        _In_opt_  IDXGIOutput *pTarget);

    HRESULT ( STDMETHODCALLTYPE *GetFullscreenState )(
        IDXGISwapChain * This,
        /* [annotation][out] */
        _Out_opt_  BOOL *pFullscreen,
        /* [annotation][out] */
        _Out_opt_  IDXGIOutput **ppTarget);

    HRESULT ( STDMETHODCALLTYPE *GetDesc )(
        IDXGISwapChain * This,
        /* [annotation][out] */
        _Out_  DXGI_SWAP_CHAIN_DESC *pDesc);

    HRESULT ( STDMETHODCALLTYPE *ResizeBuffers )(
        IDXGISwapChain * This,
        /* [in] */ UINT BufferCount,
        /* [in] */ UINT Width,
        /* [in] */ UINT Height,
        /* [in] */ DXGI_FORMAT NewFormat,
        /* [in] */ UINT SwapChainFlags);

    HRESULT ( STDMETHODCALLTYPE *ResizeTarget )(
        IDXGISwapChain * This,
        /* [annotation][in] */
        _In_  const DXGI_MODE_DESC *pNewTargetParameters);

    HRESULT ( STDMETHODCALLTYPE *GetContainingOutput )(
        IDXGISwapChain * This,
        /* [annotation][out] */
        _Out_  IDXGIOutput **ppOutput);

    HRESULT ( STDMETHODCALLTYPE *GetFrameStatistics )(
        IDXGISwapChain * This,
        /* [annotation][out] */
        _Out_  DXGI_FRAME_STATISTICS *pStats);

    HRESULT ( STDMETHODCALLTYPE *GetLastPresentCount )(
        IDXGISwapChain * This,
        /* [annotation][out] */
        _Out_  UINT *pLastPresentCount);

    END_INTERFACE
} IDXGISwapChainVtbl;

// -----------------------------------------------------------------------------
// IDXGIFactory
// -----------------------------------------------------------------------------
typedef struct IDXGIFactoryVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        IDXGIFactory * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        IDXGIFactory * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        IDXGIFactory * This);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        IDXGIFactory * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [in] */ UINT DataSize,
        /* [annotation][in] */
        _In_reads_bytes_(DataSize)  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        IDXGIFactory * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][in] */
        _In_  const IUnknown *pUnknown);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        IDXGIFactory * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][out][in] */
        _Inout_  UINT *pDataSize,
        /* [annotation][out] */
        _Out_writes_bytes_(*pDataSize)  void *pData);

    HRESULT ( STDMETHODCALLTYPE *GetParent )(
        IDXGIFactory * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppParent);

    HRESULT ( STDMETHODCALLTYPE *EnumAdapters )(
        IDXGIFactory * This,
        /* [in] */ UINT Adapter,
        /* [annotation][out] */
        _Out_  IDXGIAdapter **ppAdapter);

    HRESULT ( STDMETHODCALLTYPE *MakeWindowAssociation )(
        IDXGIFactory * This,
        HWND WindowHandle,
        UINT Flags);

    HRESULT ( STDMETHODCALLTYPE *GetWindowAssociation )(
        IDXGIFactory * This,
        /* [annotation][out] */
        _Out_  HWND *pWindowHandle);

    HRESULT ( STDMETHODCALLTYPE *CreateSwapChain )(
        IDXGIFactory * This,
        /* [annotation][in] */
        _In_  IUnknown *pDevice,
        /* [annotation][in] */
        _In_  DXGI_SWAP_CHAIN_DESC *pDesc,
        /* [annotation][out] */
        _Out_  IDXGISwapChain **ppSwapChain);

    HRESULT ( STDMETHODCALLTYPE *CreateSoftwareAdapter )(
        IDXGIFactory * This,
        /* [in] */ HMODULE Module,
        /* [annotation][out] */
        _Out_  IDXGIAdapter **ppAdapter);

    END_INTERFACE
} IDXGIFactoryVtbl;

// -----------------------------------------------------------------------------
// IDXGIDevice
// -----------------------------------------------------------------------------
typedef struct IDXGIDeviceVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        IDXGIDevice * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        IDXGIDevice * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        IDXGIDevice * This);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        IDXGIDevice * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [in] */ UINT DataSize,
        /* [annotation][in] */
        _In_reads_bytes_(DataSize)  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        IDXGIDevice * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][in] */
        _In_  const IUnknown *pUnknown);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        IDXGIDevice * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][out][in] */
        _Inout_  UINT *pDataSize,
        /* [annotation][out] */
        _Out_writes_bytes_(*pDataSize)  void *pData);

    HRESULT ( STDMETHODCALLTYPE *GetParent )(
        IDXGIDevice * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppParent);

    HRESULT ( STDMETHODCALLTYPE *GetAdapter )(
        IDXGIDevice * This,
        /* [annotation][out] */
        _Out_  IDXGIAdapter **pAdapter);

    HRESULT ( STDMETHODCALLTYPE *CreateSurface )(
        IDXGIDevice * This,
        /* [annotation][in] */
        _In_  const DXGI_SURFACE_DESC *pDesc,
        /* [in] */ UINT NumSurfaces,
        /* [in] */ DXGI_USAGE Usage,
        /* [annotation][in] */
        _In_opt_  const DXGI_SHARED_RESOURCE *pSharedResource,
        /* [annotation][out] */
        _Out_  IDXGISurface **ppSurface);

    HRESULT ( STDMETHODCALLTYPE *QueryResourceResidency )(
        IDXGIDevice * This,
        /* [annotation][size_is][in] */
        _In_reads_(NumResources)  IUnknown *const *ppResources,
        /* [annotation][size_is][out] */
        _Out_writes_(NumResources)  DXGI_RESIDENCY *pResidencyStatus,
        /* [in] */ UINT NumResources);

    HRESULT ( STDMETHODCALLTYPE *SetGPUThreadPriority )(
        IDXGIDevice * This,
        /* [in] */ INT Priority);

    HRESULT ( STDMETHODCALLTYPE *GetGPUThreadPriority )(
        IDXGIDevice * This,
        /* [annotation][retval][out] */
        _Out_  INT *pPriority);

    END_INTERFACE
} IDXGIDeviceVtbl;

// -----------------------------------------------------------------------------
// IDXGIFactory1
// -----------------------------------------------------------------------------
typedef struct IDXGIFactory1Vtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        IDXGIFactory1 * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        IDXGIFactory1 * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        IDXGIFactory1 * This);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        IDXGIFactory1 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [in] */ UINT DataSize,
        /* [annotation][in] */
        _In_reads_bytes_(DataSize)  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        IDXGIFactory1 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][in] */
        _In_  const IUnknown *pUnknown);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        IDXGIFactory1 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][out][in] */
        _Inout_  UINT *pDataSize,
        /* [annotation][out] */
        _Out_writes_bytes_(*pDataSize)  void *pData);

    HRESULT ( STDMETHODCALLTYPE *GetParent )(
        IDXGIFactory1 * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppParent);

    HRESULT ( STDMETHODCALLTYPE *EnumAdapters )(
        IDXGIFactory1 * This,
        /* [in] */ UINT Adapter,
        /* [annotation][out] */
        _Out_  IDXGIAdapter **ppAdapter);

    HRESULT ( STDMETHODCALLTYPE *MakeWindowAssociation )(
        IDXGIFactory1 * This,
        HWND WindowHandle,
        UINT Flags);

    HRESULT ( STDMETHODCALLTYPE *GetWindowAssociation )(
        IDXGIFactory1 * This,
        /* [annotation][out] */
        _Out_  HWND *pWindowHandle);

    HRESULT ( STDMETHODCALLTYPE *CreateSwapChain )(
        IDXGIFactory1 * This,
        /* [annotation][in] */
        _In_  IUnknown *pDevice,
        /* [annotation][in] */
        _In_  DXGI_SWAP_CHAIN_DESC *pDesc,
        /* [annotation][out] */
        _Out_  IDXGISwapChain **ppSwapChain);

    HRESULT ( STDMETHODCALLTYPE *CreateSoftwareAdapter )(
        IDXGIFactory1 * This,
        /* [in] */ HMODULE Module,
        /* [annotation][out] */
        _Out_  IDXGIAdapter **ppAdapter);

    HRESULT ( STDMETHODCALLTYPE *EnumAdapters1 )(
        IDXGIFactory1 * This,
        /* [in] */ UINT Adapter,
        /* [annotation][out] */
        _Out_  IDXGIAdapter1 **ppAdapter);

    BOOL ( STDMETHODCALLTYPE *IsCurrent )(
        IDXGIFactory1 * This);

    END_INTERFACE
} IDXGIFactory1Vtbl;

// -----------------------------------------------------------------------------
// IDXGIAdapter1
// -----------------------------------------------------------------------------
typedef struct IDXGIAdapter1Vtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        IDXGIAdapter1 * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        IDXGIAdapter1 * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        IDXGIAdapter1 * This);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        IDXGIAdapter1 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [in] */ UINT DataSize,
        /* [annotation][in] */
        _In_reads_bytes_(DataSize)  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        IDXGIAdapter1 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][in] */
        _In_  const IUnknown *pUnknown);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        IDXGIAdapter1 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][out][in] */
        _Inout_  UINT *pDataSize,
        /* [annotation][out] */
        _Out_writes_bytes_(*pDataSize)  void *pData);

    HRESULT ( STDMETHODCALLTYPE *GetParent )(
        IDXGIAdapter1 * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppParent);

    HRESULT ( STDMETHODCALLTYPE *EnumOutputs )(
        IDXGIAdapter1 * This,
        /* [in] */ UINT Output,
        /* [annotation][out][in] */
        _Out_  IDXGIOutput **ppOutput);

    HRESULT ( STDMETHODCALLTYPE *GetDesc )(
        IDXGIAdapter1 * This,
        /* [annotation][out] */
        _Out_  DXGI_ADAPTER_DESC *pDesc);

    HRESULT ( STDMETHODCALLTYPE *CheckInterfaceSupport )(
        IDXGIAdapter1 * This,
        /* [annotation][in] */
        _In_  REFGUID InterfaceName,
        /* [annotation][out] */
        _Out_  LARGE_INTEGER *pUMDVersion);

    HRESULT ( STDMETHODCALLTYPE *GetDesc1 )(
        IDXGIAdapter1 * This,
        /* [annotation][out] */
        _Out_  DXGI_ADAPTER_DESC1 *pDesc);

    END_INTERFACE
} IDXGIAdapter1Vtbl;

// -----------------------------------------------------------------------------
// IDXGIDevice1
// -----------------------------------------------------------------------------
typedef struct IDXGIDevice1Vtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        IDXGIDevice1 * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        IDXGIDevice1 * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        IDXGIDevice1 * This);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        IDXGIDevice1 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [in] */ UINT DataSize,
        /* [annotation][in] */
        _In_reads_bytes_(DataSize)  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        IDXGIDevice1 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][in] */
        _In_  const IUnknown *pUnknown);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        IDXGIDevice1 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][out][in] */
        _Inout_  UINT *pDataSize,
        /* [annotation][out] */
        _Out_writes_bytes_(*pDataSize)  void *pData);

    HRESULT ( STDMETHODCALLTYPE *GetParent )(
        IDXGIDevice1 * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppParent);

    HRESULT ( STDMETHODCALLTYPE *GetAdapter )(
        IDXGIDevice1 * This,
        /* [annotation][out] */
        _Out_  IDXGIAdapter **pAdapter);

    HRESULT ( STDMETHODCALLTYPE *CreateSurface )(
        IDXGIDevice1 * This,
        /* [annotation][in] */
        _In_  const DXGI_SURFACE_DESC *pDesc,
        /* [in] */ UINT NumSurfaces,
        /* [in] */ DXGI_USAGE Usage,
        /* [annotation][in] */
        _In_opt_  const DXGI_SHARED_RESOURCE *pSharedResource,
        /* [annotation][out] */
        _Out_  IDXGISurface **ppSurface);

    HRESULT ( STDMETHODCALLTYPE *QueryResourceResidency )(
        IDXGIDevice1 * This,
        /* [annotation][size_is][in] */
        _In_reads_(NumResources)  IUnknown *const *ppResources,
        /* [annotation][size_is][out] */
        _Out_writes_(NumResources)  DXGI_RESIDENCY *pResidencyStatus,
        /* [in] */ UINT NumResources);

    HRESULT ( STDMETHODCALLTYPE *SetGPUThreadPriority )(
        IDXGIDevice1 * This,
        /* [in] */ INT Priority);

    HRESULT ( STDMETHODCALLTYPE *GetGPUThreadPriority )(
        IDXGIDevice1 * This,
        /* [annotation][retval][out] */
        _Out_  INT *pPriority);

    HRESULT ( STDMETHODCALLTYPE *SetMaximumFrameLatency )(
        IDXGIDevice1 * This,
        /* [in] */ UINT MaxLatency);

    HRESULT ( STDMETHODCALLTYPE *GetMaximumFrameLatency )(
        IDXGIDevice1 * This,
        /* [annotation][out] */
        _Out_  UINT *pMaxLatency);

    END_INTERFACE
} IDXGIDevice1Vtbl;

// -----------------------------------------------------------------------------
// IDXGIDisplayControl
// -----------------------------------------------------------------------------
typedef struct IDXGIDisplayControlVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        IDXGIDisplayControl * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        IDXGIDisplayControl * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        IDXGIDisplayControl * This);

    BOOL ( STDMETHODCALLTYPE *IsStereoEnabled )(
        IDXGIDisplayControl * This);

    void ( STDMETHODCALLTYPE *SetStereoEnabled )(
        IDXGIDisplayControl * This,
        BOOL enabled);

    END_INTERFACE
} IDXGIDisplayControlVtbl;

// -----------------------------------------------------------------------------
// IDXGIOutputDuplication
// -----------------------------------------------------------------------------
typedef struct IDXGIOutputDuplicationVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        IDXGIOutputDuplication * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        IDXGIOutputDuplication * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        IDXGIOutputDuplication * This);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        IDXGIOutputDuplication * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [in] */ UINT DataSize,
        /* [annotation][in] */
        _In_reads_bytes_(DataSize)  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        IDXGIOutputDuplication * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][in] */
        _In_  const IUnknown *pUnknown);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        IDXGIOutputDuplication * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][out][in] */
        _Inout_  UINT *pDataSize,
        /* [annotation][out] */
        _Out_writes_bytes_(*pDataSize)  void *pData);

    HRESULT ( STDMETHODCALLTYPE *GetParent )(
        IDXGIOutputDuplication * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppParent);

    void ( STDMETHODCALLTYPE *GetDesc )(
        IDXGIOutputDuplication * This,
        /* [annotation][out] */
        _Out_  DXGI_OUTDUPL_DESC *pDesc);

    HRESULT ( STDMETHODCALLTYPE *AcquireNextFrame )(
        IDXGIOutputDuplication * This,
        /* [annotation][in] */
        _In_  UINT TimeoutInMilliseconds,
        /* [annotation][out] */
        _Out_  DXGI_OUTDUPL_FRAME_INFO *pFrameInfo,
        /* [annotation][out] */
        _Out_  IDXGIResource **ppDesktopResource);

    HRESULT ( STDMETHODCALLTYPE *GetFrameDirtyRects )(
        IDXGIOutputDuplication * This,
        /* [annotation][in] */
        _In_  UINT DirtyRectsBufferSize,
        /* [annotation][out] */
        _Out_writes_bytes_to_(DirtyRectsBufferSize, *pDirtyRectsBufferSizeRequired)  RECT *pDirtyRectsBuffer,
        /* [annotation][out] */
        _Out_  UINT *pDirtyRectsBufferSizeRequired);

    HRESULT ( STDMETHODCALLTYPE *GetFrameMoveRects )(
        IDXGIOutputDuplication * This,
        /* [annotation][in] */
        _In_  UINT MoveRectsBufferSize,
        /* [annotation][out] */
        _Out_writes_bytes_to_(MoveRectsBufferSize, *pMoveRectsBufferSizeRequired)  DXGI_OUTDUPL_MOVE_RECT *pMoveRectBuffer,
        /* [annotation][out] */
        _Out_  UINT *pMoveRectsBufferSizeRequired);

    HRESULT ( STDMETHODCALLTYPE *GetFramePointerShape )(
        IDXGIOutputDuplication * This,
        /* [annotation][in] */
        _In_  UINT PointerShapeBufferSize,
        /* [annotation][out] */
        _Out_writes_bytes_to_(PointerShapeBufferSize, *pPointerShapeBufferSizeRequired)  void *pPointerShapeBuffer,
        /* [annotation][out] */
        _Out_  UINT *pPointerShapeBufferSizeRequired,
        /* [annotation][out] */
        _Out_  DXGI_OUTDUPL_POINTER_SHAPE_INFO *pPointerShapeInfo);

    HRESULT ( STDMETHODCALLTYPE *MapDesktopSurface )(
        IDXGIOutputDuplication * This,
        /* [annotation][out] */
        _Out_  DXGI_MAPPED_RECT *pLockedRect);

    HRESULT ( STDMETHODCALLTYPE *UnMapDesktopSurface )(
        IDXGIOutputDuplication * This);

    HRESULT ( STDMETHODCALLTYPE *ReleaseFrame )(
        IDXGIOutputDuplication * This);

    END_INTERFACE
} IDXGIOutputDuplicationVtbl;

// -----------------------------------------------------------------------------
// IDXGISurface2
// -----------------------------------------------------------------------------
typedef struct IDXGISurface2Vtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        IDXGISurface2 * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        IDXGISurface2 * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        IDXGISurface2 * This);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        IDXGISurface2 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [in] */ UINT DataSize,
        /* [annotation][in] */
        _In_reads_bytes_(DataSize)  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        IDXGISurface2 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][in] */
        _In_  const IUnknown *pUnknown);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        IDXGISurface2 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][out][in] */
        _Inout_  UINT *pDataSize,
        /* [annotation][out] */
        _Out_writes_bytes_(*pDataSize)  void *pData);

    HRESULT ( STDMETHODCALLTYPE *GetParent )(
        IDXGISurface2 * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppParent);

    HRESULT ( STDMETHODCALLTYPE *GetDevice )(
        IDXGISurface2 * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetDesc )(
        IDXGISurface2 * This,
        /* [annotation][out] */
        _Out_  DXGI_SURFACE_DESC *pDesc);

    HRESULT ( STDMETHODCALLTYPE *Map )(
        IDXGISurface2 * This,
        /* [annotation][out] */
        _Out_  DXGI_MAPPED_RECT *pLockedRect,
        /* [in] */ UINT MapFlags);

    HRESULT ( STDMETHODCALLTYPE *Unmap )(
        IDXGISurface2 * This);

    HRESULT ( STDMETHODCALLTYPE *GetDC )(
        IDXGISurface2 * This,
        /* [in] */ BOOL Discard,
        /* [annotation][out] */
        _Out_  HDC *phdc);

    HRESULT ( STDMETHODCALLTYPE *ReleaseDC )(
        IDXGISurface2 * This,
        /* [annotation][in] */
        _In_opt_  RECT *pDirtyRect);

    HRESULT ( STDMETHODCALLTYPE *GetResource )(
        IDXGISurface2 * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][out] */
        _Out_  void **ppParentResource,
        /* [annotation][out] */
        _Out_  UINT *pSubresourceIndex);

    END_INTERFACE
} IDXGISurface2Vtbl;

// -----------------------------------------------------------------------------
// IDXGIResource1
// -----------------------------------------------------------------------------
typedef struct IDXGIResource1Vtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        IDXGIResource1 * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        IDXGIResource1 * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        IDXGIResource1 * This);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        IDXGIResource1 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [in] */ UINT DataSize,
        /* [annotation][in] */
        _In_reads_bytes_(DataSize)  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        IDXGIResource1 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][in] */
        _In_  const IUnknown *pUnknown);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        IDXGIResource1 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][out][in] */
        _Inout_  UINT *pDataSize,
        /* [annotation][out] */
        _Out_writes_bytes_(*pDataSize)  void *pData);

    HRESULT ( STDMETHODCALLTYPE *GetParent )(
        IDXGIResource1 * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppParent);

    HRESULT ( STDMETHODCALLTYPE *GetDevice )(
        IDXGIResource1 * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *GetSharedHandle )(
        IDXGIResource1 * This,
        /* [annotation][out] */
        _Out_  HANDLE *pSharedHandle);

    HRESULT ( STDMETHODCALLTYPE *GetUsage )(
        IDXGIResource1 * This,
        /* [annotation][out] */
        _Out_  DXGI_USAGE *pUsage);

    HRESULT ( STDMETHODCALLTYPE *SetEvictionPriority )(
        IDXGIResource1 * This,
        /* [in] */ UINT EvictionPriority);

    HRESULT ( STDMETHODCALLTYPE *GetEvictionPriority )(
        IDXGIResource1 * This,
        /* [annotation][retval][out] */
        _Out_  UINT *pEvictionPriority);

    HRESULT ( STDMETHODCALLTYPE *CreateSubresourceSurface )(
        IDXGIResource1 * This,
        UINT index,
        /* [annotation][out] */
        _Out_  IDXGISurface2 **ppSurface);

    HRESULT ( STDMETHODCALLTYPE *CreateSharedHandle )(
        IDXGIResource1 * This,
        /* [annotation][in] */
        _In_opt_  const SECURITY_ATTRIBUTES *pAttributes,
        /* [annotation][in] */
        _In_  DWORD dwAccess,
        /* [annotation][in] */
        _In_opt_  LPCWSTR lpName,
        /* [annotation][out] */
        _Out_  HANDLE *pHandle);

    END_INTERFACE
} IDXGIResource1Vtbl;

// -----------------------------------------------------------------------------
// IDXGIDevice2
// -----------------------------------------------------------------------------
typedef struct IDXGIDevice2Vtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        IDXGIDevice2 * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        IDXGIDevice2 * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        IDXGIDevice2 * This);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        IDXGIDevice2 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [in] */ UINT DataSize,
        /* [annotation][in] */
        _In_reads_bytes_(DataSize)  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        IDXGIDevice2 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][in] */
        _In_  const IUnknown *pUnknown);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        IDXGIDevice2 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][out][in] */
        _Inout_  UINT *pDataSize,
        /* [annotation][out] */
        _Out_writes_bytes_(*pDataSize)  void *pData);

    HRESULT ( STDMETHODCALLTYPE *GetParent )(
        IDXGIDevice2 * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppParent);

    HRESULT ( STDMETHODCALLTYPE *GetAdapter )(
        IDXGIDevice2 * This,
        /* [annotation][out] */
        _Out_  IDXGIAdapter **pAdapter);

    HRESULT ( STDMETHODCALLTYPE *CreateSurface )(
        IDXGIDevice2 * This,
        /* [annotation][in] */
        _In_  const DXGI_SURFACE_DESC *pDesc,
        /* [in] */ UINT NumSurfaces,
        /* [in] */ DXGI_USAGE Usage,
        /* [annotation][in] */
        _In_opt_  const DXGI_SHARED_RESOURCE *pSharedResource,
        /* [annotation][out] */
        _Out_  IDXGISurface **ppSurface);

    HRESULT ( STDMETHODCALLTYPE *QueryResourceResidency )(
        IDXGIDevice2 * This,
        /* [annotation][size_is][in] */
        _In_reads_(NumResources)  IUnknown *const *ppResources,
        /* [annotation][size_is][out] */
        _Out_writes_(NumResources)  DXGI_RESIDENCY *pResidencyStatus,
        /* [in] */ UINT NumResources);

    HRESULT ( STDMETHODCALLTYPE *SetGPUThreadPriority )(
        IDXGIDevice2 * This,
        /* [in] */ INT Priority);

    HRESULT ( STDMETHODCALLTYPE *GetGPUThreadPriority )(
        IDXGIDevice2 * This,
        /* [annotation][retval][out] */
        _Out_  INT *pPriority);

    HRESULT ( STDMETHODCALLTYPE *SetMaximumFrameLatency )(
        IDXGIDevice2 * This,
        /* [in] */ UINT MaxLatency);

    HRESULT ( STDMETHODCALLTYPE *GetMaximumFrameLatency )(
        IDXGIDevice2 * This,
        /* [annotation][out] */
        _Out_  UINT *pMaxLatency);

    HRESULT ( STDMETHODCALLTYPE *OfferResources )(
        IDXGIDevice2 * This,
        /* [annotation][in] */
        _In_  UINT NumResources,
        /* [annotation][size_is][in] */
        _In_reads_(NumResources)  IDXGIResource *const *ppResources,
        /* [annotation][in] */
        _In_  DXGI_OFFER_RESOURCE_PRIORITY Priority);

    HRESULT ( STDMETHODCALLTYPE *ReclaimResources )(
        IDXGIDevice2 * This,
        /* [annotation][in] */
        _In_  UINT NumResources,
        /* [annotation][size_is][in] */
        _In_reads_(NumResources)  IDXGIResource *const *ppResources,
        /* [annotation][size_is][out] */
        _Out_writes_all_opt_(NumResources)  BOOL *pDiscarded);

    HRESULT ( STDMETHODCALLTYPE *EnqueueSetEvent )(
        IDXGIDevice2 * This,
        /* [annotation][in] */
        _In_  HANDLE hEvent);

    END_INTERFACE
} IDXGIDevice2Vtbl;

// -----------------------------------------------------------------------------
// IDXGISwapChain1
// -----------------------------------------------------------------------------
typedef struct IDXGISwapChain1Vtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        IDXGISwapChain1 * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        IDXGISwapChain1 * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        IDXGISwapChain1 * This);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        IDXGISwapChain1 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [in] */ UINT DataSize,
        /* [annotation][in] */
        _In_reads_bytes_(DataSize)  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        IDXGISwapChain1 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][in] */
        _In_  const IUnknown *pUnknown);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        IDXGISwapChain1 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][out][in] */
        _Inout_  UINT *pDataSize,
        /* [annotation][out] */
        _Out_writes_bytes_(*pDataSize)  void *pData);

    HRESULT ( STDMETHODCALLTYPE *GetParent )(
        IDXGISwapChain1 * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppParent);

    HRESULT ( STDMETHODCALLTYPE *GetDevice )(
        IDXGISwapChain1 * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppDevice);

    HRESULT ( STDMETHODCALLTYPE *Present )(
        IDXGISwapChain1 * This,
        /* [in] */ UINT SyncInterval,
        /* [in] */ UINT Flags);

    HRESULT ( STDMETHODCALLTYPE *GetBuffer )(
        IDXGISwapChain1 * This,
        /* [in] */ UINT Buffer,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][out][in] */
        _Out_  void **ppSurface);

    HRESULT ( STDMETHODCALLTYPE *SetFullscreenState )(
        IDXGISwapChain1 * This,
        /* [in] */ BOOL Fullscreen,
        /* [annotation][in] */
        _In_opt_  IDXGIOutput *pTarget);

    HRESULT ( STDMETHODCALLTYPE *GetFullscreenState )(
        IDXGISwapChain1 * This,
        /* [annotation][out] */
        _Out_opt_  BOOL *pFullscreen,
        /* [annotation][out] */
        _Out_opt_  IDXGIOutput **ppTarget);

    HRESULT ( STDMETHODCALLTYPE *GetDesc )(
        IDXGISwapChain1 * This,
        /* [annotation][out] */
        _Out_  DXGI_SWAP_CHAIN_DESC *pDesc);

    HRESULT ( STDMETHODCALLTYPE *ResizeBuffers )(
        IDXGISwapChain1 * This,
        /* [in] */ UINT BufferCount,
        /* [in] */ UINT Width,
        /* [in] */ UINT Height,
        /* [in] */ DXGI_FORMAT NewFormat,
        /* [in] */ UINT SwapChainFlags);

    HRESULT ( STDMETHODCALLTYPE *ResizeTarget )(
        IDXGISwapChain1 * This,
        /* [annotation][in] */
        _In_  const DXGI_MODE_DESC *pNewTargetParameters);

    HRESULT ( STDMETHODCALLTYPE *GetContainingOutput )(
        IDXGISwapChain1 * This,
        /* [annotation][out] */
        _Out_  IDXGIOutput **ppOutput);

    HRESULT ( STDMETHODCALLTYPE *GetFrameStatistics )(
        IDXGISwapChain1 * This,
        /* [annotation][out] */
        _Out_  DXGI_FRAME_STATISTICS *pStats);

    HRESULT ( STDMETHODCALLTYPE *GetLastPresentCount )(
        IDXGISwapChain1 * This,
        /* [annotation][out] */
        _Out_  UINT *pLastPresentCount);

    HRESULT ( STDMETHODCALLTYPE *GetDesc1 )(
        IDXGISwapChain1 * This,
        /* [annotation][out] */
        _Out_  DXGI_SWAP_CHAIN_DESC1 *pDesc);

    HRESULT ( STDMETHODCALLTYPE *GetFullscreenDesc )(
        IDXGISwapChain1 * This,
        /* [annotation][out] */
        _Out_  DXGI_SWAP_CHAIN_FULLSCREEN_DESC *pDesc);

    HRESULT ( STDMETHODCALLTYPE *GetHwnd )(
        IDXGISwapChain1 * This,
        /* [annotation][out] */
        _Out_  HWND *pHwnd);

    HRESULT ( STDMETHODCALLTYPE *GetCoreWindow )(
        IDXGISwapChain1 * This,
        /* [annotation][in] */
        _In_  REFIID refiid,
        /* [annotation][out] */
        _Out_  void **ppUnk);

    HRESULT ( STDMETHODCALLTYPE *Present1 )(
        IDXGISwapChain1 * This,
        /* [in] */ UINT SyncInterval,
        /* [in] */ UINT PresentFlags,
        /* [annotation][in] */
        _In_  const DXGI_PRESENT_PARAMETERS *pPresentParameters);

    BOOL ( STDMETHODCALLTYPE *IsTemporaryMonoSupported )(
        IDXGISwapChain1 * This);

    HRESULT ( STDMETHODCALLTYPE *GetRestrictToOutput )(
        IDXGISwapChain1 * This,
        /* [annotation][out] */
        _Out_  IDXGIOutput **ppRestrictToOutput);

    HRESULT ( STDMETHODCALLTYPE *SetBackgroundColor )(
        IDXGISwapChain1 * This,
        /* [annotation][in] */
        _In_  const DXGI_RGBA *pColor);

    HRESULT ( STDMETHODCALLTYPE *GetBackgroundColor )(
        IDXGISwapChain1 * This,
        /* [annotation][out] */
        _Out_  DXGI_RGBA *pColor);

    HRESULT ( STDMETHODCALLTYPE *SetRotation )(
        IDXGISwapChain1 * This,
        /* [annotation][in] */
        _In_  DXGI_MODE_ROTATION Rotation);

    HRESULT ( STDMETHODCALLTYPE *GetRotation )(
        IDXGISwapChain1 * This,
        /* [annotation][out] */
        _Out_  DXGI_MODE_ROTATION *pRotation);

    END_INTERFACE
} IDXGISwapChain1Vtbl;

// -----------------------------------------------------------------------------
// IDXGIFactory2
// -----------------------------------------------------------------------------
typedef struct IDXGIFactory2Vtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        IDXGIFactory2 * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        IDXGIFactory2 * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        IDXGIFactory2 * This);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        IDXGIFactory2 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [in] */ UINT DataSize,
        /* [annotation][in] */
        _In_reads_bytes_(DataSize)  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        IDXGIFactory2 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][in] */
        _In_  const IUnknown *pUnknown);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        IDXGIFactory2 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][out][in] */
        _Inout_  UINT *pDataSize,
        /* [annotation][out] */
        _Out_writes_bytes_(*pDataSize)  void *pData);

    HRESULT ( STDMETHODCALLTYPE *GetParent )(
        IDXGIFactory2 * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppParent);

    HRESULT ( STDMETHODCALLTYPE *EnumAdapters )(
        IDXGIFactory2 * This,
        /* [in] */ UINT Adapter,
        /* [annotation][out] */
        _Out_  IDXGIAdapter **ppAdapter);

    HRESULT ( STDMETHODCALLTYPE *MakeWindowAssociation )(
        IDXGIFactory2 * This,
        HWND WindowHandle,
        UINT Flags);

    HRESULT ( STDMETHODCALLTYPE *GetWindowAssociation )(
        IDXGIFactory2 * This,
        /* [annotation][out] */
        _Out_  HWND *pWindowHandle);

    HRESULT ( STDMETHODCALLTYPE *CreateSwapChain )(
        IDXGIFactory2 * This,
        /* [annotation][in] */
        _In_  IUnknown *pDevice,
        /* [annotation][in] */
        _In_  DXGI_SWAP_CHAIN_DESC *pDesc,
        /* [annotation][out] */
        _Out_  IDXGISwapChain **ppSwapChain);

    HRESULT ( STDMETHODCALLTYPE *CreateSoftwareAdapter )(
        IDXGIFactory2 * This,
        /* [in] */ HMODULE Module,
        /* [annotation][out] */
        _Out_  IDXGIAdapter **ppAdapter);

    HRESULT ( STDMETHODCALLTYPE *EnumAdapters1 )(
        IDXGIFactory2 * This,
        /* [in] */ UINT Adapter,
        /* [annotation][out] */
        _Out_  IDXGIAdapter1 **ppAdapter);

    BOOL ( STDMETHODCALLTYPE *IsCurrent )(
        IDXGIFactory2 * This);

    BOOL ( STDMETHODCALLTYPE *IsWindowedStereoEnabled )(
        IDXGIFactory2 * This);

    HRESULT ( STDMETHODCALLTYPE *CreateSwapChainForHwnd )(
        IDXGIFactory2 * This,
        /* [annotation][in] */
        _In_  IUnknown *pDevice,
        /* [annotation][in] */
        _In_  HWND hWnd,
        /* [annotation][in] */
        _In_  const DXGI_SWAP_CHAIN_DESC1 *pDesc,
        /* [annotation][in] */
        _In_opt_  const DXGI_SWAP_CHAIN_FULLSCREEN_DESC *pFullscreenDesc,
        /* [annotation][in] */
        _In_opt_  IDXGIOutput *pRestrictToOutput,
        /* [annotation][out] */
        _Out_  IDXGISwapChain1 **ppSwapChain);

    HRESULT ( STDMETHODCALLTYPE *CreateSwapChainForCoreWindow )(
        IDXGIFactory2 * This,
        /* [annotation][in] */
        _In_  IUnknown *pDevice,
        /* [annotation][in] */
        _In_  IUnknown *pWindow,
        /* [annotation][in] */
        _In_  const DXGI_SWAP_CHAIN_DESC1 *pDesc,
        /* [annotation][in] */
        _In_opt_  IDXGIOutput *pRestrictToOutput,
        /* [annotation][out] */
        _Out_  IDXGISwapChain1 **ppSwapChain);

    HRESULT ( STDMETHODCALLTYPE *GetSharedResourceAdapterLuid )(
        IDXGIFactory2 * This,
        /* [annotation] */
        _In_  HANDLE hResource,
        /* [annotation] */
        _Out_  LUID *pLuid);

    HRESULT ( STDMETHODCALLTYPE *RegisterStereoStatusWindow )(
        IDXGIFactory2 * This,
        /* [annotation][in] */
        _In_  HWND WindowHandle,
        /* [annotation][in] */
        _In_  UINT wMsg,
        /* [annotation][out] */
        _Out_  DWORD *pdwCookie);

    HRESULT ( STDMETHODCALLTYPE *RegisterStereoStatusEvent )(
        IDXGIFactory2 * This,
        /* [annotation][in] */
        _In_  HANDLE hEvent,
        /* [annotation][out] */
        _Out_  DWORD *pdwCookie);

    void ( STDMETHODCALLTYPE *UnregisterStereoStatus )(
        IDXGIFactory2 * This,
        /* [annotation][in] */
        _In_  DWORD dwCookie);

    HRESULT ( STDMETHODCALLTYPE *RegisterOcclusionStatusWindow )(
        IDXGIFactory2 * This,
        /* [annotation][in] */
        _In_  HWND WindowHandle,
        /* [annotation][in] */
        _In_  UINT wMsg,
        /* [annotation][out] */
        _Out_  DWORD *pdwCookie);

    HRESULT ( STDMETHODCALLTYPE *RegisterOcclusionStatusEvent )(
        IDXGIFactory2 * This,
        /* [annotation][in] */
        _In_  HANDLE hEvent,
        /* [annotation][out] */
        _Out_  DWORD *pdwCookie);

    void ( STDMETHODCALLTYPE *UnregisterOcclusionStatus )(
        IDXGIFactory2 * This,
        /* [annotation][in] */
        _In_  DWORD dwCookie);

    HRESULT ( STDMETHODCALLTYPE *CreateSwapChainForComposition )(
        IDXGIFactory2 * This,
        /* [annotation][in] */
        _In_  IUnknown *pDevice,
        /* [annotation][in] */
        _In_  const DXGI_SWAP_CHAIN_DESC1 *pDesc,
        /* [annotation][in] */
        _In_opt_  IDXGIOutput *pRestrictToOutput,
        /* [annotation][out] */
        _Outptr_  IDXGISwapChain1 **ppSwapChain);

    END_INTERFACE
} IDXGIFactory2Vtbl;

// -----------------------------------------------------------------------------
// IDXGIAdapter2
// -----------------------------------------------------------------------------
typedef struct IDXGIAdapter2Vtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        IDXGIAdapter2 * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        IDXGIAdapter2 * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        IDXGIAdapter2 * This);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        IDXGIAdapter2 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [in] */ UINT DataSize,
        /* [annotation][in] */
        _In_reads_bytes_(DataSize)  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        IDXGIAdapter2 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][in] */
        _In_  const IUnknown *pUnknown);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        IDXGIAdapter2 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][out][in] */
        _Inout_  UINT *pDataSize,
        /* [annotation][out] */
        _Out_writes_bytes_(*pDataSize)  void *pData);

    HRESULT ( STDMETHODCALLTYPE *GetParent )(
        IDXGIAdapter2 * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppParent);

    HRESULT ( STDMETHODCALLTYPE *EnumOutputs )(
        IDXGIAdapter2 * This,
        /* [in] */ UINT Output,
        /* [annotation][out][in] */
        _Out_  IDXGIOutput **ppOutput);

    HRESULT ( STDMETHODCALLTYPE *GetDesc )(
        IDXGIAdapter2 * This,
        /* [annotation][out] */
        _Out_  DXGI_ADAPTER_DESC *pDesc);

    HRESULT ( STDMETHODCALLTYPE *CheckInterfaceSupport )(
        IDXGIAdapter2 * This,
        /* [annotation][in] */
        _In_  REFGUID InterfaceName,
        /* [annotation][out] */
        _Out_  LARGE_INTEGER *pUMDVersion);

    HRESULT ( STDMETHODCALLTYPE *GetDesc1 )(
        IDXGIAdapter2 * This,
        /* [annotation][out] */
        _Out_  DXGI_ADAPTER_DESC1 *pDesc);

    HRESULT ( STDMETHODCALLTYPE *GetDesc2 )(
        IDXGIAdapter2 * This,
        /* [annotation][out] */
        _Out_  DXGI_ADAPTER_DESC2 *pDesc);

    END_INTERFACE
} IDXGIAdapter2Vtbl;

// -----------------------------------------------------------------------------
// IDXGIOutput1
// -----------------------------------------------------------------------------
typedef struct IDXGIOutput1Vtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        IDXGIOutput1 * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        IDXGIOutput1 * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        IDXGIOutput1 * This);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateData )(
        IDXGIOutput1 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [in] */ UINT DataSize,
        /* [annotation][in] */
        _In_reads_bytes_(DataSize)  const void *pData);

    HRESULT ( STDMETHODCALLTYPE *SetPrivateDataInterface )(
        IDXGIOutput1 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][in] */
        _In_  const IUnknown *pUnknown);

    HRESULT ( STDMETHODCALLTYPE *GetPrivateData )(
        IDXGIOutput1 * This,
        /* [annotation][in] */
        _In_  REFGUID Name,
        /* [annotation][out][in] */
        _Inout_  UINT *pDataSize,
        /* [annotation][out] */
        _Out_writes_bytes_(*pDataSize)  void *pData);

    HRESULT ( STDMETHODCALLTYPE *GetParent )(
        IDXGIOutput1 * This,
        /* [annotation][in] */
        _In_  REFIID riid,
        /* [annotation][retval][out] */
        _Out_  void **ppParent);

    HRESULT ( STDMETHODCALLTYPE *GetDesc )(
        IDXGIOutput1 * This,
        /* [annotation][out] */
        _Out_  DXGI_OUTPUT_DESC *pDesc);

    HRESULT ( STDMETHODCALLTYPE *GetDisplayModeList )(
        IDXGIOutput1 * This,
        /* [in] */ DXGI_FORMAT EnumFormat,
        /* [in] */ UINT Flags,
        /* [annotation][out][in] */
        _Inout_  UINT *pNumModes,
        /* [annotation][out] */
        _Out_writes_to_opt_(*pNumModes,*pNumModes)  DXGI_MODE_DESC *pDesc);

    HRESULT ( STDMETHODCALLTYPE *FindClosestMatchingMode )(
        IDXGIOutput1 * This,
        /* [annotation][in] */
        _In_  const DXGI_MODE_DESC *pModeToMatch,
        /* [annotation][out] */
        _Out_  DXGI_MODE_DESC *pClosestMatch,
        /* [annotation][in] */
        _In_opt_  IUnknown *pConcernedDevice);

    HRESULT ( STDMETHODCALLTYPE *WaitForVBlank )(
        IDXGIOutput1 * This);

    HRESULT ( STDMETHODCALLTYPE *TakeOwnership )(
        IDXGIOutput1 * This,
        /* [annotation][in] */
        _In_  IUnknown *pDevice,
        BOOL Exclusive);

    void ( STDMETHODCALLTYPE *ReleaseOwnership )(
        IDXGIOutput1 * This);

    HRESULT ( STDMETHODCALLTYPE *GetGammaControlCapabilities )(
        IDXGIOutput1 * This,
        /* [annotation][out] */
        _Out_  DXGI_GAMMA_CONTROL_CAPABILITIES *pGammaCaps);

    HRESULT ( STDMETHODCALLTYPE *SetGammaControl )(
        IDXGIOutput1 * This,
        /* [annotation][in] */
        _In_  const DXGI_GAMMA_CONTROL *pArray);

    HRESULT ( STDMETHODCALLTYPE *GetGammaControl )(
        IDXGIOutput1 * This,
        /* [annotation][out] */
        _Out_  DXGI_GAMMA_CONTROL *pArray);

    HRESULT ( STDMETHODCALLTYPE *SetDisplaySurface )(
        IDXGIOutput1 * This,
        /* [annotation][in] */
        _In_  IDXGISurface *pScanoutSurface);

    HRESULT ( STDMETHODCALLTYPE *GetDisplaySurfaceData )(
        IDXGIOutput1 * This,
        /* [annotation][in] */
        _In_  IDXGISurface *pDestination);

    HRESULT ( STDMETHODCALLTYPE *GetFrameStatistics )(
        IDXGIOutput1 * This,
        /* [annotation][out] */
        _Out_  DXGI_FRAME_STATISTICS *pStats);

    HRESULT ( STDMETHODCALLTYPE *GetDisplayModeList1 )(
        IDXGIOutput1 * This,
        /* [in] */ DXGI_FORMAT EnumFormat,
        /* [in] */ UINT Flags,
        /* [annotation][out][in] */
        _Inout_  UINT *pNumModes,
        /* [annotation][out] */
        _Out_writes_to_opt_(*pNumModes,*pNumModes)  DXGI_MODE_DESC1 *pDesc);

    HRESULT ( STDMETHODCALLTYPE *FindClosestMatchingMode1 )(
        IDXGIOutput1 * This,
        /* [annotation][in] */
        _In_  const DXGI_MODE_DESC1 *pModeToMatch,
        /* [annotation][out] */
        _Out_  DXGI_MODE_DESC1 *pClosestMatch,
        /* [annotation][in] */
        _In_opt_  IUnknown *pConcernedDevice);

    HRESULT ( STDMETHODCALLTYPE *GetDisplaySurfaceData1 )(
        IDXGIOutput1 * This,
        /* [annotation][in] */
        _In_  IDXGIResource *pDestination);

    HRESULT ( STDMETHODCALLTYPE *DuplicateOutput )(
        IDXGIOutput1 * This,
        /* [annotation][in] */
        _In_  IUnknown *pDevice,
        /* [annotation][out] */
        _Out_  IDXGIOutputDuplication **ppOutputDuplication);

    END_INTERFACE
} IDXGIOutput1Vtbl;

// -----------------------------------------------------------------------------
// IDXGIInfoQueue
// -----------------------------------------------------------------------------
typedef struct IDXGIInfoQueueVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        IDXGIInfoQueue * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        IDXGIInfoQueue * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        IDXGIInfoQueue * This);

    HRESULT ( STDMETHODCALLTYPE *SetMessageCountLimit )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer,
        /* [annotation] */
        _In_  UINT64 MessageCountLimit);

    void ( STDMETHODCALLTYPE *ClearStoredMessages )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer);

    HRESULT ( STDMETHODCALLTYPE *GetMessage )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer,
        /* [annotation] */
        _In_  UINT64 MessageIndex,
        /* [annotation] */
        _Out_writes_bytes_opt_(*pMessageByteLength)  DXGI_INFO_QUEUE_MESSAGE *pMessage,
        /* [annotation] */
        _Inout_  SIZE_T *pMessageByteLength);

    UINT64 ( STDMETHODCALLTYPE *GetNumStoredMessagesAllowedByRetrievalFilters )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer);

    UINT64 ( STDMETHODCALLTYPE *GetNumStoredMessages )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer);

    UINT64 ( STDMETHODCALLTYPE *GetNumMessagesDiscardedByMessageCountLimit )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer);

    UINT64 ( STDMETHODCALLTYPE *GetMessageCountLimit )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer);

    UINT64 ( STDMETHODCALLTYPE *GetNumMessagesAllowedByStorageFilter )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer);

    UINT64 ( STDMETHODCALLTYPE *GetNumMessagesDeniedByStorageFilter )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer);

    HRESULT ( STDMETHODCALLTYPE *AddStorageFilterEntries )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer,
        /* [annotation] */
        _In_  DXGI_INFO_QUEUE_FILTER *pFilter);

    HRESULT ( STDMETHODCALLTYPE *GetStorageFilter )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer,
        /* [annotation] */
        _Out_writes_bytes_opt_(*pFilterByteLength)  DXGI_INFO_QUEUE_FILTER *pFilter,
        /* [annotation] */
        _Inout_  SIZE_T *pFilterByteLength);

    void ( STDMETHODCALLTYPE *ClearStorageFilter )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer);

    HRESULT ( STDMETHODCALLTYPE *PushEmptyStorageFilter )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer);

    HRESULT ( STDMETHODCALLTYPE *PushDenyAllStorageFilter )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer);

    HRESULT ( STDMETHODCALLTYPE *PushCopyOfStorageFilter )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer);

    HRESULT ( STDMETHODCALLTYPE *PushStorageFilter )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer,
        /* [annotation] */
        _In_  DXGI_INFO_QUEUE_FILTER *pFilter);

    void ( STDMETHODCALLTYPE *PopStorageFilter )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer);

    UINT ( STDMETHODCALLTYPE *GetStorageFilterStackSize )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer);

    HRESULT ( STDMETHODCALLTYPE *AddRetrievalFilterEntries )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer,
        /* [annotation] */
        _In_  DXGI_INFO_QUEUE_FILTER *pFilter);

    HRESULT ( STDMETHODCALLTYPE *GetRetrievalFilter )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer,
        /* [annotation] */
        _Out_writes_bytes_opt_(*pFilterByteLength)  DXGI_INFO_QUEUE_FILTER *pFilter,
        /* [annotation] */
        _Inout_  SIZE_T *pFilterByteLength);

    void ( STDMETHODCALLTYPE *ClearRetrievalFilter )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer);

    HRESULT ( STDMETHODCALLTYPE *PushEmptyRetrievalFilter )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer);

    HRESULT ( STDMETHODCALLTYPE *PushDenyAllRetrievalFilter )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer);

    HRESULT ( STDMETHODCALLTYPE *PushCopyOfRetrievalFilter )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer);

    HRESULT ( STDMETHODCALLTYPE *PushRetrievalFilter )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer,
        /* [annotation] */
        _In_  DXGI_INFO_QUEUE_FILTER *pFilter);

    void ( STDMETHODCALLTYPE *PopRetrievalFilter )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer);

    UINT ( STDMETHODCALLTYPE *GetRetrievalFilterStackSize )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer);

    HRESULT ( STDMETHODCALLTYPE *AddMessage )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer,
        /* [annotation] */
        _In_  DXGI_INFO_QUEUE_MESSAGE_CATEGORY Category,
        /* [annotation] */
        _In_  DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity,
        /* [annotation] */
        _In_  DXGI_INFO_QUEUE_MESSAGE_ID ID,
        /* [annotation] */
        _In_  LPCSTR pDescription);

    HRESULT ( STDMETHODCALLTYPE *AddApplicationMessage )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity,
        /* [annotation] */
        _In_  LPCSTR pDescription);

    HRESULT ( STDMETHODCALLTYPE *SetBreakOnCategory )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer,
        /* [annotation] */
        _In_  DXGI_INFO_QUEUE_MESSAGE_CATEGORY Category,
        /* [annotation] */
        _In_  BOOL bEnable);

    HRESULT ( STDMETHODCALLTYPE *SetBreakOnSeverity )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer,
        /* [annotation] */
        _In_  DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity,
        /* [annotation] */
        _In_  BOOL bEnable);

    HRESULT ( STDMETHODCALLTYPE *SetBreakOnID )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer,
        /* [annotation] */
        _In_  DXGI_INFO_QUEUE_MESSAGE_ID ID,
        /* [annotation] */
        _In_  BOOL bEnable);

    BOOL ( STDMETHODCALLTYPE *GetBreakOnCategory )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer,
        /* [annotation] */
        _In_  DXGI_INFO_QUEUE_MESSAGE_CATEGORY Category);

    BOOL ( STDMETHODCALLTYPE *GetBreakOnSeverity )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer,
        /* [annotation] */
        _In_  DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity);

    BOOL ( STDMETHODCALLTYPE *GetBreakOnID )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer,
        /* [annotation] */
        _In_  DXGI_INFO_QUEUE_MESSAGE_ID ID);

    void ( STDMETHODCALLTYPE *SetMuteDebugOutput )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer,
        /* [annotation] */
        _In_  BOOL bMute);

    BOOL ( STDMETHODCALLTYPE *GetMuteDebugOutput )(
        IDXGIInfoQueue * This,
        /* [annotation] */
        _In_  DXGI_DEBUG_ID Producer);

    END_INTERFACE
} IDXGIInfoQueueVtbl;

// -----------------------------------------------------------------------------
// IDXGIDebug
// -----------------------------------------------------------------------------
typedef struct IDXGIDebugVtbl
{
    BEGIN_INTERFACE

    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        IDXGIDebug * This,
        /* [in] */ REFIID riid,
        /* [annotation][iid_is][out] */
        _COM_Outptr_  void **ppvObject);

    ULONG ( STDMETHODCALLTYPE *AddRef )(
        IDXGIDebug * This);

    ULONG ( STDMETHODCALLTYPE *Release )(
        IDXGIDebug * This);

    HRESULT ( STDMETHODCALLTYPE *ReportLiveObjects )(
        IDXGIDebug * This,
        GUID apiid,
        DXGI_DEBUG_RLO_FLAGS flags);

    END_INTERFACE
} IDXGIDebugVtbl;

// -----------------------------------------------------------------------------
// Global vtables for all D3D11/DXGI classes
// -----------------------------------------------------------------------------

struct D3D11VTables
{
    ID3D11DeviceChildVtbl _ID3D11DeviceChild;
    ID3D11DepthStencilStateVtbl _ID3D11DepthStencilState;
    ID3D11BlendStateVtbl _ID3D11BlendState;
    ID3D11RasterizerStateVtbl _ID3D11RasterizerState;
    ID3D11ResourceVtbl _ID3D11Resource;
    ID3D11BufferVtbl _ID3D11Buffer;
    ID3D11Texture1DVtbl _ID3D11Texture1D;
    ID3D11Texture2DVtbl _ID3D11Texture2D;
    ID3D11Texture3DVtbl _ID3D11Texture3D;
    ID3D11ViewVtbl _ID3D11View;
    ID3D11ShaderResourceViewVtbl _ID3D11ShaderResourceView;
    ID3D11RenderTargetViewVtbl _ID3D11RenderTargetView;
    ID3D11DepthStencilViewVtbl _ID3D11DepthStencilView;
    ID3D11UnorderedAccessViewVtbl _ID3D11UnorderedAccessView;
    ID3D11VertexShaderVtbl _ID3D11VertexShader;
    ID3D11HullShaderVtbl _ID3D11HullShader;
    ID3D11DomainShaderVtbl _ID3D11DomainShader;
    ID3D11GeometryShaderVtbl _ID3D11GeometryShader;
    ID3D11PixelShaderVtbl _ID3D11PixelShader;
    ID3D11ComputeShaderVtbl _ID3D11ComputeShader;
    ID3D11InputLayoutVtbl _ID3D11InputLayout;
    ID3D11SamplerStateVtbl _ID3D11SamplerState;
    ID3D11AsynchronousVtbl _ID3D11Asynchronous;
    ID3D11QueryVtbl _ID3D11Query;
    ID3D11PredicateVtbl _ID3D11Predicate;
    ID3D11CounterVtbl _ID3D11Counter;
    ID3D11ClassInstanceVtbl _ID3D11ClassInstance;
    ID3D11ClassLinkageVtbl _ID3D11ClassLinkage;
    ID3D11CommandListVtbl _ID3D11CommandList;
    ID3D11DeviceContextVtbl _ID3D11DeviceContext;
    ID3D11VideoDecoderVtbl _ID3D11VideoDecoder;
    ID3D11VideoProcessorEnumeratorVtbl _ID3D11VideoProcessorEnumerator;
    ID3D11VideoProcessorVtbl _ID3D11VideoProcessor;
    ID3D11AuthenticatedChannelVtbl _ID3D11AuthenticatedChannel;
    ID3D11CryptoSessionVtbl _ID3D11CryptoSession;
    ID3D11VideoDecoderOutputViewVtbl _ID3D11VideoDecoderOutputView;
    ID3D11VideoProcessorInputViewVtbl _ID3D11VideoProcessorInputView;
    ID3D11VideoProcessorOutputViewVtbl _ID3D11VideoProcessorOutputView;
    ID3D11VideoContextVtbl _ID3D11VideoContext;
    ID3D11VideoDeviceVtbl _ID3D11VideoDevice;
    ID3D11DeviceVtbl _ID3D11Device;
    ID3D11BlendState1Vtbl _ID3D11BlendState1;
    ID3D11RasterizerState1Vtbl _ID3D11RasterizerState1;
    ID3DDeviceContextStateVtbl _ID3DDeviceContextState;
    ID3D11DeviceContext1Vtbl _ID3D11DeviceContext1;
    ID3D11Device1Vtbl _ID3D11Device1;
    ID3DUserDefinedAnnotationVtbl _ID3DUserDefinedAnnotation;
    ID3D11DebugVtbl _ID3D11Debug;
    ID3D11SwitchToRefVtbl _ID3D11SwitchToRef;
    ID3D11TracingDeviceVtbl _ID3D11TracingDevice;
    ID3D11RefTrackingOptionsVtbl _ID3D11RefTrackingOptions;
    ID3D11RefDefaultTrackingOptionsVtbl _ID3D11RefDefaultTrackingOptions;
    ID3D11InfoQueueVtbl _ID3D11InfoQueue;
    IDXGIObjectVtbl _IDXGIObject;
    IDXGIDeviceSubObjectVtbl _IDXGIDeviceSubObject;
    IDXGIResourceVtbl _IDXGIResource;
    IDXGIKeyedMutexVtbl _IDXGIKeyedMutex;
    IDXGISurfaceVtbl _IDXGISurface;
    IDXGISurface1Vtbl _IDXGISurface1;
    IDXGIAdapterVtbl _IDXGIAdapter;
    IDXGIOutputVtbl _IDXGIOutput;
    IDXGISwapChainVtbl _IDXGISwapChain;
    IDXGIFactoryVtbl _IDXGIFactory;
    IDXGIDeviceVtbl _IDXGIDevice;
    IDXGIFactory1Vtbl _IDXGIFactory1;
    IDXGIAdapter1Vtbl _IDXGIAdapter1;
    IDXGIDevice1Vtbl _IDXGIDevice1;
    IDXGIDisplayControlVtbl _IDXGIDisplayControl;
    IDXGIOutputDuplicationVtbl _IDXGIOutputDuplication;
    IDXGISurface2Vtbl _IDXGISurface2;
    IDXGIResource1Vtbl _IDXGIResource1;
    IDXGIDevice2Vtbl _IDXGIDevice2;
    IDXGISwapChain1Vtbl _IDXGISwapChain1;
    IDXGIFactory2Vtbl _IDXGIFactory2;
    IDXGIAdapter2Vtbl _IDXGIAdapter2;
    IDXGIOutput1Vtbl _IDXGIOutput1;
    IDXGIInfoQueueVtbl _IDXGIInfoQueue;
    IDXGIDebugVtbl _IDXGIDebug;
};
// -----------------------------------------------------------------------------
// ID3D11DeviceChildHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11DeviceChild(ID3D11DeviceChild * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11DeviceChildVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11DeviceChild);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11DeviceChild);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11DeviceChild");
}
template <> inline void RealToHooked11<ID3D11DeviceChild>(ID3D11DeviceChild * p)
{
    return RealToHooked11_ID3D11DeviceChild( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DeviceChild_QueryInterface_Hooked(ID3D11DeviceChild * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11DeviceChild::QueryInterface");
    return g_D3D11OriginVTables._ID3D11DeviceChild.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11DeviceChild_AddRef_Hooked(ID3D11DeviceChild * ptr)
{
    calltrace::AutoTrace trace("ID3D11DeviceChild::AddRef");
    return g_D3D11OriginVTables._ID3D11DeviceChild.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11DeviceChild_Release_Hooked(ID3D11DeviceChild * ptr)
{
    calltrace::AutoTrace trace("ID3D11DeviceChild::Release");
    return g_D3D11OriginVTables._ID3D11DeviceChild.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceChild_GetDevice_Hooked(ID3D11DeviceChild * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11DeviceChild::GetDevice");
    return g_D3D11OriginVTables._ID3D11DeviceChild.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DeviceChild_GetPrivateData_Hooked(ID3D11DeviceChild * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11DeviceChild::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11DeviceChild.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DeviceChild_SetPrivateData_Hooked(ID3D11DeviceChild * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11DeviceChild::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11DeviceChild.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DeviceChild_SetPrivateDataInterface_Hooked(ID3D11DeviceChild * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11DeviceChild::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11DeviceChild.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
// ID3D11DepthStencilStateHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11DepthStencilState(ID3D11DepthStencilState * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11DepthStencilStateVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11DepthStencilState);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11DepthStencilState);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11DepthStencilState");
}
template <> inline void RealToHooked11<ID3D11DepthStencilState>(ID3D11DepthStencilState * p)
{
    return RealToHooked11_ID3D11DepthStencilState( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DepthStencilState_QueryInterface_Hooked(ID3D11DepthStencilState * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11DepthStencilState::QueryInterface");
    return g_D3D11OriginVTables._ID3D11DepthStencilState.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11DepthStencilState_AddRef_Hooked(ID3D11DepthStencilState * ptr)
{
    calltrace::AutoTrace trace("ID3D11DepthStencilState::AddRef");
    return g_D3D11OriginVTables._ID3D11DepthStencilState.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11DepthStencilState_Release_Hooked(ID3D11DepthStencilState * ptr)
{
    calltrace::AutoTrace trace("ID3D11DepthStencilState::Release");
    return g_D3D11OriginVTables._ID3D11DepthStencilState.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DepthStencilState_GetDevice_Hooked(ID3D11DepthStencilState * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11DepthStencilState::GetDevice");
    return g_D3D11OriginVTables._ID3D11DepthStencilState.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DepthStencilState_GetPrivateData_Hooked(ID3D11DepthStencilState * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11DepthStencilState::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11DepthStencilState.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DepthStencilState_SetPrivateData_Hooked(ID3D11DepthStencilState * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11DepthStencilState::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11DepthStencilState.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DepthStencilState_SetPrivateDataInterface_Hooked(ID3D11DepthStencilState * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11DepthStencilState::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11DepthStencilState.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DepthStencilState_GetDesc_Hooked(ID3D11DepthStencilState * ptr, _Out_  D3D11_DEPTH_STENCIL_DESC * pDesc)
{
    calltrace::AutoTrace trace("ID3D11DepthStencilState::GetDesc");
    return g_D3D11OriginVTables._ID3D11DepthStencilState.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
// ID3D11BlendStateHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11BlendState(ID3D11BlendState * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11BlendStateVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11BlendState);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11BlendState);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11BlendState");
}
template <> inline void RealToHooked11<ID3D11BlendState>(ID3D11BlendState * p)
{
    return RealToHooked11_ID3D11BlendState( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11BlendState_QueryInterface_Hooked(ID3D11BlendState * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11BlendState::QueryInterface");
    return g_D3D11OriginVTables._ID3D11BlendState.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11BlendState_AddRef_Hooked(ID3D11BlendState * ptr)
{
    calltrace::AutoTrace trace("ID3D11BlendState::AddRef");
    return g_D3D11OriginVTables._ID3D11BlendState.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11BlendState_Release_Hooked(ID3D11BlendState * ptr)
{
    calltrace::AutoTrace trace("ID3D11BlendState::Release");
    return g_D3D11OriginVTables._ID3D11BlendState.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11BlendState_GetDevice_Hooked(ID3D11BlendState * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11BlendState::GetDevice");
    return g_D3D11OriginVTables._ID3D11BlendState.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11BlendState_GetPrivateData_Hooked(ID3D11BlendState * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11BlendState::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11BlendState.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11BlendState_SetPrivateData_Hooked(ID3D11BlendState * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11BlendState::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11BlendState.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11BlendState_SetPrivateDataInterface_Hooked(ID3D11BlendState * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11BlendState::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11BlendState.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11BlendState_GetDesc_Hooked(ID3D11BlendState * ptr, _Out_  D3D11_BLEND_DESC * pDesc)
{
    calltrace::AutoTrace trace("ID3D11BlendState::GetDesc");
    return g_D3D11OriginVTables._ID3D11BlendState.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
// ID3D11RasterizerStateHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11RasterizerState(ID3D11RasterizerState * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11RasterizerStateVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11RasterizerState);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11RasterizerState);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11RasterizerState");
}
template <> inline void RealToHooked11<ID3D11RasterizerState>(ID3D11RasterizerState * p)
{
    return RealToHooked11_ID3D11RasterizerState( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11RasterizerState_QueryInterface_Hooked(ID3D11RasterizerState * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11RasterizerState::QueryInterface");
    return g_D3D11OriginVTables._ID3D11RasterizerState.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11RasterizerState_AddRef_Hooked(ID3D11RasterizerState * ptr)
{
    calltrace::AutoTrace trace("ID3D11RasterizerState::AddRef");
    return g_D3D11OriginVTables._ID3D11RasterizerState.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11RasterizerState_Release_Hooked(ID3D11RasterizerState * ptr)
{
    calltrace::AutoTrace trace("ID3D11RasterizerState::Release");
    return g_D3D11OriginVTables._ID3D11RasterizerState.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11RasterizerState_GetDevice_Hooked(ID3D11RasterizerState * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11RasterizerState::GetDevice");
    return g_D3D11OriginVTables._ID3D11RasterizerState.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11RasterizerState_GetPrivateData_Hooked(ID3D11RasterizerState * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11RasterizerState::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11RasterizerState.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11RasterizerState_SetPrivateData_Hooked(ID3D11RasterizerState * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11RasterizerState::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11RasterizerState.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11RasterizerState_SetPrivateDataInterface_Hooked(ID3D11RasterizerState * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11RasterizerState::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11RasterizerState.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11RasterizerState_GetDesc_Hooked(ID3D11RasterizerState * ptr, _Out_  D3D11_RASTERIZER_DESC * pDesc)
{
    calltrace::AutoTrace trace("ID3D11RasterizerState::GetDesc");
    return g_D3D11OriginVTables._ID3D11RasterizerState.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
// ID3D11ResourceHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11Resource(ID3D11Resource * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11ResourceVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11Resource);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11Resource);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11Resource");
}
template <> inline void RealToHooked11<ID3D11Resource>(ID3D11Resource * p)
{
    return RealToHooked11_ID3D11Resource( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Resource_QueryInterface_Hooked(ID3D11Resource * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11Resource::QueryInterface");
    return g_D3D11OriginVTables._ID3D11Resource.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11Resource_AddRef_Hooked(ID3D11Resource * ptr)
{
    calltrace::AutoTrace trace("ID3D11Resource::AddRef");
    return g_D3D11OriginVTables._ID3D11Resource.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11Resource_Release_Hooked(ID3D11Resource * ptr)
{
    calltrace::AutoTrace trace("ID3D11Resource::Release");
    return g_D3D11OriginVTables._ID3D11Resource.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Resource_GetDevice_Hooked(ID3D11Resource * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11Resource::GetDevice");
    return g_D3D11OriginVTables._ID3D11Resource.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Resource_GetPrivateData_Hooked(ID3D11Resource * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11Resource::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11Resource.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Resource_SetPrivateData_Hooked(ID3D11Resource * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11Resource::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11Resource.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Resource_SetPrivateDataInterface_Hooked(ID3D11Resource * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11Resource::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11Resource.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Resource_GetType_Hooked(ID3D11Resource * ptr, _Out_  D3D11_RESOURCE_DIMENSION * pResourceDimension)
{
    calltrace::AutoTrace trace("ID3D11Resource::GetType");
    return g_D3D11OriginVTables._ID3D11Resource.GetType(ptr, pResourceDimension);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Resource_SetEvictionPriority_Hooked(ID3D11Resource * ptr, _In_  UINT EvictionPriority)
{
    calltrace::AutoTrace trace("ID3D11Resource::SetEvictionPriority");
    return g_D3D11OriginVTables._ID3D11Resource.SetEvictionPriority(ptr, EvictionPriority);
}

// -----------------------------------------------------------------------------
static inline UINT STDMETHODCALLTYPE ID3D11Resource_GetEvictionPriority_Hooked(ID3D11Resource * ptr)
{
    calltrace::AutoTrace trace("ID3D11Resource::GetEvictionPriority");
    return g_D3D11OriginVTables._ID3D11Resource.GetEvictionPriority(ptr);
}

// -----------------------------------------------------------------------------
// ID3D11BufferHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11Buffer(ID3D11Buffer * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11BufferVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11Buffer);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11Buffer);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11Buffer");
}
template <> inline void RealToHooked11<ID3D11Buffer>(ID3D11Buffer * p)
{
    return RealToHooked11_ID3D11Buffer( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Buffer_QueryInterface_Hooked(ID3D11Buffer * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11Buffer::QueryInterface");
    return g_D3D11OriginVTables._ID3D11Buffer.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11Buffer_AddRef_Hooked(ID3D11Buffer * ptr)
{
    calltrace::AutoTrace trace("ID3D11Buffer::AddRef");
    return g_D3D11OriginVTables._ID3D11Buffer.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11Buffer_Release_Hooked(ID3D11Buffer * ptr)
{
    calltrace::AutoTrace trace("ID3D11Buffer::Release");
    return g_D3D11OriginVTables._ID3D11Buffer.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Buffer_GetDevice_Hooked(ID3D11Buffer * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11Buffer::GetDevice");
    return g_D3D11OriginVTables._ID3D11Buffer.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Buffer_GetPrivateData_Hooked(ID3D11Buffer * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11Buffer::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11Buffer.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Buffer_SetPrivateData_Hooked(ID3D11Buffer * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11Buffer::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11Buffer.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Buffer_SetPrivateDataInterface_Hooked(ID3D11Buffer * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11Buffer::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11Buffer.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Buffer_GetType_Hooked(ID3D11Buffer * ptr, _Out_  D3D11_RESOURCE_DIMENSION * pResourceDimension)
{
    calltrace::AutoTrace trace("ID3D11Buffer::GetType");
    return g_D3D11OriginVTables._ID3D11Buffer.GetType(ptr, pResourceDimension);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Buffer_SetEvictionPriority_Hooked(ID3D11Buffer * ptr, _In_  UINT EvictionPriority)
{
    calltrace::AutoTrace trace("ID3D11Buffer::SetEvictionPriority");
    return g_D3D11OriginVTables._ID3D11Buffer.SetEvictionPriority(ptr, EvictionPriority);
}

// -----------------------------------------------------------------------------
static inline UINT STDMETHODCALLTYPE ID3D11Buffer_GetEvictionPriority_Hooked(ID3D11Buffer * ptr)
{
    calltrace::AutoTrace trace("ID3D11Buffer::GetEvictionPriority");
    return g_D3D11OriginVTables._ID3D11Buffer.GetEvictionPriority(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Buffer_GetDesc_Hooked(ID3D11Buffer * ptr, _Out_  D3D11_BUFFER_DESC * pDesc)
{
    calltrace::AutoTrace trace("ID3D11Buffer::GetDesc");
    return g_D3D11OriginVTables._ID3D11Buffer.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
// ID3D11Texture1DHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11Texture1D(ID3D11Texture1D * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11Texture1DVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11Texture1D);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11Texture1D);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11Texture1D");
}
template <> inline void RealToHooked11<ID3D11Texture1D>(ID3D11Texture1D * p)
{
    return RealToHooked11_ID3D11Texture1D( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Texture1D_QueryInterface_Hooked(ID3D11Texture1D * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11Texture1D::QueryInterface");
    return g_D3D11OriginVTables._ID3D11Texture1D.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11Texture1D_AddRef_Hooked(ID3D11Texture1D * ptr)
{
    calltrace::AutoTrace trace("ID3D11Texture1D::AddRef");
    return g_D3D11OriginVTables._ID3D11Texture1D.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11Texture1D_Release_Hooked(ID3D11Texture1D * ptr)
{
    calltrace::AutoTrace trace("ID3D11Texture1D::Release");
    return g_D3D11OriginVTables._ID3D11Texture1D.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Texture1D_GetDevice_Hooked(ID3D11Texture1D * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11Texture1D::GetDevice");
    return g_D3D11OriginVTables._ID3D11Texture1D.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Texture1D_GetPrivateData_Hooked(ID3D11Texture1D * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11Texture1D::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11Texture1D.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Texture1D_SetPrivateData_Hooked(ID3D11Texture1D * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11Texture1D::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11Texture1D.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Texture1D_SetPrivateDataInterface_Hooked(ID3D11Texture1D * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11Texture1D::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11Texture1D.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Texture1D_GetType_Hooked(ID3D11Texture1D * ptr, _Out_  D3D11_RESOURCE_DIMENSION * pResourceDimension)
{
    calltrace::AutoTrace trace("ID3D11Texture1D::GetType");
    return g_D3D11OriginVTables._ID3D11Texture1D.GetType(ptr, pResourceDimension);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Texture1D_SetEvictionPriority_Hooked(ID3D11Texture1D * ptr, _In_  UINT EvictionPriority)
{
    calltrace::AutoTrace trace("ID3D11Texture1D::SetEvictionPriority");
    return g_D3D11OriginVTables._ID3D11Texture1D.SetEvictionPriority(ptr, EvictionPriority);
}

// -----------------------------------------------------------------------------
static inline UINT STDMETHODCALLTYPE ID3D11Texture1D_GetEvictionPriority_Hooked(ID3D11Texture1D * ptr)
{
    calltrace::AutoTrace trace("ID3D11Texture1D::GetEvictionPriority");
    return g_D3D11OriginVTables._ID3D11Texture1D.GetEvictionPriority(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Texture1D_GetDesc_Hooked(ID3D11Texture1D * ptr, _Out_  D3D11_TEXTURE1D_DESC * pDesc)
{
    calltrace::AutoTrace trace("ID3D11Texture1D::GetDesc");
    return g_D3D11OriginVTables._ID3D11Texture1D.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
// ID3D11Texture2DHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11Texture2D(ID3D11Texture2D * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11Texture2DVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11Texture2D);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11Texture2D);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11Texture2D");
}
template <> inline void RealToHooked11<ID3D11Texture2D>(ID3D11Texture2D * p)
{
    return RealToHooked11_ID3D11Texture2D( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Texture2D_QueryInterface_Hooked(ID3D11Texture2D * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11Texture2D::QueryInterface");
    return g_D3D11OriginVTables._ID3D11Texture2D.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11Texture2D_AddRef_Hooked(ID3D11Texture2D * ptr)
{
    calltrace::AutoTrace trace("ID3D11Texture2D::AddRef");
    return g_D3D11OriginVTables._ID3D11Texture2D.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11Texture2D_Release_Hooked(ID3D11Texture2D * ptr)
{
    calltrace::AutoTrace trace("ID3D11Texture2D::Release");
    return g_D3D11OriginVTables._ID3D11Texture2D.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Texture2D_GetDevice_Hooked(ID3D11Texture2D * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11Texture2D::GetDevice");
    return g_D3D11OriginVTables._ID3D11Texture2D.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Texture2D_GetPrivateData_Hooked(ID3D11Texture2D * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11Texture2D::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11Texture2D.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Texture2D_SetPrivateData_Hooked(ID3D11Texture2D * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11Texture2D::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11Texture2D.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Texture2D_SetPrivateDataInterface_Hooked(ID3D11Texture2D * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11Texture2D::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11Texture2D.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Texture2D_GetType_Hooked(ID3D11Texture2D * ptr, _Out_  D3D11_RESOURCE_DIMENSION * pResourceDimension)
{
    calltrace::AutoTrace trace("ID3D11Texture2D::GetType");
    return g_D3D11OriginVTables._ID3D11Texture2D.GetType(ptr, pResourceDimension);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Texture2D_SetEvictionPriority_Hooked(ID3D11Texture2D * ptr, _In_  UINT EvictionPriority)
{
    calltrace::AutoTrace trace("ID3D11Texture2D::SetEvictionPriority");
    return g_D3D11OriginVTables._ID3D11Texture2D.SetEvictionPriority(ptr, EvictionPriority);
}

// -----------------------------------------------------------------------------
static inline UINT STDMETHODCALLTYPE ID3D11Texture2D_GetEvictionPriority_Hooked(ID3D11Texture2D * ptr)
{
    calltrace::AutoTrace trace("ID3D11Texture2D::GetEvictionPriority");
    return g_D3D11OriginVTables._ID3D11Texture2D.GetEvictionPriority(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Texture2D_GetDesc_Hooked(ID3D11Texture2D * ptr, _Out_  D3D11_TEXTURE2D_DESC * pDesc)
{
    calltrace::AutoTrace trace("ID3D11Texture2D::GetDesc");
    return g_D3D11OriginVTables._ID3D11Texture2D.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
// ID3D11Texture3DHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11Texture3D(ID3D11Texture3D * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11Texture3DVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11Texture3D);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11Texture3D);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11Texture3D");
}
template <> inline void RealToHooked11<ID3D11Texture3D>(ID3D11Texture3D * p)
{
    return RealToHooked11_ID3D11Texture3D( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Texture3D_QueryInterface_Hooked(ID3D11Texture3D * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11Texture3D::QueryInterface");
    return g_D3D11OriginVTables._ID3D11Texture3D.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11Texture3D_AddRef_Hooked(ID3D11Texture3D * ptr)
{
    calltrace::AutoTrace trace("ID3D11Texture3D::AddRef");
    return g_D3D11OriginVTables._ID3D11Texture3D.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11Texture3D_Release_Hooked(ID3D11Texture3D * ptr)
{
    calltrace::AutoTrace trace("ID3D11Texture3D::Release");
    return g_D3D11OriginVTables._ID3D11Texture3D.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Texture3D_GetDevice_Hooked(ID3D11Texture3D * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11Texture3D::GetDevice");
    return g_D3D11OriginVTables._ID3D11Texture3D.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Texture3D_GetPrivateData_Hooked(ID3D11Texture3D * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11Texture3D::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11Texture3D.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Texture3D_SetPrivateData_Hooked(ID3D11Texture3D * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11Texture3D::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11Texture3D.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Texture3D_SetPrivateDataInterface_Hooked(ID3D11Texture3D * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11Texture3D::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11Texture3D.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Texture3D_GetType_Hooked(ID3D11Texture3D * ptr, _Out_  D3D11_RESOURCE_DIMENSION * pResourceDimension)
{
    calltrace::AutoTrace trace("ID3D11Texture3D::GetType");
    return g_D3D11OriginVTables._ID3D11Texture3D.GetType(ptr, pResourceDimension);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Texture3D_SetEvictionPriority_Hooked(ID3D11Texture3D * ptr, _In_  UINT EvictionPriority)
{
    calltrace::AutoTrace trace("ID3D11Texture3D::SetEvictionPriority");
    return g_D3D11OriginVTables._ID3D11Texture3D.SetEvictionPriority(ptr, EvictionPriority);
}

// -----------------------------------------------------------------------------
static inline UINT STDMETHODCALLTYPE ID3D11Texture3D_GetEvictionPriority_Hooked(ID3D11Texture3D * ptr)
{
    calltrace::AutoTrace trace("ID3D11Texture3D::GetEvictionPriority");
    return g_D3D11OriginVTables._ID3D11Texture3D.GetEvictionPriority(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Texture3D_GetDesc_Hooked(ID3D11Texture3D * ptr, _Out_  D3D11_TEXTURE3D_DESC * pDesc)
{
    calltrace::AutoTrace trace("ID3D11Texture3D::GetDesc");
    return g_D3D11OriginVTables._ID3D11Texture3D.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
// ID3D11ViewHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11View(ID3D11View * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11ViewVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11View);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11View);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11View");
}
template <> inline void RealToHooked11<ID3D11View>(ID3D11View * p)
{
    return RealToHooked11_ID3D11View( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11View_QueryInterface_Hooked(ID3D11View * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11View::QueryInterface");
    return g_D3D11OriginVTables._ID3D11View.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11View_AddRef_Hooked(ID3D11View * ptr)
{
    calltrace::AutoTrace trace("ID3D11View::AddRef");
    return g_D3D11OriginVTables._ID3D11View.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11View_Release_Hooked(ID3D11View * ptr)
{
    calltrace::AutoTrace trace("ID3D11View::Release");
    return g_D3D11OriginVTables._ID3D11View.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11View_GetDevice_Hooked(ID3D11View * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11View::GetDevice");
    return g_D3D11OriginVTables._ID3D11View.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11View_GetPrivateData_Hooked(ID3D11View * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11View::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11View.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11View_SetPrivateData_Hooked(ID3D11View * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11View::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11View.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11View_SetPrivateDataInterface_Hooked(ID3D11View * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11View::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11View.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11View_GetResource_Hooked(ID3D11View * ptr, _Out_  ID3D11Resource ** ppResource)
{
    calltrace::AutoTrace trace("ID3D11View::GetResource");
    return g_D3D11OriginVTables._ID3D11View.GetResource(ptr, ppResource);
}

// -----------------------------------------------------------------------------
// ID3D11ShaderResourceViewHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11ShaderResourceView(ID3D11ShaderResourceView * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11ShaderResourceViewVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11ShaderResourceView);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11ShaderResourceView);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11ShaderResourceView");
}
template <> inline void RealToHooked11<ID3D11ShaderResourceView>(ID3D11ShaderResourceView * p)
{
    return RealToHooked11_ID3D11ShaderResourceView( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11ShaderResourceView_QueryInterface_Hooked(ID3D11ShaderResourceView * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11ShaderResourceView::QueryInterface");
    return g_D3D11OriginVTables._ID3D11ShaderResourceView.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11ShaderResourceView_AddRef_Hooked(ID3D11ShaderResourceView * ptr)
{
    calltrace::AutoTrace trace("ID3D11ShaderResourceView::AddRef");
    return g_D3D11OriginVTables._ID3D11ShaderResourceView.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11ShaderResourceView_Release_Hooked(ID3D11ShaderResourceView * ptr)
{
    calltrace::AutoTrace trace("ID3D11ShaderResourceView::Release");
    return g_D3D11OriginVTables._ID3D11ShaderResourceView.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11ShaderResourceView_GetDevice_Hooked(ID3D11ShaderResourceView * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11ShaderResourceView::GetDevice");
    return g_D3D11OriginVTables._ID3D11ShaderResourceView.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11ShaderResourceView_GetPrivateData_Hooked(ID3D11ShaderResourceView * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11ShaderResourceView::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11ShaderResourceView.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11ShaderResourceView_SetPrivateData_Hooked(ID3D11ShaderResourceView * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11ShaderResourceView::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11ShaderResourceView.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11ShaderResourceView_SetPrivateDataInterface_Hooked(ID3D11ShaderResourceView * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11ShaderResourceView::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11ShaderResourceView.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11ShaderResourceView_GetResource_Hooked(ID3D11ShaderResourceView * ptr, _Out_  ID3D11Resource ** ppResource)
{
    calltrace::AutoTrace trace("ID3D11ShaderResourceView::GetResource");
    return g_D3D11OriginVTables._ID3D11ShaderResourceView.GetResource(ptr, ppResource);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11ShaderResourceView_GetDesc_Hooked(ID3D11ShaderResourceView * ptr, _Out_  D3D11_SHADER_RESOURCE_VIEW_DESC * pDesc)
{
    calltrace::AutoTrace trace("ID3D11ShaderResourceView::GetDesc");
    return g_D3D11OriginVTables._ID3D11ShaderResourceView.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
// ID3D11RenderTargetViewHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11RenderTargetView(ID3D11RenderTargetView * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11RenderTargetViewVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11RenderTargetView);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11RenderTargetView);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11RenderTargetView");
}
template <> inline void RealToHooked11<ID3D11RenderTargetView>(ID3D11RenderTargetView * p)
{
    return RealToHooked11_ID3D11RenderTargetView( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11RenderTargetView_QueryInterface_Hooked(ID3D11RenderTargetView * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11RenderTargetView::QueryInterface");
    return g_D3D11OriginVTables._ID3D11RenderTargetView.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11RenderTargetView_AddRef_Hooked(ID3D11RenderTargetView * ptr)
{
    calltrace::AutoTrace trace("ID3D11RenderTargetView::AddRef");
    return g_D3D11OriginVTables._ID3D11RenderTargetView.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11RenderTargetView_Release_Hooked(ID3D11RenderTargetView * ptr)
{
    calltrace::AutoTrace trace("ID3D11RenderTargetView::Release");
    return g_D3D11OriginVTables._ID3D11RenderTargetView.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11RenderTargetView_GetDevice_Hooked(ID3D11RenderTargetView * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11RenderTargetView::GetDevice");
    return g_D3D11OriginVTables._ID3D11RenderTargetView.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11RenderTargetView_GetPrivateData_Hooked(ID3D11RenderTargetView * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11RenderTargetView::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11RenderTargetView.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11RenderTargetView_SetPrivateData_Hooked(ID3D11RenderTargetView * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11RenderTargetView::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11RenderTargetView.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11RenderTargetView_SetPrivateDataInterface_Hooked(ID3D11RenderTargetView * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11RenderTargetView::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11RenderTargetView.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11RenderTargetView_GetResource_Hooked(ID3D11RenderTargetView * ptr, _Out_  ID3D11Resource ** ppResource)
{
    calltrace::AutoTrace trace("ID3D11RenderTargetView::GetResource");
    return g_D3D11OriginVTables._ID3D11RenderTargetView.GetResource(ptr, ppResource);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11RenderTargetView_GetDesc_Hooked(ID3D11RenderTargetView * ptr, _Out_  D3D11_RENDER_TARGET_VIEW_DESC * pDesc)
{
    calltrace::AutoTrace trace("ID3D11RenderTargetView::GetDesc");
    return g_D3D11OriginVTables._ID3D11RenderTargetView.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
// ID3D11DepthStencilViewHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11DepthStencilView(ID3D11DepthStencilView * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11DepthStencilViewVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11DepthStencilView);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11DepthStencilView);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11DepthStencilView");
}
template <> inline void RealToHooked11<ID3D11DepthStencilView>(ID3D11DepthStencilView * p)
{
    return RealToHooked11_ID3D11DepthStencilView( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DepthStencilView_QueryInterface_Hooked(ID3D11DepthStencilView * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11DepthStencilView::QueryInterface");
    return g_D3D11OriginVTables._ID3D11DepthStencilView.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11DepthStencilView_AddRef_Hooked(ID3D11DepthStencilView * ptr)
{
    calltrace::AutoTrace trace("ID3D11DepthStencilView::AddRef");
    return g_D3D11OriginVTables._ID3D11DepthStencilView.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11DepthStencilView_Release_Hooked(ID3D11DepthStencilView * ptr)
{
    calltrace::AutoTrace trace("ID3D11DepthStencilView::Release");
    return g_D3D11OriginVTables._ID3D11DepthStencilView.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DepthStencilView_GetDevice_Hooked(ID3D11DepthStencilView * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11DepthStencilView::GetDevice");
    return g_D3D11OriginVTables._ID3D11DepthStencilView.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DepthStencilView_GetPrivateData_Hooked(ID3D11DepthStencilView * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11DepthStencilView::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11DepthStencilView.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DepthStencilView_SetPrivateData_Hooked(ID3D11DepthStencilView * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11DepthStencilView::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11DepthStencilView.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DepthStencilView_SetPrivateDataInterface_Hooked(ID3D11DepthStencilView * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11DepthStencilView::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11DepthStencilView.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DepthStencilView_GetResource_Hooked(ID3D11DepthStencilView * ptr, _Out_  ID3D11Resource ** ppResource)
{
    calltrace::AutoTrace trace("ID3D11DepthStencilView::GetResource");
    return g_D3D11OriginVTables._ID3D11DepthStencilView.GetResource(ptr, ppResource);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DepthStencilView_GetDesc_Hooked(ID3D11DepthStencilView * ptr, _Out_  D3D11_DEPTH_STENCIL_VIEW_DESC * pDesc)
{
    calltrace::AutoTrace trace("ID3D11DepthStencilView::GetDesc");
    return g_D3D11OriginVTables._ID3D11DepthStencilView.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
// ID3D11UnorderedAccessViewHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11UnorderedAccessView(ID3D11UnorderedAccessView * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11UnorderedAccessViewVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11UnorderedAccessView);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11UnorderedAccessView);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11UnorderedAccessView");
}
template <> inline void RealToHooked11<ID3D11UnorderedAccessView>(ID3D11UnorderedAccessView * p)
{
    return RealToHooked11_ID3D11UnorderedAccessView( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11UnorderedAccessView_QueryInterface_Hooked(ID3D11UnorderedAccessView * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11UnorderedAccessView::QueryInterface");
    return g_D3D11OriginVTables._ID3D11UnorderedAccessView.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11UnorderedAccessView_AddRef_Hooked(ID3D11UnorderedAccessView * ptr)
{
    calltrace::AutoTrace trace("ID3D11UnorderedAccessView::AddRef");
    return g_D3D11OriginVTables._ID3D11UnorderedAccessView.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11UnorderedAccessView_Release_Hooked(ID3D11UnorderedAccessView * ptr)
{
    calltrace::AutoTrace trace("ID3D11UnorderedAccessView::Release");
    return g_D3D11OriginVTables._ID3D11UnorderedAccessView.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11UnorderedAccessView_GetDevice_Hooked(ID3D11UnorderedAccessView * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11UnorderedAccessView::GetDevice");
    return g_D3D11OriginVTables._ID3D11UnorderedAccessView.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11UnorderedAccessView_GetPrivateData_Hooked(ID3D11UnorderedAccessView * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11UnorderedAccessView::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11UnorderedAccessView.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11UnorderedAccessView_SetPrivateData_Hooked(ID3D11UnorderedAccessView * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11UnorderedAccessView::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11UnorderedAccessView.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11UnorderedAccessView_SetPrivateDataInterface_Hooked(ID3D11UnorderedAccessView * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11UnorderedAccessView::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11UnorderedAccessView.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11UnorderedAccessView_GetResource_Hooked(ID3D11UnorderedAccessView * ptr, _Out_  ID3D11Resource ** ppResource)
{
    calltrace::AutoTrace trace("ID3D11UnorderedAccessView::GetResource");
    return g_D3D11OriginVTables._ID3D11UnorderedAccessView.GetResource(ptr, ppResource);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11UnorderedAccessView_GetDesc_Hooked(ID3D11UnorderedAccessView * ptr, _Out_  D3D11_UNORDERED_ACCESS_VIEW_DESC * pDesc)
{
    calltrace::AutoTrace trace("ID3D11UnorderedAccessView::GetDesc");
    return g_D3D11OriginVTables._ID3D11UnorderedAccessView.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
// ID3D11VertexShaderHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11VertexShader(ID3D11VertexShader * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11VertexShaderVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11VertexShader);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11VertexShader);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11VertexShader");
}
template <> inline void RealToHooked11<ID3D11VertexShader>(ID3D11VertexShader * p)
{
    return RealToHooked11_ID3D11VertexShader( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VertexShader_QueryInterface_Hooked(ID3D11VertexShader * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11VertexShader::QueryInterface");
    return g_D3D11OriginVTables._ID3D11VertexShader.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11VertexShader_AddRef_Hooked(ID3D11VertexShader * ptr)
{
    calltrace::AutoTrace trace("ID3D11VertexShader::AddRef");
    return g_D3D11OriginVTables._ID3D11VertexShader.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11VertexShader_Release_Hooked(ID3D11VertexShader * ptr)
{
    calltrace::AutoTrace trace("ID3D11VertexShader::Release");
    return g_D3D11OriginVTables._ID3D11VertexShader.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VertexShader_GetDevice_Hooked(ID3D11VertexShader * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11VertexShader::GetDevice");
    return g_D3D11OriginVTables._ID3D11VertexShader.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VertexShader_GetPrivateData_Hooked(ID3D11VertexShader * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11VertexShader::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11VertexShader.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VertexShader_SetPrivateData_Hooked(ID3D11VertexShader * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11VertexShader::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11VertexShader.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VertexShader_SetPrivateDataInterface_Hooked(ID3D11VertexShader * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11VertexShader::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11VertexShader.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
// ID3D11HullShaderHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11HullShader(ID3D11HullShader * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11HullShaderVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11HullShader);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11HullShader);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11HullShader");
}
template <> inline void RealToHooked11<ID3D11HullShader>(ID3D11HullShader * p)
{
    return RealToHooked11_ID3D11HullShader( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11HullShader_QueryInterface_Hooked(ID3D11HullShader * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11HullShader::QueryInterface");
    return g_D3D11OriginVTables._ID3D11HullShader.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11HullShader_AddRef_Hooked(ID3D11HullShader * ptr)
{
    calltrace::AutoTrace trace("ID3D11HullShader::AddRef");
    return g_D3D11OriginVTables._ID3D11HullShader.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11HullShader_Release_Hooked(ID3D11HullShader * ptr)
{
    calltrace::AutoTrace trace("ID3D11HullShader::Release");
    return g_D3D11OriginVTables._ID3D11HullShader.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11HullShader_GetDevice_Hooked(ID3D11HullShader * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11HullShader::GetDevice");
    return g_D3D11OriginVTables._ID3D11HullShader.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11HullShader_GetPrivateData_Hooked(ID3D11HullShader * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11HullShader::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11HullShader.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11HullShader_SetPrivateData_Hooked(ID3D11HullShader * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11HullShader::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11HullShader.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11HullShader_SetPrivateDataInterface_Hooked(ID3D11HullShader * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11HullShader::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11HullShader.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
// ID3D11DomainShaderHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11DomainShader(ID3D11DomainShader * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11DomainShaderVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11DomainShader);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11DomainShader);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11DomainShader");
}
template <> inline void RealToHooked11<ID3D11DomainShader>(ID3D11DomainShader * p)
{
    return RealToHooked11_ID3D11DomainShader( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DomainShader_QueryInterface_Hooked(ID3D11DomainShader * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11DomainShader::QueryInterface");
    return g_D3D11OriginVTables._ID3D11DomainShader.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11DomainShader_AddRef_Hooked(ID3D11DomainShader * ptr)
{
    calltrace::AutoTrace trace("ID3D11DomainShader::AddRef");
    return g_D3D11OriginVTables._ID3D11DomainShader.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11DomainShader_Release_Hooked(ID3D11DomainShader * ptr)
{
    calltrace::AutoTrace trace("ID3D11DomainShader::Release");
    return g_D3D11OriginVTables._ID3D11DomainShader.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DomainShader_GetDevice_Hooked(ID3D11DomainShader * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11DomainShader::GetDevice");
    return g_D3D11OriginVTables._ID3D11DomainShader.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DomainShader_GetPrivateData_Hooked(ID3D11DomainShader * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11DomainShader::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11DomainShader.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DomainShader_SetPrivateData_Hooked(ID3D11DomainShader * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11DomainShader::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11DomainShader.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DomainShader_SetPrivateDataInterface_Hooked(ID3D11DomainShader * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11DomainShader::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11DomainShader.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
// ID3D11GeometryShaderHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11GeometryShader(ID3D11GeometryShader * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11GeometryShaderVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11GeometryShader);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11GeometryShader);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11GeometryShader");
}
template <> inline void RealToHooked11<ID3D11GeometryShader>(ID3D11GeometryShader * p)
{
    return RealToHooked11_ID3D11GeometryShader( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11GeometryShader_QueryInterface_Hooked(ID3D11GeometryShader * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11GeometryShader::QueryInterface");
    return g_D3D11OriginVTables._ID3D11GeometryShader.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11GeometryShader_AddRef_Hooked(ID3D11GeometryShader * ptr)
{
    calltrace::AutoTrace trace("ID3D11GeometryShader::AddRef");
    return g_D3D11OriginVTables._ID3D11GeometryShader.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11GeometryShader_Release_Hooked(ID3D11GeometryShader * ptr)
{
    calltrace::AutoTrace trace("ID3D11GeometryShader::Release");
    return g_D3D11OriginVTables._ID3D11GeometryShader.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11GeometryShader_GetDevice_Hooked(ID3D11GeometryShader * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11GeometryShader::GetDevice");
    return g_D3D11OriginVTables._ID3D11GeometryShader.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11GeometryShader_GetPrivateData_Hooked(ID3D11GeometryShader * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11GeometryShader::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11GeometryShader.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11GeometryShader_SetPrivateData_Hooked(ID3D11GeometryShader * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11GeometryShader::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11GeometryShader.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11GeometryShader_SetPrivateDataInterface_Hooked(ID3D11GeometryShader * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11GeometryShader::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11GeometryShader.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
// ID3D11PixelShaderHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11PixelShader(ID3D11PixelShader * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11PixelShaderVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11PixelShader);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11PixelShader);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11PixelShader");
}
template <> inline void RealToHooked11<ID3D11PixelShader>(ID3D11PixelShader * p)
{
    return RealToHooked11_ID3D11PixelShader( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11PixelShader_QueryInterface_Hooked(ID3D11PixelShader * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11PixelShader::QueryInterface");
    return g_D3D11OriginVTables._ID3D11PixelShader.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11PixelShader_AddRef_Hooked(ID3D11PixelShader * ptr)
{
    calltrace::AutoTrace trace("ID3D11PixelShader::AddRef");
    return g_D3D11OriginVTables._ID3D11PixelShader.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11PixelShader_Release_Hooked(ID3D11PixelShader * ptr)
{
    calltrace::AutoTrace trace("ID3D11PixelShader::Release");
    return g_D3D11OriginVTables._ID3D11PixelShader.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11PixelShader_GetDevice_Hooked(ID3D11PixelShader * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11PixelShader::GetDevice");
    return g_D3D11OriginVTables._ID3D11PixelShader.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11PixelShader_GetPrivateData_Hooked(ID3D11PixelShader * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11PixelShader::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11PixelShader.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11PixelShader_SetPrivateData_Hooked(ID3D11PixelShader * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11PixelShader::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11PixelShader.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11PixelShader_SetPrivateDataInterface_Hooked(ID3D11PixelShader * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11PixelShader::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11PixelShader.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
// ID3D11ComputeShaderHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11ComputeShader(ID3D11ComputeShader * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11ComputeShaderVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11ComputeShader);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11ComputeShader);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11ComputeShader");
}
template <> inline void RealToHooked11<ID3D11ComputeShader>(ID3D11ComputeShader * p)
{
    return RealToHooked11_ID3D11ComputeShader( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11ComputeShader_QueryInterface_Hooked(ID3D11ComputeShader * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11ComputeShader::QueryInterface");
    return g_D3D11OriginVTables._ID3D11ComputeShader.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11ComputeShader_AddRef_Hooked(ID3D11ComputeShader * ptr)
{
    calltrace::AutoTrace trace("ID3D11ComputeShader::AddRef");
    return g_D3D11OriginVTables._ID3D11ComputeShader.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11ComputeShader_Release_Hooked(ID3D11ComputeShader * ptr)
{
    calltrace::AutoTrace trace("ID3D11ComputeShader::Release");
    return g_D3D11OriginVTables._ID3D11ComputeShader.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11ComputeShader_GetDevice_Hooked(ID3D11ComputeShader * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11ComputeShader::GetDevice");
    return g_D3D11OriginVTables._ID3D11ComputeShader.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11ComputeShader_GetPrivateData_Hooked(ID3D11ComputeShader * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11ComputeShader::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11ComputeShader.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11ComputeShader_SetPrivateData_Hooked(ID3D11ComputeShader * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11ComputeShader::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11ComputeShader.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11ComputeShader_SetPrivateDataInterface_Hooked(ID3D11ComputeShader * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11ComputeShader::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11ComputeShader.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
// ID3D11InputLayoutHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11InputLayout(ID3D11InputLayout * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11InputLayoutVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11InputLayout);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11InputLayout);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11InputLayout");
}
template <> inline void RealToHooked11<ID3D11InputLayout>(ID3D11InputLayout * p)
{
    return RealToHooked11_ID3D11InputLayout( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11InputLayout_QueryInterface_Hooked(ID3D11InputLayout * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11InputLayout::QueryInterface");
    return g_D3D11OriginVTables._ID3D11InputLayout.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11InputLayout_AddRef_Hooked(ID3D11InputLayout * ptr)
{
    calltrace::AutoTrace trace("ID3D11InputLayout::AddRef");
    return g_D3D11OriginVTables._ID3D11InputLayout.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11InputLayout_Release_Hooked(ID3D11InputLayout * ptr)
{
    calltrace::AutoTrace trace("ID3D11InputLayout::Release");
    return g_D3D11OriginVTables._ID3D11InputLayout.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11InputLayout_GetDevice_Hooked(ID3D11InputLayout * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11InputLayout::GetDevice");
    return g_D3D11OriginVTables._ID3D11InputLayout.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11InputLayout_GetPrivateData_Hooked(ID3D11InputLayout * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11InputLayout::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11InputLayout.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11InputLayout_SetPrivateData_Hooked(ID3D11InputLayout * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11InputLayout::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11InputLayout.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11InputLayout_SetPrivateDataInterface_Hooked(ID3D11InputLayout * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11InputLayout::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11InputLayout.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
// ID3D11SamplerStateHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11SamplerState(ID3D11SamplerState * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11SamplerStateVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11SamplerState);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11SamplerState);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11SamplerState");
}
template <> inline void RealToHooked11<ID3D11SamplerState>(ID3D11SamplerState * p)
{
    return RealToHooked11_ID3D11SamplerState( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11SamplerState_QueryInterface_Hooked(ID3D11SamplerState * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11SamplerState::QueryInterface");
    return g_D3D11OriginVTables._ID3D11SamplerState.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11SamplerState_AddRef_Hooked(ID3D11SamplerState * ptr)
{
    calltrace::AutoTrace trace("ID3D11SamplerState::AddRef");
    return g_D3D11OriginVTables._ID3D11SamplerState.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11SamplerState_Release_Hooked(ID3D11SamplerState * ptr)
{
    calltrace::AutoTrace trace("ID3D11SamplerState::Release");
    return g_D3D11OriginVTables._ID3D11SamplerState.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11SamplerState_GetDevice_Hooked(ID3D11SamplerState * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11SamplerState::GetDevice");
    return g_D3D11OriginVTables._ID3D11SamplerState.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11SamplerState_GetPrivateData_Hooked(ID3D11SamplerState * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11SamplerState::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11SamplerState.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11SamplerState_SetPrivateData_Hooked(ID3D11SamplerState * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11SamplerState::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11SamplerState.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11SamplerState_SetPrivateDataInterface_Hooked(ID3D11SamplerState * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11SamplerState::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11SamplerState.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11SamplerState_GetDesc_Hooked(ID3D11SamplerState * ptr, _Out_  D3D11_SAMPLER_DESC * pDesc)
{
    calltrace::AutoTrace trace("ID3D11SamplerState::GetDesc");
    return g_D3D11OriginVTables._ID3D11SamplerState.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
// ID3D11AsynchronousHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11Asynchronous(ID3D11Asynchronous * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11AsynchronousVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11Asynchronous);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11Asynchronous);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11Asynchronous");
}
template <> inline void RealToHooked11<ID3D11Asynchronous>(ID3D11Asynchronous * p)
{
    return RealToHooked11_ID3D11Asynchronous( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Asynchronous_QueryInterface_Hooked(ID3D11Asynchronous * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11Asynchronous::QueryInterface");
    return g_D3D11OriginVTables._ID3D11Asynchronous.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11Asynchronous_AddRef_Hooked(ID3D11Asynchronous * ptr)
{
    calltrace::AutoTrace trace("ID3D11Asynchronous::AddRef");
    return g_D3D11OriginVTables._ID3D11Asynchronous.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11Asynchronous_Release_Hooked(ID3D11Asynchronous * ptr)
{
    calltrace::AutoTrace trace("ID3D11Asynchronous::Release");
    return g_D3D11OriginVTables._ID3D11Asynchronous.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Asynchronous_GetDevice_Hooked(ID3D11Asynchronous * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11Asynchronous::GetDevice");
    return g_D3D11OriginVTables._ID3D11Asynchronous.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Asynchronous_GetPrivateData_Hooked(ID3D11Asynchronous * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11Asynchronous::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11Asynchronous.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Asynchronous_SetPrivateData_Hooked(ID3D11Asynchronous * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11Asynchronous::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11Asynchronous.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Asynchronous_SetPrivateDataInterface_Hooked(ID3D11Asynchronous * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11Asynchronous::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11Asynchronous.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline UINT STDMETHODCALLTYPE ID3D11Asynchronous_GetDataSize_Hooked(ID3D11Asynchronous * ptr)
{
    calltrace::AutoTrace trace("ID3D11Asynchronous::GetDataSize");
    return g_D3D11OriginVTables._ID3D11Asynchronous.GetDataSize(ptr);
}

// -----------------------------------------------------------------------------
// ID3D11QueryHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11Query(ID3D11Query * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11QueryVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11Query);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11Query);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11Query");
}
template <> inline void RealToHooked11<ID3D11Query>(ID3D11Query * p)
{
    return RealToHooked11_ID3D11Query( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Query_QueryInterface_Hooked(ID3D11Query * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11Query::QueryInterface");
    return g_D3D11OriginVTables._ID3D11Query.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11Query_AddRef_Hooked(ID3D11Query * ptr)
{
    calltrace::AutoTrace trace("ID3D11Query::AddRef");
    return g_D3D11OriginVTables._ID3D11Query.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11Query_Release_Hooked(ID3D11Query * ptr)
{
    calltrace::AutoTrace trace("ID3D11Query::Release");
    return g_D3D11OriginVTables._ID3D11Query.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Query_GetDevice_Hooked(ID3D11Query * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11Query::GetDevice");
    return g_D3D11OriginVTables._ID3D11Query.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Query_GetPrivateData_Hooked(ID3D11Query * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11Query::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11Query.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Query_SetPrivateData_Hooked(ID3D11Query * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11Query::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11Query.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Query_SetPrivateDataInterface_Hooked(ID3D11Query * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11Query::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11Query.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline UINT STDMETHODCALLTYPE ID3D11Query_GetDataSize_Hooked(ID3D11Query * ptr)
{
    calltrace::AutoTrace trace("ID3D11Query::GetDataSize");
    return g_D3D11OriginVTables._ID3D11Query.GetDataSize(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Query_GetDesc_Hooked(ID3D11Query * ptr, _Out_  D3D11_QUERY_DESC * pDesc)
{
    calltrace::AutoTrace trace("ID3D11Query::GetDesc");
    return g_D3D11OriginVTables._ID3D11Query.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
// ID3D11PredicateHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11Predicate(ID3D11Predicate * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11PredicateVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11Predicate);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11Predicate);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11Predicate");
}
template <> inline void RealToHooked11<ID3D11Predicate>(ID3D11Predicate * p)
{
    return RealToHooked11_ID3D11Predicate( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Predicate_QueryInterface_Hooked(ID3D11Predicate * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11Predicate::QueryInterface");
    return g_D3D11OriginVTables._ID3D11Predicate.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11Predicate_AddRef_Hooked(ID3D11Predicate * ptr)
{
    calltrace::AutoTrace trace("ID3D11Predicate::AddRef");
    return g_D3D11OriginVTables._ID3D11Predicate.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11Predicate_Release_Hooked(ID3D11Predicate * ptr)
{
    calltrace::AutoTrace trace("ID3D11Predicate::Release");
    return g_D3D11OriginVTables._ID3D11Predicate.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Predicate_GetDevice_Hooked(ID3D11Predicate * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11Predicate::GetDevice");
    return g_D3D11OriginVTables._ID3D11Predicate.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Predicate_GetPrivateData_Hooked(ID3D11Predicate * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11Predicate::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11Predicate.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Predicate_SetPrivateData_Hooked(ID3D11Predicate * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11Predicate::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11Predicate.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Predicate_SetPrivateDataInterface_Hooked(ID3D11Predicate * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11Predicate::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11Predicate.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline UINT STDMETHODCALLTYPE ID3D11Predicate_GetDataSize_Hooked(ID3D11Predicate * ptr)
{
    calltrace::AutoTrace trace("ID3D11Predicate::GetDataSize");
    return g_D3D11OriginVTables._ID3D11Predicate.GetDataSize(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Predicate_GetDesc_Hooked(ID3D11Predicate * ptr, _Out_  D3D11_QUERY_DESC * pDesc)
{
    calltrace::AutoTrace trace("ID3D11Predicate::GetDesc");
    return g_D3D11OriginVTables._ID3D11Predicate.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
// ID3D11CounterHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11Counter(ID3D11Counter * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11CounterVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11Counter);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11Counter);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11Counter");
}
template <> inline void RealToHooked11<ID3D11Counter>(ID3D11Counter * p)
{
    return RealToHooked11_ID3D11Counter( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Counter_QueryInterface_Hooked(ID3D11Counter * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11Counter::QueryInterface");
    return g_D3D11OriginVTables._ID3D11Counter.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11Counter_AddRef_Hooked(ID3D11Counter * ptr)
{
    calltrace::AutoTrace trace("ID3D11Counter::AddRef");
    return g_D3D11OriginVTables._ID3D11Counter.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11Counter_Release_Hooked(ID3D11Counter * ptr)
{
    calltrace::AutoTrace trace("ID3D11Counter::Release");
    return g_D3D11OriginVTables._ID3D11Counter.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Counter_GetDevice_Hooked(ID3D11Counter * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11Counter::GetDevice");
    return g_D3D11OriginVTables._ID3D11Counter.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Counter_GetPrivateData_Hooked(ID3D11Counter * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11Counter::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11Counter.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Counter_SetPrivateData_Hooked(ID3D11Counter * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11Counter::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11Counter.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Counter_SetPrivateDataInterface_Hooked(ID3D11Counter * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11Counter::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11Counter.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline UINT STDMETHODCALLTYPE ID3D11Counter_GetDataSize_Hooked(ID3D11Counter * ptr)
{
    calltrace::AutoTrace trace("ID3D11Counter::GetDataSize");
    return g_D3D11OriginVTables._ID3D11Counter.GetDataSize(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Counter_GetDesc_Hooked(ID3D11Counter * ptr, _Out_  D3D11_COUNTER_DESC * pDesc)
{
    calltrace::AutoTrace trace("ID3D11Counter::GetDesc");
    return g_D3D11OriginVTables._ID3D11Counter.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
// ID3D11ClassInstanceHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11ClassInstance(ID3D11ClassInstance * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11ClassInstanceVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11ClassInstance);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11ClassInstance);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11ClassInstance");
}
template <> inline void RealToHooked11<ID3D11ClassInstance>(ID3D11ClassInstance * p)
{
    return RealToHooked11_ID3D11ClassInstance( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11ClassInstance_QueryInterface_Hooked(ID3D11ClassInstance * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11ClassInstance::QueryInterface");
    return g_D3D11OriginVTables._ID3D11ClassInstance.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11ClassInstance_AddRef_Hooked(ID3D11ClassInstance * ptr)
{
    calltrace::AutoTrace trace("ID3D11ClassInstance::AddRef");
    return g_D3D11OriginVTables._ID3D11ClassInstance.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11ClassInstance_Release_Hooked(ID3D11ClassInstance * ptr)
{
    calltrace::AutoTrace trace("ID3D11ClassInstance::Release");
    return g_D3D11OriginVTables._ID3D11ClassInstance.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11ClassInstance_GetDevice_Hooked(ID3D11ClassInstance * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11ClassInstance::GetDevice");
    return g_D3D11OriginVTables._ID3D11ClassInstance.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11ClassInstance_GetPrivateData_Hooked(ID3D11ClassInstance * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11ClassInstance::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11ClassInstance.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11ClassInstance_SetPrivateData_Hooked(ID3D11ClassInstance * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11ClassInstance::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11ClassInstance.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11ClassInstance_SetPrivateDataInterface_Hooked(ID3D11ClassInstance * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11ClassInstance::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11ClassInstance.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11ClassInstance_GetClassLinkage_Hooked(ID3D11ClassInstance * ptr, _Out_  ID3D11ClassLinkage ** ppLinkage)
{
    calltrace::AutoTrace trace("ID3D11ClassInstance::GetClassLinkage");
    return g_D3D11OriginVTables._ID3D11ClassInstance.GetClassLinkage(ptr, ppLinkage);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11ClassInstance_GetDesc_Hooked(ID3D11ClassInstance * ptr, _Out_  D3D11_CLASS_INSTANCE_DESC * pDesc)
{
    calltrace::AutoTrace trace("ID3D11ClassInstance::GetDesc");
    return g_D3D11OriginVTables._ID3D11ClassInstance.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11ClassInstance_GetInstanceName_Hooked(ID3D11ClassInstance * ptr, _Out_writes_opt_(*pBufferLength)  LPSTR pInstanceName, _Inout_  SIZE_T * pBufferLength)
{
    calltrace::AutoTrace trace("ID3D11ClassInstance::GetInstanceName");
    return g_D3D11OriginVTables._ID3D11ClassInstance.GetInstanceName(ptr, pInstanceName, pBufferLength);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11ClassInstance_GetTypeName_Hooked(ID3D11ClassInstance * ptr, _Out_writes_opt_(*pBufferLength)  LPSTR pTypeName, _Inout_  SIZE_T * pBufferLength)
{
    calltrace::AutoTrace trace("ID3D11ClassInstance::GetTypeName");
    return g_D3D11OriginVTables._ID3D11ClassInstance.GetTypeName(ptr, pTypeName, pBufferLength);
}

// -----------------------------------------------------------------------------
// ID3D11ClassLinkageHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11ClassLinkage(ID3D11ClassLinkage * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11ClassLinkageVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11ClassLinkage);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11ClassLinkage);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11ClassLinkage");
}
template <> inline void RealToHooked11<ID3D11ClassLinkage>(ID3D11ClassLinkage * p)
{
    return RealToHooked11_ID3D11ClassLinkage( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11ClassLinkage_QueryInterface_Hooked(ID3D11ClassLinkage * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11ClassLinkage::QueryInterface");
    return g_D3D11OriginVTables._ID3D11ClassLinkage.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11ClassLinkage_AddRef_Hooked(ID3D11ClassLinkage * ptr)
{
    calltrace::AutoTrace trace("ID3D11ClassLinkage::AddRef");
    return g_D3D11OriginVTables._ID3D11ClassLinkage.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11ClassLinkage_Release_Hooked(ID3D11ClassLinkage * ptr)
{
    calltrace::AutoTrace trace("ID3D11ClassLinkage::Release");
    return g_D3D11OriginVTables._ID3D11ClassLinkage.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11ClassLinkage_GetDevice_Hooked(ID3D11ClassLinkage * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11ClassLinkage::GetDevice");
    return g_D3D11OriginVTables._ID3D11ClassLinkage.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11ClassLinkage_GetPrivateData_Hooked(ID3D11ClassLinkage * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11ClassLinkage::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11ClassLinkage.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11ClassLinkage_SetPrivateData_Hooked(ID3D11ClassLinkage * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11ClassLinkage::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11ClassLinkage.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11ClassLinkage_SetPrivateDataInterface_Hooked(ID3D11ClassLinkage * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11ClassLinkage::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11ClassLinkage.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11ClassLinkage_GetClassInstance_Hooked(ID3D11ClassLinkage * ptr, _In_  LPCSTR pClassInstanceName, _In_  UINT InstanceIndex, _Out_  ID3D11ClassInstance ** ppInstance)
{
    calltrace::AutoTrace trace("ID3D11ClassLinkage::GetClassInstance");
    return g_D3D11OriginVTables._ID3D11ClassLinkage.GetClassInstance(ptr, pClassInstanceName, InstanceIndex, ppInstance);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11ClassLinkage_CreateClassInstance_Hooked(ID3D11ClassLinkage * ptr, _In_  LPCSTR pClassTypeName, _In_  UINT ConstantBufferOffset, _In_  UINT ConstantVectorOffset, _In_  UINT TextureOffset, _In_  UINT SamplerOffset, _Out_  ID3D11ClassInstance ** ppInstance)
{
    calltrace::AutoTrace trace("ID3D11ClassLinkage::CreateClassInstance");
    return g_D3D11OriginVTables._ID3D11ClassLinkage.CreateClassInstance(ptr, pClassTypeName, ConstantBufferOffset, ConstantVectorOffset, TextureOffset, SamplerOffset, ppInstance);
}

// -----------------------------------------------------------------------------
// ID3D11CommandListHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11CommandList(ID3D11CommandList * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11CommandListVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11CommandList);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11CommandList);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11CommandList");
}
template <> inline void RealToHooked11<ID3D11CommandList>(ID3D11CommandList * p)
{
    return RealToHooked11_ID3D11CommandList( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11CommandList_QueryInterface_Hooked(ID3D11CommandList * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11CommandList::QueryInterface");
    return g_D3D11OriginVTables._ID3D11CommandList.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11CommandList_AddRef_Hooked(ID3D11CommandList * ptr)
{
    calltrace::AutoTrace trace("ID3D11CommandList::AddRef");
    return g_D3D11OriginVTables._ID3D11CommandList.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11CommandList_Release_Hooked(ID3D11CommandList * ptr)
{
    calltrace::AutoTrace trace("ID3D11CommandList::Release");
    return g_D3D11OriginVTables._ID3D11CommandList.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11CommandList_GetDevice_Hooked(ID3D11CommandList * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11CommandList::GetDevice");
    return g_D3D11OriginVTables._ID3D11CommandList.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11CommandList_GetPrivateData_Hooked(ID3D11CommandList * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11CommandList::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11CommandList.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11CommandList_SetPrivateData_Hooked(ID3D11CommandList * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11CommandList::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11CommandList.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11CommandList_SetPrivateDataInterface_Hooked(ID3D11CommandList * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11CommandList::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11CommandList.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline UINT STDMETHODCALLTYPE ID3D11CommandList_GetContextFlags_Hooked(ID3D11CommandList * ptr)
{
    calltrace::AutoTrace trace("ID3D11CommandList::GetContextFlags");
    return g_D3D11OriginVTables._ID3D11CommandList.GetContextFlags(ptr);
}

// -----------------------------------------------------------------------------
// ID3D11DeviceContextHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11DeviceContext(ID3D11DeviceContext * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11DeviceContextVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11DeviceContext);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11DeviceContext);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11DeviceContext");
}
template <> inline void RealToHooked11<ID3D11DeviceContext>(ID3D11DeviceContext * p)
{
    return RealToHooked11_ID3D11DeviceContext( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DeviceContext_QueryInterface_Hooked(ID3D11DeviceContext * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::QueryInterface");
    return g_D3D11OriginVTables._ID3D11DeviceContext.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11DeviceContext_AddRef_Hooked(ID3D11DeviceContext * ptr)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::AddRef");
    return g_D3D11OriginVTables._ID3D11DeviceContext.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11DeviceContext_Release_Hooked(ID3D11DeviceContext * ptr)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::Release");
    return g_D3D11OriginVTables._ID3D11DeviceContext.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_GetDevice_Hooked(ID3D11DeviceContext * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::GetDevice");
    return g_D3D11OriginVTables._ID3D11DeviceContext.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DeviceContext_GetPrivateData_Hooked(ID3D11DeviceContext * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11DeviceContext.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DeviceContext_SetPrivateData_Hooked(ID3D11DeviceContext * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11DeviceContext.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DeviceContext_SetPrivateDataInterface_Hooked(ID3D11DeviceContext * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11DeviceContext.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_VSSetConstantBuffers_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _In_reads_opt_(NumBuffers)  ID3D11Buffer *const * ppConstantBuffers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::VSSetConstantBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext.VSSetConstantBuffers(ptr, StartSlot, NumBuffers, ppConstantBuffers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_PSSetShaderResources_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews, _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const * ppShaderResourceViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::PSSetShaderResources");
    return g_D3D11OriginVTables._ID3D11DeviceContext.PSSetShaderResources(ptr, StartSlot, NumViews, ppShaderResourceViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_PSSetShader_Hooked(ID3D11DeviceContext * ptr, _In_opt_  ID3D11PixelShader * pPixelShader, _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const * ppClassInstances, UINT NumClassInstances)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::PSSetShader");
    return g_D3D11OriginVTables._ID3D11DeviceContext.PSSetShader(ptr, pPixelShader, ppClassInstances, NumClassInstances);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_PSSetSamplers_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers, _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const * ppSamplers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::PSSetSamplers");
    return g_D3D11OriginVTables._ID3D11DeviceContext.PSSetSamplers(ptr, StartSlot, NumSamplers, ppSamplers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_VSSetShader_Hooked(ID3D11DeviceContext * ptr, _In_opt_  ID3D11VertexShader * pVertexShader, _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const * ppClassInstances, UINT NumClassInstances)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::VSSetShader");
    return g_D3D11OriginVTables._ID3D11DeviceContext.VSSetShader(ptr, pVertexShader, ppClassInstances, NumClassInstances);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_DrawIndexed_Hooked(ID3D11DeviceContext * ptr, _In_  UINT IndexCount, _In_  UINT StartIndexLocation, _In_  INT BaseVertexLocation)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::DrawIndexed");
    return g_D3D11OriginVTables._ID3D11DeviceContext.DrawIndexed(ptr, IndexCount, StartIndexLocation, BaseVertexLocation);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_Draw_Hooked(ID3D11DeviceContext * ptr, _In_  UINT VertexCount, _In_  UINT StartVertexLocation)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::Draw");
    return g_D3D11OriginVTables._ID3D11DeviceContext.Draw(ptr, VertexCount, StartVertexLocation);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DeviceContext_Map_Hooked(ID3D11DeviceContext * ptr, _In_  ID3D11Resource * pResource, _In_  UINT Subresource, _In_  D3D11_MAP MapType, _In_  UINT MapFlags, _Out_  D3D11_MAPPED_SUBRESOURCE * pMappedResource)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::Map");
    return g_D3D11OriginVTables._ID3D11DeviceContext.Map(ptr, pResource, Subresource, MapType, MapFlags, pMappedResource);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_Unmap_Hooked(ID3D11DeviceContext * ptr, _In_  ID3D11Resource * pResource, _In_  UINT Subresource)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::Unmap");
    return g_D3D11OriginVTables._ID3D11DeviceContext.Unmap(ptr, pResource, Subresource);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_PSSetConstantBuffers_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _In_reads_opt_(NumBuffers)  ID3D11Buffer *const * ppConstantBuffers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::PSSetConstantBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext.PSSetConstantBuffers(ptr, StartSlot, NumBuffers, ppConstantBuffers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_IASetInputLayout_Hooked(ID3D11DeviceContext * ptr, _In_opt_  ID3D11InputLayout * pInputLayout)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::IASetInputLayout");
    return g_D3D11OriginVTables._ID3D11DeviceContext.IASetInputLayout(ptr, pInputLayout);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_IASetVertexBuffers_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumBuffers, _In_reads_opt_(NumBuffers)  ID3D11Buffer *const * ppVertexBuffers, _In_reads_opt_(NumBuffers)  const UINT * pStrides, _In_reads_opt_(NumBuffers)  const UINT * pOffsets)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::IASetVertexBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext.IASetVertexBuffers(ptr, StartSlot, NumBuffers, ppVertexBuffers, pStrides, pOffsets);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_IASetIndexBuffer_Hooked(ID3D11DeviceContext * ptr, _In_opt_  ID3D11Buffer * pIndexBuffer, _In_  DXGI_FORMAT Format, _In_  UINT Offset)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::IASetIndexBuffer");
    return g_D3D11OriginVTables._ID3D11DeviceContext.IASetIndexBuffer(ptr, pIndexBuffer, Format, Offset);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_DrawIndexedInstanced_Hooked(ID3D11DeviceContext * ptr, _In_  UINT IndexCountPerInstance, _In_  UINT InstanceCount, _In_  UINT StartIndexLocation, _In_  INT BaseVertexLocation, _In_  UINT StartInstanceLocation)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::DrawIndexedInstanced");
    return g_D3D11OriginVTables._ID3D11DeviceContext.DrawIndexedInstanced(ptr, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_DrawInstanced_Hooked(ID3D11DeviceContext * ptr, _In_  UINT VertexCountPerInstance, _In_  UINT InstanceCount, _In_  UINT StartVertexLocation, _In_  UINT StartInstanceLocation)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::DrawInstanced");
    return g_D3D11OriginVTables._ID3D11DeviceContext.DrawInstanced(ptr, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_GSSetConstantBuffers_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _In_reads_opt_(NumBuffers)  ID3D11Buffer *const * ppConstantBuffers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::GSSetConstantBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext.GSSetConstantBuffers(ptr, StartSlot, NumBuffers, ppConstantBuffers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_GSSetShader_Hooked(ID3D11DeviceContext * ptr, _In_opt_  ID3D11GeometryShader * pShader, _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const * ppClassInstances, UINT NumClassInstances)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::GSSetShader");
    return g_D3D11OriginVTables._ID3D11DeviceContext.GSSetShader(ptr, pShader, ppClassInstances, NumClassInstances);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_IASetPrimitiveTopology_Hooked(ID3D11DeviceContext * ptr, _In_  D3D11_PRIMITIVE_TOPOLOGY Topology)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::IASetPrimitiveTopology");
    return g_D3D11OriginVTables._ID3D11DeviceContext.IASetPrimitiveTopology(ptr, Topology);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_VSSetShaderResources_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews, _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const * ppShaderResourceViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::VSSetShaderResources");
    return g_D3D11OriginVTables._ID3D11DeviceContext.VSSetShaderResources(ptr, StartSlot, NumViews, ppShaderResourceViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_VSSetSamplers_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers, _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const * ppSamplers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::VSSetSamplers");
    return g_D3D11OriginVTables._ID3D11DeviceContext.VSSetSamplers(ptr, StartSlot, NumSamplers, ppSamplers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_Begin_Hooked(ID3D11DeviceContext * ptr, _In_  ID3D11Asynchronous * pAsync)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::Begin");
    return g_D3D11OriginVTables._ID3D11DeviceContext.Begin(ptr, pAsync);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_End_Hooked(ID3D11DeviceContext * ptr, _In_  ID3D11Asynchronous * pAsync)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::End");
    return g_D3D11OriginVTables._ID3D11DeviceContext.End(ptr, pAsync);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DeviceContext_GetData_Hooked(ID3D11DeviceContext * ptr, _In_  ID3D11Asynchronous * pAsync, _Out_writes_bytes_opt_( DataSize )  void * pData, _In_  UINT DataSize, _In_  UINT GetDataFlags)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::GetData");
    return g_D3D11OriginVTables._ID3D11DeviceContext.GetData(ptr, pAsync, pData, DataSize, GetDataFlags);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_SetPredication_Hooked(ID3D11DeviceContext * ptr, _In_opt_  ID3D11Predicate * pPredicate, _In_  BOOL PredicateValue)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::SetPredication");
    return g_D3D11OriginVTables._ID3D11DeviceContext.SetPredication(ptr, pPredicate, PredicateValue);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_GSSetShaderResources_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews, _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const * ppShaderResourceViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::GSSetShaderResources");
    return g_D3D11OriginVTables._ID3D11DeviceContext.GSSetShaderResources(ptr, StartSlot, NumViews, ppShaderResourceViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_GSSetSamplers_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers, _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const * ppSamplers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::GSSetSamplers");
    return g_D3D11OriginVTables._ID3D11DeviceContext.GSSetSamplers(ptr, StartSlot, NumSamplers, ppSamplers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_OMSetRenderTargets_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT )  UINT NumViews, _In_reads_opt_(NumViews)  ID3D11RenderTargetView *const * ppRenderTargetViews, _In_opt_  ID3D11DepthStencilView * pDepthStencilView)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::OMSetRenderTargets");
    return g_D3D11OriginVTables._ID3D11DeviceContext.OMSetRenderTargets(ptr, NumViews, ppRenderTargetViews, pDepthStencilView);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_OMSetRenderTargetsAndUnorderedAccessViews_Hooked(ID3D11DeviceContext * ptr, _In_  UINT NumRTVs, _In_reads_opt_(NumRTVs)  ID3D11RenderTargetView *const * ppRenderTargetViews, _In_opt_  ID3D11DepthStencilView * pDepthStencilView, _In_range_( 0, D3D11_1_UAV_SLOT_COUNT - 1 )  UINT UAVStartSlot, _In_  UINT NumUAVs, _In_reads_opt_(NumUAVs)  ID3D11UnorderedAccessView *const * ppUnorderedAccessViews, _In_reads_opt_(NumUAVs)  const UINT * pUAVInitialCounts)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::OMSetRenderTargetsAndUnorderedAccessViews");
    return g_D3D11OriginVTables._ID3D11DeviceContext.OMSetRenderTargetsAndUnorderedAccessViews(ptr, NumRTVs, ppRenderTargetViews, pDepthStencilView, UAVStartSlot, NumUAVs, ppUnorderedAccessViews, pUAVInitialCounts);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_OMSetBlendState_Hooked(ID3D11DeviceContext * ptr, _In_opt_  ID3D11BlendState * pBlendState, _In_opt_  const FLOAT BlendFactor [4], _In_  UINT SampleMask)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::OMSetBlendState");
    return g_D3D11OriginVTables._ID3D11DeviceContext.OMSetBlendState(ptr, pBlendState, BlendFactor, SampleMask);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_OMSetDepthStencilState_Hooked(ID3D11DeviceContext * ptr, _In_opt_  ID3D11DepthStencilState * pDepthStencilState, _In_  UINT StencilRef)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::OMSetDepthStencilState");
    return g_D3D11OriginVTables._ID3D11DeviceContext.OMSetDepthStencilState(ptr, pDepthStencilState, StencilRef);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_SOSetTargets_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_SO_BUFFER_SLOT_COUNT)  UINT NumBuffers, _In_reads_opt_(NumBuffers)  ID3D11Buffer *const * ppSOTargets, _In_reads_opt_(NumBuffers)  const UINT * pOffsets)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::SOSetTargets");
    return g_D3D11OriginVTables._ID3D11DeviceContext.SOSetTargets(ptr, NumBuffers, ppSOTargets, pOffsets);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_DrawAuto_Hooked(ID3D11DeviceContext * ptr)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::DrawAuto");
    return g_D3D11OriginVTables._ID3D11DeviceContext.DrawAuto(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_DrawIndexedInstancedIndirect_Hooked(ID3D11DeviceContext * ptr, _In_  ID3D11Buffer * pBufferForArgs, _In_  UINT AlignedByteOffsetForArgs)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::DrawIndexedInstancedIndirect");
    return g_D3D11OriginVTables._ID3D11DeviceContext.DrawIndexedInstancedIndirect(ptr, pBufferForArgs, AlignedByteOffsetForArgs);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_DrawInstancedIndirect_Hooked(ID3D11DeviceContext * ptr, _In_  ID3D11Buffer * pBufferForArgs, _In_  UINT AlignedByteOffsetForArgs)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::DrawInstancedIndirect");
    return g_D3D11OriginVTables._ID3D11DeviceContext.DrawInstancedIndirect(ptr, pBufferForArgs, AlignedByteOffsetForArgs);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_Dispatch_Hooked(ID3D11DeviceContext * ptr, _In_  UINT ThreadGroupCountX, _In_  UINT ThreadGroupCountY, _In_  UINT ThreadGroupCountZ)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::Dispatch");
    return g_D3D11OriginVTables._ID3D11DeviceContext.Dispatch(ptr, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_DispatchIndirect_Hooked(ID3D11DeviceContext * ptr, _In_  ID3D11Buffer * pBufferForArgs, _In_  UINT AlignedByteOffsetForArgs)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::DispatchIndirect");
    return g_D3D11OriginVTables._ID3D11DeviceContext.DispatchIndirect(ptr, pBufferForArgs, AlignedByteOffsetForArgs);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_RSSetState_Hooked(ID3D11DeviceContext * ptr, _In_opt_  ID3D11RasterizerState * pRasterizerState)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::RSSetState");
    return g_D3D11OriginVTables._ID3D11DeviceContext.RSSetState(ptr, pRasterizerState);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_RSSetViewports_Hooked(ID3D11DeviceContext * ptr, _In_range_(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE)  UINT NumViewports, _In_reads_opt_(NumViewports)  const D3D11_VIEWPORT * pViewports)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::RSSetViewports");
    return g_D3D11OriginVTables._ID3D11DeviceContext.RSSetViewports(ptr, NumViewports, pViewports);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_RSSetScissorRects_Hooked(ID3D11DeviceContext * ptr, _In_range_(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE)  UINT NumRects, _In_reads_opt_(NumRects)  const D3D11_RECT * pRects)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::RSSetScissorRects");
    return g_D3D11OriginVTables._ID3D11DeviceContext.RSSetScissorRects(ptr, NumRects, pRects);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_CopySubresourceRegion_Hooked(ID3D11DeviceContext * ptr, _In_  ID3D11Resource * pDstResource, _In_  UINT DstSubresource, _In_  UINT DstX, _In_  UINT DstY, _In_  UINT DstZ, _In_  ID3D11Resource * pSrcResource, _In_  UINT SrcSubresource, _In_opt_  const D3D11_BOX * pSrcBox)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::CopySubresourceRegion");
    return g_D3D11OriginVTables._ID3D11DeviceContext.CopySubresourceRegion(ptr, pDstResource, DstSubresource, DstX, DstY, DstZ, pSrcResource, SrcSubresource, pSrcBox);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_CopyResource_Hooked(ID3D11DeviceContext * ptr, _In_  ID3D11Resource * pDstResource, _In_  ID3D11Resource * pSrcResource)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::CopyResource");
    return g_D3D11OriginVTables._ID3D11DeviceContext.CopyResource(ptr, pDstResource, pSrcResource);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_UpdateSubresource_Hooked(ID3D11DeviceContext * ptr, _In_  ID3D11Resource * pDstResource, _In_  UINT DstSubresource, _In_opt_  const D3D11_BOX * pDstBox, _In_  const void * pSrcData, _In_  UINT SrcRowPitch, _In_  UINT SrcDepthPitch)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::UpdateSubresource");
    return g_D3D11OriginVTables._ID3D11DeviceContext.UpdateSubresource(ptr, pDstResource, DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_CopyStructureCount_Hooked(ID3D11DeviceContext * ptr, _In_  ID3D11Buffer * pDstBuffer, _In_  UINT DstAlignedByteOffset, _In_  ID3D11UnorderedAccessView * pSrcView)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::CopyStructureCount");
    return g_D3D11OriginVTables._ID3D11DeviceContext.CopyStructureCount(ptr, pDstBuffer, DstAlignedByteOffset, pSrcView);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_ClearRenderTargetView_Hooked(ID3D11DeviceContext * ptr, _In_  ID3D11RenderTargetView * pRenderTargetView, _In_  const FLOAT ColorRGBA [4])
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::ClearRenderTargetView");
    return g_D3D11OriginVTables._ID3D11DeviceContext.ClearRenderTargetView(ptr, pRenderTargetView, ColorRGBA);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_ClearUnorderedAccessViewUint_Hooked(ID3D11DeviceContext * ptr, _In_  ID3D11UnorderedAccessView * pUnorderedAccessView, _In_  const UINT Values [4])
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::ClearUnorderedAccessViewUint");
    return g_D3D11OriginVTables._ID3D11DeviceContext.ClearUnorderedAccessViewUint(ptr, pUnorderedAccessView, Values);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_ClearUnorderedAccessViewFloat_Hooked(ID3D11DeviceContext * ptr, _In_  ID3D11UnorderedAccessView * pUnorderedAccessView, _In_  const FLOAT Values [4])
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::ClearUnorderedAccessViewFloat");
    return g_D3D11OriginVTables._ID3D11DeviceContext.ClearUnorderedAccessViewFloat(ptr, pUnorderedAccessView, Values);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_ClearDepthStencilView_Hooked(ID3D11DeviceContext * ptr, _In_  ID3D11DepthStencilView * pDepthStencilView, _In_  UINT ClearFlags, _In_  FLOAT Depth, _In_  UINT8 Stencil)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::ClearDepthStencilView");
    return g_D3D11OriginVTables._ID3D11DeviceContext.ClearDepthStencilView(ptr, pDepthStencilView, ClearFlags, Depth, Stencil);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_GenerateMips_Hooked(ID3D11DeviceContext * ptr, _In_  ID3D11ShaderResourceView * pShaderResourceView)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::GenerateMips");
    return g_D3D11OriginVTables._ID3D11DeviceContext.GenerateMips(ptr, pShaderResourceView);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_SetResourceMinLOD_Hooked(ID3D11DeviceContext * ptr, _In_  ID3D11Resource * pResource, FLOAT MinLOD)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::SetResourceMinLOD");
    return g_D3D11OriginVTables._ID3D11DeviceContext.SetResourceMinLOD(ptr, pResource, MinLOD);
}

// -----------------------------------------------------------------------------
static inline FLOAT STDMETHODCALLTYPE ID3D11DeviceContext_GetResourceMinLOD_Hooked(ID3D11DeviceContext * ptr, _In_  ID3D11Resource * pResource)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::GetResourceMinLOD");
    return g_D3D11OriginVTables._ID3D11DeviceContext.GetResourceMinLOD(ptr, pResource);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_ResolveSubresource_Hooked(ID3D11DeviceContext * ptr, _In_  ID3D11Resource * pDstResource, _In_  UINT DstSubresource, _In_  ID3D11Resource * pSrcResource, _In_  UINT SrcSubresource, _In_  DXGI_FORMAT Format)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::ResolveSubresource");
    return g_D3D11OriginVTables._ID3D11DeviceContext.ResolveSubresource(ptr, pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_ExecuteCommandList_Hooked(ID3D11DeviceContext * ptr, _In_  ID3D11CommandList * pCommandList, BOOL RestoreContextState)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::ExecuteCommandList");
    return g_D3D11OriginVTables._ID3D11DeviceContext.ExecuteCommandList(ptr, pCommandList, RestoreContextState);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_HSSetShaderResources_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews, _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const * ppShaderResourceViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::HSSetShaderResources");
    return g_D3D11OriginVTables._ID3D11DeviceContext.HSSetShaderResources(ptr, StartSlot, NumViews, ppShaderResourceViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_HSSetShader_Hooked(ID3D11DeviceContext * ptr, _In_opt_  ID3D11HullShader * pHullShader, _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const * ppClassInstances, UINT NumClassInstances)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::HSSetShader");
    return g_D3D11OriginVTables._ID3D11DeviceContext.HSSetShader(ptr, pHullShader, ppClassInstances, NumClassInstances);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_HSSetSamplers_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers, _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const * ppSamplers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::HSSetSamplers");
    return g_D3D11OriginVTables._ID3D11DeviceContext.HSSetSamplers(ptr, StartSlot, NumSamplers, ppSamplers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_HSSetConstantBuffers_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _In_reads_opt_(NumBuffers)  ID3D11Buffer *const * ppConstantBuffers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::HSSetConstantBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext.HSSetConstantBuffers(ptr, StartSlot, NumBuffers, ppConstantBuffers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_DSSetShaderResources_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews, _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const * ppShaderResourceViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::DSSetShaderResources");
    return g_D3D11OriginVTables._ID3D11DeviceContext.DSSetShaderResources(ptr, StartSlot, NumViews, ppShaderResourceViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_DSSetShader_Hooked(ID3D11DeviceContext * ptr, _In_opt_  ID3D11DomainShader * pDomainShader, _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const * ppClassInstances, UINT NumClassInstances)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::DSSetShader");
    return g_D3D11OriginVTables._ID3D11DeviceContext.DSSetShader(ptr, pDomainShader, ppClassInstances, NumClassInstances);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_DSSetSamplers_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers, _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const * ppSamplers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::DSSetSamplers");
    return g_D3D11OriginVTables._ID3D11DeviceContext.DSSetSamplers(ptr, StartSlot, NumSamplers, ppSamplers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_DSSetConstantBuffers_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _In_reads_opt_(NumBuffers)  ID3D11Buffer *const * ppConstantBuffers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::DSSetConstantBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext.DSSetConstantBuffers(ptr, StartSlot, NumBuffers, ppConstantBuffers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_CSSetShaderResources_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews, _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const * ppShaderResourceViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::CSSetShaderResources");
    return g_D3D11OriginVTables._ID3D11DeviceContext.CSSetShaderResources(ptr, StartSlot, NumViews, ppShaderResourceViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_CSSetUnorderedAccessViews_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_1_UAV_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_1_UAV_SLOT_COUNT - StartSlot )  UINT NumUAVs, _In_reads_opt_(NumUAVs)  ID3D11UnorderedAccessView *const * ppUnorderedAccessViews, _In_reads_opt_(NumUAVs)  const UINT * pUAVInitialCounts)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::CSSetUnorderedAccessViews");
    return g_D3D11OriginVTables._ID3D11DeviceContext.CSSetUnorderedAccessViews(ptr, StartSlot, NumUAVs, ppUnorderedAccessViews, pUAVInitialCounts);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_CSSetShader_Hooked(ID3D11DeviceContext * ptr, _In_opt_  ID3D11ComputeShader * pComputeShader, _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const * ppClassInstances, UINT NumClassInstances)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::CSSetShader");
    return g_D3D11OriginVTables._ID3D11DeviceContext.CSSetShader(ptr, pComputeShader, ppClassInstances, NumClassInstances);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_CSSetSamplers_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers, _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const * ppSamplers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::CSSetSamplers");
    return g_D3D11OriginVTables._ID3D11DeviceContext.CSSetSamplers(ptr, StartSlot, NumSamplers, ppSamplers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_CSSetConstantBuffers_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _In_reads_opt_(NumBuffers)  ID3D11Buffer *const * ppConstantBuffers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::CSSetConstantBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext.CSSetConstantBuffers(ptr, StartSlot, NumBuffers, ppConstantBuffers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_VSGetConstantBuffers_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _Out_writes_opt_(NumBuffers)  ID3D11Buffer ** ppConstantBuffers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::VSGetConstantBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext.VSGetConstantBuffers(ptr, StartSlot, NumBuffers, ppConstantBuffers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_PSGetShaderResources_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews, _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView ** ppShaderResourceViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::PSGetShaderResources");
    return g_D3D11OriginVTables._ID3D11DeviceContext.PSGetShaderResources(ptr, StartSlot, NumViews, ppShaderResourceViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_PSGetShader_Hooked(ID3D11DeviceContext * ptr, _Out_  ID3D11PixelShader ** ppPixelShader, _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance ** ppClassInstances, _Inout_opt_  UINT * pNumClassInstances)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::PSGetShader");
    return g_D3D11OriginVTables._ID3D11DeviceContext.PSGetShader(ptr, ppPixelShader, ppClassInstances, pNumClassInstances);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_PSGetSamplers_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers, _Out_writes_opt_(NumSamplers)  ID3D11SamplerState ** ppSamplers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::PSGetSamplers");
    return g_D3D11OriginVTables._ID3D11DeviceContext.PSGetSamplers(ptr, StartSlot, NumSamplers, ppSamplers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_VSGetShader_Hooked(ID3D11DeviceContext * ptr, _Out_  ID3D11VertexShader ** ppVertexShader, _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance ** ppClassInstances, _Inout_opt_  UINT * pNumClassInstances)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::VSGetShader");
    return g_D3D11OriginVTables._ID3D11DeviceContext.VSGetShader(ptr, ppVertexShader, ppClassInstances, pNumClassInstances);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_PSGetConstantBuffers_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _Out_writes_opt_(NumBuffers)  ID3D11Buffer ** ppConstantBuffers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::PSGetConstantBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext.PSGetConstantBuffers(ptr, StartSlot, NumBuffers, ppConstantBuffers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_IAGetInputLayout_Hooked(ID3D11DeviceContext * ptr, _Out_  ID3D11InputLayout ** ppInputLayout)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::IAGetInputLayout");
    return g_D3D11OriginVTables._ID3D11DeviceContext.IAGetInputLayout(ptr, ppInputLayout);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_IAGetVertexBuffers_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumBuffers, _Out_writes_opt_(NumBuffers)  ID3D11Buffer ** ppVertexBuffers, _Out_writes_opt_(NumBuffers)  UINT * pStrides, _Out_writes_opt_(NumBuffers)  UINT * pOffsets)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::IAGetVertexBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext.IAGetVertexBuffers(ptr, StartSlot, NumBuffers, ppVertexBuffers, pStrides, pOffsets);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_IAGetIndexBuffer_Hooked(ID3D11DeviceContext * ptr, _Out_opt_  ID3D11Buffer ** pIndexBuffer, _Out_opt_  DXGI_FORMAT * Format, _Out_opt_  UINT * Offset)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::IAGetIndexBuffer");
    return g_D3D11OriginVTables._ID3D11DeviceContext.IAGetIndexBuffer(ptr, pIndexBuffer, Format, Offset);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_GSGetConstantBuffers_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _Out_writes_opt_(NumBuffers)  ID3D11Buffer ** ppConstantBuffers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::GSGetConstantBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext.GSGetConstantBuffers(ptr, StartSlot, NumBuffers, ppConstantBuffers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_GSGetShader_Hooked(ID3D11DeviceContext * ptr, _Out_  ID3D11GeometryShader ** ppGeometryShader, _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance ** ppClassInstances, _Inout_opt_  UINT * pNumClassInstances)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::GSGetShader");
    return g_D3D11OriginVTables._ID3D11DeviceContext.GSGetShader(ptr, ppGeometryShader, ppClassInstances, pNumClassInstances);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_IAGetPrimitiveTopology_Hooked(ID3D11DeviceContext * ptr, _Out_  D3D11_PRIMITIVE_TOPOLOGY * pTopology)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::IAGetPrimitiveTopology");
    return g_D3D11OriginVTables._ID3D11DeviceContext.IAGetPrimitiveTopology(ptr, pTopology);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_VSGetShaderResources_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews, _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView ** ppShaderResourceViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::VSGetShaderResources");
    return g_D3D11OriginVTables._ID3D11DeviceContext.VSGetShaderResources(ptr, StartSlot, NumViews, ppShaderResourceViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_VSGetSamplers_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers, _Out_writes_opt_(NumSamplers)  ID3D11SamplerState ** ppSamplers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::VSGetSamplers");
    return g_D3D11OriginVTables._ID3D11DeviceContext.VSGetSamplers(ptr, StartSlot, NumSamplers, ppSamplers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_GetPredication_Hooked(ID3D11DeviceContext * ptr, _Out_opt_  ID3D11Predicate ** ppPredicate, _Out_opt_  BOOL * pPredicateValue)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::GetPredication");
    return g_D3D11OriginVTables._ID3D11DeviceContext.GetPredication(ptr, ppPredicate, pPredicateValue);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_GSGetShaderResources_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews, _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView ** ppShaderResourceViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::GSGetShaderResources");
    return g_D3D11OriginVTables._ID3D11DeviceContext.GSGetShaderResources(ptr, StartSlot, NumViews, ppShaderResourceViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_GSGetSamplers_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers, _Out_writes_opt_(NumSamplers)  ID3D11SamplerState ** ppSamplers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::GSGetSamplers");
    return g_D3D11OriginVTables._ID3D11DeviceContext.GSGetSamplers(ptr, StartSlot, NumSamplers, ppSamplers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_OMGetRenderTargets_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT )  UINT NumViews, _Out_writes_opt_(NumViews)  ID3D11RenderTargetView ** ppRenderTargetViews, _Out_opt_  ID3D11DepthStencilView ** ppDepthStencilView)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::OMGetRenderTargets");
    return g_D3D11OriginVTables._ID3D11DeviceContext.OMGetRenderTargets(ptr, NumViews, ppRenderTargetViews, ppDepthStencilView);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_OMGetRenderTargetsAndUnorderedAccessViews_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT )  UINT NumRTVs, _Out_writes_opt_(NumRTVs)  ID3D11RenderTargetView ** ppRenderTargetViews, _Out_opt_  ID3D11DepthStencilView ** ppDepthStencilView, _In_range_( 0, D3D11_PS_CS_UAV_REGISTER_COUNT - 1 )  UINT UAVStartSlot, _In_range_( 0, D3D11_PS_CS_UAV_REGISTER_COUNT - UAVStartSlot )  UINT NumUAVs, _Out_writes_opt_(NumUAVs)  ID3D11UnorderedAccessView ** ppUnorderedAccessViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::OMGetRenderTargetsAndUnorderedAccessViews");
    return g_D3D11OriginVTables._ID3D11DeviceContext.OMGetRenderTargetsAndUnorderedAccessViews(ptr, NumRTVs, ppRenderTargetViews, ppDepthStencilView, UAVStartSlot, NumUAVs, ppUnorderedAccessViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_OMGetBlendState_Hooked(ID3D11DeviceContext * ptr, _Out_opt_  ID3D11BlendState ** ppBlendState, _Out_opt_  FLOAT BlendFactor [4], _Out_opt_  UINT * pSampleMask)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::OMGetBlendState");
    return g_D3D11OriginVTables._ID3D11DeviceContext.OMGetBlendState(ptr, ppBlendState, BlendFactor, pSampleMask);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_OMGetDepthStencilState_Hooked(ID3D11DeviceContext * ptr, _Out_opt_  ID3D11DepthStencilState ** ppDepthStencilState, _Out_opt_  UINT * pStencilRef)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::OMGetDepthStencilState");
    return g_D3D11OriginVTables._ID3D11DeviceContext.OMGetDepthStencilState(ptr, ppDepthStencilState, pStencilRef);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_SOGetTargets_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_SO_BUFFER_SLOT_COUNT )  UINT NumBuffers, _Out_writes_opt_(NumBuffers)  ID3D11Buffer ** ppSOTargets)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::SOGetTargets");
    return g_D3D11OriginVTables._ID3D11DeviceContext.SOGetTargets(ptr, NumBuffers, ppSOTargets);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_RSGetState_Hooked(ID3D11DeviceContext * ptr, _Out_  ID3D11RasterizerState ** ppRasterizerState)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::RSGetState");
    return g_D3D11OriginVTables._ID3D11DeviceContext.RSGetState(ptr, ppRasterizerState);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_RSGetViewports_Hooked(ID3D11DeviceContext * ptr, _Inout_ /*_range(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE )*/   UINT * pNumViewports, _Out_writes_opt_(*pNumViewports)  D3D11_VIEWPORT * pViewports)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::RSGetViewports");
    return g_D3D11OriginVTables._ID3D11DeviceContext.RSGetViewports(ptr, pNumViewports, pViewports);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_RSGetScissorRects_Hooked(ID3D11DeviceContext * ptr, _Inout_ /*_range(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE )*/   UINT * pNumRects, _Out_writes_opt_(*pNumRects)  D3D11_RECT * pRects)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::RSGetScissorRects");
    return g_D3D11OriginVTables._ID3D11DeviceContext.RSGetScissorRects(ptr, pNumRects, pRects);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_HSGetShaderResources_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews, _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView ** ppShaderResourceViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::HSGetShaderResources");
    return g_D3D11OriginVTables._ID3D11DeviceContext.HSGetShaderResources(ptr, StartSlot, NumViews, ppShaderResourceViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_HSGetShader_Hooked(ID3D11DeviceContext * ptr, _Out_  ID3D11HullShader ** ppHullShader, _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance ** ppClassInstances, _Inout_opt_  UINT * pNumClassInstances)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::HSGetShader");
    return g_D3D11OriginVTables._ID3D11DeviceContext.HSGetShader(ptr, ppHullShader, ppClassInstances, pNumClassInstances);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_HSGetSamplers_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers, _Out_writes_opt_(NumSamplers)  ID3D11SamplerState ** ppSamplers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::HSGetSamplers");
    return g_D3D11OriginVTables._ID3D11DeviceContext.HSGetSamplers(ptr, StartSlot, NumSamplers, ppSamplers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_HSGetConstantBuffers_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _Out_writes_opt_(NumBuffers)  ID3D11Buffer ** ppConstantBuffers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::HSGetConstantBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext.HSGetConstantBuffers(ptr, StartSlot, NumBuffers, ppConstantBuffers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_DSGetShaderResources_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews, _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView ** ppShaderResourceViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::DSGetShaderResources");
    return g_D3D11OriginVTables._ID3D11DeviceContext.DSGetShaderResources(ptr, StartSlot, NumViews, ppShaderResourceViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_DSGetShader_Hooked(ID3D11DeviceContext * ptr, _Out_  ID3D11DomainShader ** ppDomainShader, _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance ** ppClassInstances, _Inout_opt_  UINT * pNumClassInstances)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::DSGetShader");
    return g_D3D11OriginVTables._ID3D11DeviceContext.DSGetShader(ptr, ppDomainShader, ppClassInstances, pNumClassInstances);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_DSGetSamplers_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers, _Out_writes_opt_(NumSamplers)  ID3D11SamplerState ** ppSamplers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::DSGetSamplers");
    return g_D3D11OriginVTables._ID3D11DeviceContext.DSGetSamplers(ptr, StartSlot, NumSamplers, ppSamplers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_DSGetConstantBuffers_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _Out_writes_opt_(NumBuffers)  ID3D11Buffer ** ppConstantBuffers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::DSGetConstantBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext.DSGetConstantBuffers(ptr, StartSlot, NumBuffers, ppConstantBuffers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_CSGetShaderResources_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews, _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView ** ppShaderResourceViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::CSGetShaderResources");
    return g_D3D11OriginVTables._ID3D11DeviceContext.CSGetShaderResources(ptr, StartSlot, NumViews, ppShaderResourceViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_CSGetUnorderedAccessViews_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_PS_CS_UAV_REGISTER_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_PS_CS_UAV_REGISTER_COUNT - StartSlot )  UINT NumUAVs, _Out_writes_opt_(NumUAVs)  ID3D11UnorderedAccessView ** ppUnorderedAccessViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::CSGetUnorderedAccessViews");
    return g_D3D11OriginVTables._ID3D11DeviceContext.CSGetUnorderedAccessViews(ptr, StartSlot, NumUAVs, ppUnorderedAccessViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_CSGetShader_Hooked(ID3D11DeviceContext * ptr, _Out_  ID3D11ComputeShader ** ppComputeShader, _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance ** ppClassInstances, _Inout_opt_  UINT * pNumClassInstances)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::CSGetShader");
    return g_D3D11OriginVTables._ID3D11DeviceContext.CSGetShader(ptr, ppComputeShader, ppClassInstances, pNumClassInstances);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_CSGetSamplers_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers, _Out_writes_opt_(NumSamplers)  ID3D11SamplerState ** ppSamplers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::CSGetSamplers");
    return g_D3D11OriginVTables._ID3D11DeviceContext.CSGetSamplers(ptr, StartSlot, NumSamplers, ppSamplers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_CSGetConstantBuffers_Hooked(ID3D11DeviceContext * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _Out_writes_opt_(NumBuffers)  ID3D11Buffer ** ppConstantBuffers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::CSGetConstantBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext.CSGetConstantBuffers(ptr, StartSlot, NumBuffers, ppConstantBuffers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_ClearState_Hooked(ID3D11DeviceContext * ptr)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::ClearState");
    return g_D3D11OriginVTables._ID3D11DeviceContext.ClearState(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext_Flush_Hooked(ID3D11DeviceContext * ptr)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::Flush");
    return g_D3D11OriginVTables._ID3D11DeviceContext.Flush(ptr);
}

// -----------------------------------------------------------------------------
static inline D3D11_DEVICE_CONTEXT_TYPE STDMETHODCALLTYPE ID3D11DeviceContext_GetType_Hooked(ID3D11DeviceContext * ptr)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::GetType");
    return g_D3D11OriginVTables._ID3D11DeviceContext.GetType(ptr);
}

// -----------------------------------------------------------------------------
static inline UINT STDMETHODCALLTYPE ID3D11DeviceContext_GetContextFlags_Hooked(ID3D11DeviceContext * ptr)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::GetContextFlags");
    return g_D3D11OriginVTables._ID3D11DeviceContext.GetContextFlags(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DeviceContext_FinishCommandList_Hooked(ID3D11DeviceContext * ptr, BOOL RestoreDeferredContextState, _Out_opt_  ID3D11CommandList ** ppCommandList)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext::FinishCommandList");
    return g_D3D11OriginVTables._ID3D11DeviceContext.FinishCommandList(ptr, RestoreDeferredContextState, ppCommandList);
}

// -----------------------------------------------------------------------------
// ID3D11VideoDecoderHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11VideoDecoder(ID3D11VideoDecoder * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11VideoDecoderVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11VideoDecoder);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11VideoDecoder);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11VideoDecoder");
}
template <> inline void RealToHooked11<ID3D11VideoDecoder>(ID3D11VideoDecoder * p)
{
    return RealToHooked11_ID3D11VideoDecoder( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDecoder_QueryInterface_Hooked(ID3D11VideoDecoder * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11VideoDecoder::QueryInterface");
    return g_D3D11OriginVTables._ID3D11VideoDecoder.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11VideoDecoder_AddRef_Hooked(ID3D11VideoDecoder * ptr)
{
    calltrace::AutoTrace trace("ID3D11VideoDecoder::AddRef");
    return g_D3D11OriginVTables._ID3D11VideoDecoder.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11VideoDecoder_Release_Hooked(ID3D11VideoDecoder * ptr)
{
    calltrace::AutoTrace trace("ID3D11VideoDecoder::Release");
    return g_D3D11OriginVTables._ID3D11VideoDecoder.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoDecoder_GetDevice_Hooked(ID3D11VideoDecoder * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11VideoDecoder::GetDevice");
    return g_D3D11OriginVTables._ID3D11VideoDecoder.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDecoder_GetPrivateData_Hooked(ID3D11VideoDecoder * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoDecoder::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11VideoDecoder.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDecoder_SetPrivateData_Hooked(ID3D11VideoDecoder * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoDecoder::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11VideoDecoder.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDecoder_SetPrivateDataInterface_Hooked(ID3D11VideoDecoder * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoDecoder::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11VideoDecoder.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDecoder_GetCreationParameters_Hooked(ID3D11VideoDecoder * ptr, _Out_  D3D11_VIDEO_DECODER_DESC * pVideoDesc, _Out_  D3D11_VIDEO_DECODER_CONFIG * pConfig)
{
    calltrace::AutoTrace trace("ID3D11VideoDecoder::GetCreationParameters");
    return g_D3D11OriginVTables._ID3D11VideoDecoder.GetCreationParameters(ptr, pVideoDesc, pConfig);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDecoder_GetDriverHandle_Hooked(ID3D11VideoDecoder * ptr, _Out_  HANDLE * pDriverHandle)
{
    calltrace::AutoTrace trace("ID3D11VideoDecoder::GetDriverHandle");
    return g_D3D11OriginVTables._ID3D11VideoDecoder.GetDriverHandle(ptr, pDriverHandle);
}

// -----------------------------------------------------------------------------
// ID3D11VideoProcessorEnumeratorHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11VideoProcessorEnumerator(ID3D11VideoProcessorEnumerator * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11VideoProcessorEnumeratorVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11VideoProcessorEnumerator);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11VideoProcessorEnumerator);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11VideoProcessorEnumerator");
}
template <> inline void RealToHooked11<ID3D11VideoProcessorEnumerator>(ID3D11VideoProcessorEnumerator * p)
{
    return RealToHooked11_ID3D11VideoProcessorEnumerator( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoProcessorEnumerator_QueryInterface_Hooked(ID3D11VideoProcessorEnumerator * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorEnumerator::QueryInterface");
    return g_D3D11OriginVTables._ID3D11VideoProcessorEnumerator.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11VideoProcessorEnumerator_AddRef_Hooked(ID3D11VideoProcessorEnumerator * ptr)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorEnumerator::AddRef");
    return g_D3D11OriginVTables._ID3D11VideoProcessorEnumerator.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11VideoProcessorEnumerator_Release_Hooked(ID3D11VideoProcessorEnumerator * ptr)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorEnumerator::Release");
    return g_D3D11OriginVTables._ID3D11VideoProcessorEnumerator.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoProcessorEnumerator_GetDevice_Hooked(ID3D11VideoProcessorEnumerator * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorEnumerator::GetDevice");
    return g_D3D11OriginVTables._ID3D11VideoProcessorEnumerator.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoProcessorEnumerator_GetPrivateData_Hooked(ID3D11VideoProcessorEnumerator * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorEnumerator::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11VideoProcessorEnumerator.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoProcessorEnumerator_SetPrivateData_Hooked(ID3D11VideoProcessorEnumerator * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorEnumerator::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11VideoProcessorEnumerator.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoProcessorEnumerator_SetPrivateDataInterface_Hooked(ID3D11VideoProcessorEnumerator * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorEnumerator::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11VideoProcessorEnumerator.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoProcessorEnumerator_GetVideoProcessorContentDesc_Hooked(ID3D11VideoProcessorEnumerator * ptr, _Out_  D3D11_VIDEO_PROCESSOR_CONTENT_DESC * pContentDesc)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorEnumerator::GetVideoProcessorContentDesc");
    return g_D3D11OriginVTables._ID3D11VideoProcessorEnumerator.GetVideoProcessorContentDesc(ptr, pContentDesc);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoProcessorEnumerator_CheckVideoProcessorFormat_Hooked(ID3D11VideoProcessorEnumerator * ptr, _In_  DXGI_FORMAT Format, _Out_  UINT * pFlags)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorEnumerator::CheckVideoProcessorFormat");
    return g_D3D11OriginVTables._ID3D11VideoProcessorEnumerator.CheckVideoProcessorFormat(ptr, Format, pFlags);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoProcessorEnumerator_GetVideoProcessorCaps_Hooked(ID3D11VideoProcessorEnumerator * ptr, _Out_  D3D11_VIDEO_PROCESSOR_CAPS * pCaps)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorEnumerator::GetVideoProcessorCaps");
    return g_D3D11OriginVTables._ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps(ptr, pCaps);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoProcessorEnumerator_GetVideoProcessorRateConversionCaps_Hooked(ID3D11VideoProcessorEnumerator * ptr, _In_  UINT TypeIndex, _Out_  D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS * pCaps)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorEnumerator::GetVideoProcessorRateConversionCaps");
    return g_D3D11OriginVTables._ID3D11VideoProcessorEnumerator.GetVideoProcessorRateConversionCaps(ptr, TypeIndex, pCaps);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoProcessorEnumerator_GetVideoProcessorCustomRate_Hooked(ID3D11VideoProcessorEnumerator * ptr, _In_  UINT TypeIndex, _In_  UINT CustomRateIndex, _Out_  D3D11_VIDEO_PROCESSOR_CUSTOM_RATE * pRate)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorEnumerator::GetVideoProcessorCustomRate");
    return g_D3D11OriginVTables._ID3D11VideoProcessorEnumerator.GetVideoProcessorCustomRate(ptr, TypeIndex, CustomRateIndex, pRate);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoProcessorEnumerator_GetVideoProcessorFilterRange_Hooked(ID3D11VideoProcessorEnumerator * ptr, _In_  D3D11_VIDEO_PROCESSOR_FILTER Filter, _Out_  D3D11_VIDEO_PROCESSOR_FILTER_RANGE * pRange)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorEnumerator::GetVideoProcessorFilterRange");
    return g_D3D11OriginVTables._ID3D11VideoProcessorEnumerator.GetVideoProcessorFilterRange(ptr, Filter, pRange);
}

// -----------------------------------------------------------------------------
// ID3D11VideoProcessorHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11VideoProcessor(ID3D11VideoProcessor * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11VideoProcessorVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11VideoProcessor);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11VideoProcessor);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11VideoProcessor");
}
template <> inline void RealToHooked11<ID3D11VideoProcessor>(ID3D11VideoProcessor * p)
{
    return RealToHooked11_ID3D11VideoProcessor( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoProcessor_QueryInterface_Hooked(ID3D11VideoProcessor * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessor::QueryInterface");
    return g_D3D11OriginVTables._ID3D11VideoProcessor.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11VideoProcessor_AddRef_Hooked(ID3D11VideoProcessor * ptr)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessor::AddRef");
    return g_D3D11OriginVTables._ID3D11VideoProcessor.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11VideoProcessor_Release_Hooked(ID3D11VideoProcessor * ptr)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessor::Release");
    return g_D3D11OriginVTables._ID3D11VideoProcessor.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoProcessor_GetDevice_Hooked(ID3D11VideoProcessor * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessor::GetDevice");
    return g_D3D11OriginVTables._ID3D11VideoProcessor.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoProcessor_GetPrivateData_Hooked(ID3D11VideoProcessor * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessor::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11VideoProcessor.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoProcessor_SetPrivateData_Hooked(ID3D11VideoProcessor * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessor::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11VideoProcessor.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoProcessor_SetPrivateDataInterface_Hooked(ID3D11VideoProcessor * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessor::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11VideoProcessor.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoProcessor_GetContentDesc_Hooked(ID3D11VideoProcessor * ptr, _Out_  D3D11_VIDEO_PROCESSOR_CONTENT_DESC * pDesc)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessor::GetContentDesc");
    return g_D3D11OriginVTables._ID3D11VideoProcessor.GetContentDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoProcessor_GetRateConversionCaps_Hooked(ID3D11VideoProcessor * ptr, _Out_  D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS * pCaps)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessor::GetRateConversionCaps");
    return g_D3D11OriginVTables._ID3D11VideoProcessor.GetRateConversionCaps(ptr, pCaps);
}

// -----------------------------------------------------------------------------
// ID3D11AuthenticatedChannelHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11AuthenticatedChannel(ID3D11AuthenticatedChannel * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11AuthenticatedChannelVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11AuthenticatedChannel);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11AuthenticatedChannel);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11AuthenticatedChannel");
}
template <> inline void RealToHooked11<ID3D11AuthenticatedChannel>(ID3D11AuthenticatedChannel * p)
{
    return RealToHooked11_ID3D11AuthenticatedChannel( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11AuthenticatedChannel_QueryInterface_Hooked(ID3D11AuthenticatedChannel * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11AuthenticatedChannel::QueryInterface");
    return g_D3D11OriginVTables._ID3D11AuthenticatedChannel.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11AuthenticatedChannel_AddRef_Hooked(ID3D11AuthenticatedChannel * ptr)
{
    calltrace::AutoTrace trace("ID3D11AuthenticatedChannel::AddRef");
    return g_D3D11OriginVTables._ID3D11AuthenticatedChannel.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11AuthenticatedChannel_Release_Hooked(ID3D11AuthenticatedChannel * ptr)
{
    calltrace::AutoTrace trace("ID3D11AuthenticatedChannel::Release");
    return g_D3D11OriginVTables._ID3D11AuthenticatedChannel.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11AuthenticatedChannel_GetDevice_Hooked(ID3D11AuthenticatedChannel * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11AuthenticatedChannel::GetDevice");
    return g_D3D11OriginVTables._ID3D11AuthenticatedChannel.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11AuthenticatedChannel_GetPrivateData_Hooked(ID3D11AuthenticatedChannel * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11AuthenticatedChannel::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11AuthenticatedChannel.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11AuthenticatedChannel_SetPrivateData_Hooked(ID3D11AuthenticatedChannel * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11AuthenticatedChannel::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11AuthenticatedChannel.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11AuthenticatedChannel_SetPrivateDataInterface_Hooked(ID3D11AuthenticatedChannel * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11AuthenticatedChannel::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11AuthenticatedChannel.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11AuthenticatedChannel_GetCertificateSize_Hooked(ID3D11AuthenticatedChannel * ptr, _Out_  UINT * pCertificateSize)
{
    calltrace::AutoTrace trace("ID3D11AuthenticatedChannel::GetCertificateSize");
    return g_D3D11OriginVTables._ID3D11AuthenticatedChannel.GetCertificateSize(ptr, pCertificateSize);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11AuthenticatedChannel_GetCertificate_Hooked(ID3D11AuthenticatedChannel * ptr, _In_  UINT CertificateSize, _Out_writes_bytes_(CertificateSize)  BYTE * pCertificate)
{
    calltrace::AutoTrace trace("ID3D11AuthenticatedChannel::GetCertificate");
    return g_D3D11OriginVTables._ID3D11AuthenticatedChannel.GetCertificate(ptr, CertificateSize, pCertificate);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11AuthenticatedChannel_GetChannelHandle_Hooked(ID3D11AuthenticatedChannel * ptr, _Out_  HANDLE * pChannelHandle)
{
    calltrace::AutoTrace trace("ID3D11AuthenticatedChannel::GetChannelHandle");
    return g_D3D11OriginVTables._ID3D11AuthenticatedChannel.GetChannelHandle(ptr, pChannelHandle);
}

// -----------------------------------------------------------------------------
// ID3D11CryptoSessionHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11CryptoSession(ID3D11CryptoSession * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11CryptoSessionVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11CryptoSession);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11CryptoSession);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11CryptoSession");
}
template <> inline void RealToHooked11<ID3D11CryptoSession>(ID3D11CryptoSession * p)
{
    return RealToHooked11_ID3D11CryptoSession( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11CryptoSession_QueryInterface_Hooked(ID3D11CryptoSession * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11CryptoSession::QueryInterface");
    return g_D3D11OriginVTables._ID3D11CryptoSession.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11CryptoSession_AddRef_Hooked(ID3D11CryptoSession * ptr)
{
    calltrace::AutoTrace trace("ID3D11CryptoSession::AddRef");
    return g_D3D11OriginVTables._ID3D11CryptoSession.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11CryptoSession_Release_Hooked(ID3D11CryptoSession * ptr)
{
    calltrace::AutoTrace trace("ID3D11CryptoSession::Release");
    return g_D3D11OriginVTables._ID3D11CryptoSession.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11CryptoSession_GetDevice_Hooked(ID3D11CryptoSession * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11CryptoSession::GetDevice");
    return g_D3D11OriginVTables._ID3D11CryptoSession.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11CryptoSession_GetPrivateData_Hooked(ID3D11CryptoSession * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11CryptoSession::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11CryptoSession.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11CryptoSession_SetPrivateData_Hooked(ID3D11CryptoSession * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11CryptoSession::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11CryptoSession.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11CryptoSession_SetPrivateDataInterface_Hooked(ID3D11CryptoSession * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11CryptoSession::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11CryptoSession.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11CryptoSession_GetCryptoType_Hooked(ID3D11CryptoSession * ptr, _Out_  GUID * pCryptoType)
{
    calltrace::AutoTrace trace("ID3D11CryptoSession::GetCryptoType");
    return g_D3D11OriginVTables._ID3D11CryptoSession.GetCryptoType(ptr, pCryptoType);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11CryptoSession_GetDecoderProfile_Hooked(ID3D11CryptoSession * ptr, _Out_  GUID * pDecoderProfile)
{
    calltrace::AutoTrace trace("ID3D11CryptoSession::GetDecoderProfile");
    return g_D3D11OriginVTables._ID3D11CryptoSession.GetDecoderProfile(ptr, pDecoderProfile);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11CryptoSession_GetCertificateSize_Hooked(ID3D11CryptoSession * ptr, _Out_  UINT * pCertificateSize)
{
    calltrace::AutoTrace trace("ID3D11CryptoSession::GetCertificateSize");
    return g_D3D11OriginVTables._ID3D11CryptoSession.GetCertificateSize(ptr, pCertificateSize);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11CryptoSession_GetCertificate_Hooked(ID3D11CryptoSession * ptr, _In_  UINT CertificateSize, _Out_writes_bytes_(CertificateSize)  BYTE * pCertificate)
{
    calltrace::AutoTrace trace("ID3D11CryptoSession::GetCertificate");
    return g_D3D11OriginVTables._ID3D11CryptoSession.GetCertificate(ptr, CertificateSize, pCertificate);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11CryptoSession_GetCryptoSessionHandle_Hooked(ID3D11CryptoSession * ptr, _Out_  HANDLE * pCryptoSessionHandle)
{
    calltrace::AutoTrace trace("ID3D11CryptoSession::GetCryptoSessionHandle");
    return g_D3D11OriginVTables._ID3D11CryptoSession.GetCryptoSessionHandle(ptr, pCryptoSessionHandle);
}

// -----------------------------------------------------------------------------
// ID3D11VideoDecoderOutputViewHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11VideoDecoderOutputView(ID3D11VideoDecoderOutputView * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11VideoDecoderOutputViewVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11VideoDecoderOutputView);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11VideoDecoderOutputView);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11VideoDecoderOutputView");
}
template <> inline void RealToHooked11<ID3D11VideoDecoderOutputView>(ID3D11VideoDecoderOutputView * p)
{
    return RealToHooked11_ID3D11VideoDecoderOutputView( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDecoderOutputView_QueryInterface_Hooked(ID3D11VideoDecoderOutputView * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11VideoDecoderOutputView::QueryInterface");
    return g_D3D11OriginVTables._ID3D11VideoDecoderOutputView.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11VideoDecoderOutputView_AddRef_Hooked(ID3D11VideoDecoderOutputView * ptr)
{
    calltrace::AutoTrace trace("ID3D11VideoDecoderOutputView::AddRef");
    return g_D3D11OriginVTables._ID3D11VideoDecoderOutputView.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11VideoDecoderOutputView_Release_Hooked(ID3D11VideoDecoderOutputView * ptr)
{
    calltrace::AutoTrace trace("ID3D11VideoDecoderOutputView::Release");
    return g_D3D11OriginVTables._ID3D11VideoDecoderOutputView.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoDecoderOutputView_GetDevice_Hooked(ID3D11VideoDecoderOutputView * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11VideoDecoderOutputView::GetDevice");
    return g_D3D11OriginVTables._ID3D11VideoDecoderOutputView.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDecoderOutputView_GetPrivateData_Hooked(ID3D11VideoDecoderOutputView * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoDecoderOutputView::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11VideoDecoderOutputView.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDecoderOutputView_SetPrivateData_Hooked(ID3D11VideoDecoderOutputView * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoDecoderOutputView::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11VideoDecoderOutputView.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDecoderOutputView_SetPrivateDataInterface_Hooked(ID3D11VideoDecoderOutputView * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoDecoderOutputView::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11VideoDecoderOutputView.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoDecoderOutputView_GetResource_Hooked(ID3D11VideoDecoderOutputView * ptr, _Out_  ID3D11Resource ** ppResource)
{
    calltrace::AutoTrace trace("ID3D11VideoDecoderOutputView::GetResource");
    return g_D3D11OriginVTables._ID3D11VideoDecoderOutputView.GetResource(ptr, ppResource);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoDecoderOutputView_GetDesc_Hooked(ID3D11VideoDecoderOutputView * ptr, _Out_  D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC * pDesc)
{
    calltrace::AutoTrace trace("ID3D11VideoDecoderOutputView::GetDesc");
    return g_D3D11OriginVTables._ID3D11VideoDecoderOutputView.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
// ID3D11VideoProcessorInputViewHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11VideoProcessorInputView(ID3D11VideoProcessorInputView * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11VideoProcessorInputViewVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11VideoProcessorInputView);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11VideoProcessorInputView);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11VideoProcessorInputView");
}
template <> inline void RealToHooked11<ID3D11VideoProcessorInputView>(ID3D11VideoProcessorInputView * p)
{
    return RealToHooked11_ID3D11VideoProcessorInputView( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoProcessorInputView_QueryInterface_Hooked(ID3D11VideoProcessorInputView * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorInputView::QueryInterface");
    return g_D3D11OriginVTables._ID3D11VideoProcessorInputView.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11VideoProcessorInputView_AddRef_Hooked(ID3D11VideoProcessorInputView * ptr)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorInputView::AddRef");
    return g_D3D11OriginVTables._ID3D11VideoProcessorInputView.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11VideoProcessorInputView_Release_Hooked(ID3D11VideoProcessorInputView * ptr)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorInputView::Release");
    return g_D3D11OriginVTables._ID3D11VideoProcessorInputView.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoProcessorInputView_GetDevice_Hooked(ID3D11VideoProcessorInputView * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorInputView::GetDevice");
    return g_D3D11OriginVTables._ID3D11VideoProcessorInputView.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoProcessorInputView_GetPrivateData_Hooked(ID3D11VideoProcessorInputView * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorInputView::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11VideoProcessorInputView.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoProcessorInputView_SetPrivateData_Hooked(ID3D11VideoProcessorInputView * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorInputView::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11VideoProcessorInputView.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoProcessorInputView_SetPrivateDataInterface_Hooked(ID3D11VideoProcessorInputView * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorInputView::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11VideoProcessorInputView.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoProcessorInputView_GetResource_Hooked(ID3D11VideoProcessorInputView * ptr, _Out_  ID3D11Resource ** ppResource)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorInputView::GetResource");
    return g_D3D11OriginVTables._ID3D11VideoProcessorInputView.GetResource(ptr, ppResource);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoProcessorInputView_GetDesc_Hooked(ID3D11VideoProcessorInputView * ptr, _Out_  D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC * pDesc)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorInputView::GetDesc");
    return g_D3D11OriginVTables._ID3D11VideoProcessorInputView.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
// ID3D11VideoProcessorOutputViewHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11VideoProcessorOutputView(ID3D11VideoProcessorOutputView * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11VideoProcessorOutputViewVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11VideoProcessorOutputView);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11VideoProcessorOutputView);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11VideoProcessorOutputView");
}
template <> inline void RealToHooked11<ID3D11VideoProcessorOutputView>(ID3D11VideoProcessorOutputView * p)
{
    return RealToHooked11_ID3D11VideoProcessorOutputView( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoProcessorOutputView_QueryInterface_Hooked(ID3D11VideoProcessorOutputView * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorOutputView::QueryInterface");
    return g_D3D11OriginVTables._ID3D11VideoProcessorOutputView.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11VideoProcessorOutputView_AddRef_Hooked(ID3D11VideoProcessorOutputView * ptr)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorOutputView::AddRef");
    return g_D3D11OriginVTables._ID3D11VideoProcessorOutputView.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11VideoProcessorOutputView_Release_Hooked(ID3D11VideoProcessorOutputView * ptr)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorOutputView::Release");
    return g_D3D11OriginVTables._ID3D11VideoProcessorOutputView.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoProcessorOutputView_GetDevice_Hooked(ID3D11VideoProcessorOutputView * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorOutputView::GetDevice");
    return g_D3D11OriginVTables._ID3D11VideoProcessorOutputView.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoProcessorOutputView_GetPrivateData_Hooked(ID3D11VideoProcessorOutputView * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorOutputView::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11VideoProcessorOutputView.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoProcessorOutputView_SetPrivateData_Hooked(ID3D11VideoProcessorOutputView * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorOutputView::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11VideoProcessorOutputView.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoProcessorOutputView_SetPrivateDataInterface_Hooked(ID3D11VideoProcessorOutputView * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorOutputView::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11VideoProcessorOutputView.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoProcessorOutputView_GetResource_Hooked(ID3D11VideoProcessorOutputView * ptr, _Out_  ID3D11Resource ** ppResource)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorOutputView::GetResource");
    return g_D3D11OriginVTables._ID3D11VideoProcessorOutputView.GetResource(ptr, ppResource);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoProcessorOutputView_GetDesc_Hooked(ID3D11VideoProcessorOutputView * ptr, _Out_  D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC * pDesc)
{
    calltrace::AutoTrace trace("ID3D11VideoProcessorOutputView::GetDesc");
    return g_D3D11OriginVTables._ID3D11VideoProcessorOutputView.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
// ID3D11VideoContextHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11VideoContext(ID3D11VideoContext * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11VideoContextVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11VideoContext);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11VideoContext);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11VideoContext");
}
template <> inline void RealToHooked11<ID3D11VideoContext>(ID3D11VideoContext * p)
{
    return RealToHooked11_ID3D11VideoContext( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoContext_QueryInterface_Hooked(ID3D11VideoContext * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::QueryInterface");
    return g_D3D11OriginVTables._ID3D11VideoContext.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11VideoContext_AddRef_Hooked(ID3D11VideoContext * ptr)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::AddRef");
    return g_D3D11OriginVTables._ID3D11VideoContext.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11VideoContext_Release_Hooked(ID3D11VideoContext * ptr)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::Release");
    return g_D3D11OriginVTables._ID3D11VideoContext.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_GetDevice_Hooked(ID3D11VideoContext * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::GetDevice");
    return g_D3D11OriginVTables._ID3D11VideoContext.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoContext_GetPrivateData_Hooked(ID3D11VideoContext * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11VideoContext.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoContext_SetPrivateData_Hooked(ID3D11VideoContext * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11VideoContext.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoContext_SetPrivateDataInterface_Hooked(ID3D11VideoContext * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11VideoContext.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoContext_GetDecoderBuffer_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoDecoder * pDecoder, _In_  D3D11_VIDEO_DECODER_BUFFER_TYPE Type, _Out_  UINT * pBufferSize, _Out_writes_bytes_opt_(*pBufferSize)  void ** ppBuffer)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::GetDecoderBuffer");
    return g_D3D11OriginVTables._ID3D11VideoContext.GetDecoderBuffer(ptr, pDecoder, Type, pBufferSize, ppBuffer);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoContext_ReleaseDecoderBuffer_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoDecoder * pDecoder, _In_  D3D11_VIDEO_DECODER_BUFFER_TYPE Type)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::ReleaseDecoderBuffer");
    return g_D3D11OriginVTables._ID3D11VideoContext.ReleaseDecoderBuffer(ptr, pDecoder, Type);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoContext_DecoderBeginFrame_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoDecoder * pDecoder, _In_  ID3D11VideoDecoderOutputView * pView, _In_  UINT ContentKeySize, _In_reads_bytes_opt_(ContentKeySize)  const void * pContentKey)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::DecoderBeginFrame");
    return g_D3D11OriginVTables._ID3D11VideoContext.DecoderBeginFrame(ptr, pDecoder, pView, ContentKeySize, pContentKey);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoContext_DecoderEndFrame_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoDecoder * pDecoder)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::DecoderEndFrame");
    return g_D3D11OriginVTables._ID3D11VideoContext.DecoderEndFrame(ptr, pDecoder);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoContext_SubmitDecoderBuffers_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoDecoder * pDecoder, _In_  UINT NumBuffers, _In_reads_(NumBuffers)  const D3D11_VIDEO_DECODER_BUFFER_DESC * pBufferDesc)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::SubmitDecoderBuffers");
    return g_D3D11OriginVTables._ID3D11VideoContext.SubmitDecoderBuffers(ptr, pDecoder, NumBuffers, pBufferDesc);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoContext_DecoderExtension_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoDecoder * pDecoder, _In_  const D3D11_VIDEO_DECODER_EXTENSION * pExtensionData)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::DecoderExtension");
    return g_D3D11OriginVTables._ID3D11VideoContext.DecoderExtension(ptr, pDecoder, pExtensionData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorSetOutputTargetRect_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  BOOL Enable, _In_opt_  const RECT * pRect)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorSetOutputTargetRect");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorSetOutputTargetRect(ptr, pVideoProcessor, Enable, pRect);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorSetOutputBackgroundColor_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  BOOL YCbCr, _In_  const D3D11_VIDEO_COLOR * pColor)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorSetOutputBackgroundColor");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorSetOutputBackgroundColor(ptr, pVideoProcessor, YCbCr, pColor);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorSetOutputColorSpace_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  const D3D11_VIDEO_PROCESSOR_COLOR_SPACE * pColorSpace)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorSetOutputColorSpace");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorSetOutputColorSpace(ptr, pVideoProcessor, pColorSpace);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorSetOutputAlphaFillMode_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE AlphaFillMode, _In_  UINT StreamIndex)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorSetOutputAlphaFillMode");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorSetOutputAlphaFillMode(ptr, pVideoProcessor, AlphaFillMode, StreamIndex);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorSetOutputConstriction_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  BOOL Enable, _In_  SIZE Size)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorSetOutputConstriction");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorSetOutputConstriction(ptr, pVideoProcessor, Enable, Size);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorSetOutputStereoMode_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  BOOL Enable)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorSetOutputStereoMode");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorSetOutputStereoMode(ptr, pVideoProcessor, Enable);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorSetOutputExtension_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  const GUID * pExtensionGuid, _In_  UINT DataSize, _In_  void * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorSetOutputExtension");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorSetOutputExtension(ptr, pVideoProcessor, pExtensionGuid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorGetOutputTargetRect_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _Out_  BOOL * Enabled, _Out_  RECT * pRect)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorGetOutputTargetRect");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorGetOutputTargetRect(ptr, pVideoProcessor, Enabled, pRect);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorGetOutputBackgroundColor_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _Out_  BOOL * pYCbCr, _Out_  D3D11_VIDEO_COLOR * pColor)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorGetOutputBackgroundColor");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorGetOutputBackgroundColor(ptr, pVideoProcessor, pYCbCr, pColor);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorGetOutputColorSpace_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _Out_  D3D11_VIDEO_PROCESSOR_COLOR_SPACE * pColorSpace)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorGetOutputColorSpace");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorGetOutputColorSpace(ptr, pVideoProcessor, pColorSpace);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorGetOutputAlphaFillMode_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _Out_  D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE * pAlphaFillMode, _Out_  UINT * pStreamIndex)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorGetOutputAlphaFillMode");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorGetOutputAlphaFillMode(ptr, pVideoProcessor, pAlphaFillMode, pStreamIndex);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorGetOutputConstriction_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _Out_  BOOL * pEnabled, _Out_  SIZE * pSize)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorGetOutputConstriction");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorGetOutputConstriction(ptr, pVideoProcessor, pEnabled, pSize);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorGetOutputStereoMode_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _Out_  BOOL * pEnabled)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorGetOutputStereoMode");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorGetOutputStereoMode(ptr, pVideoProcessor, pEnabled);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorGetOutputExtension_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  const GUID * pExtensionGuid, _In_  UINT DataSize, _Out_  void * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorGetOutputExtension");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorGetOutputExtension(ptr, pVideoProcessor, pExtensionGuid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorSetStreamFrameFormat_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _In_  D3D11_VIDEO_FRAME_FORMAT FrameFormat)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorSetStreamFrameFormat");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorSetStreamFrameFormat(ptr, pVideoProcessor, StreamIndex, FrameFormat);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorSetStreamColorSpace_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _In_  const D3D11_VIDEO_PROCESSOR_COLOR_SPACE * pColorSpace)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorSetStreamColorSpace");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorSetStreamColorSpace(ptr, pVideoProcessor, StreamIndex, pColorSpace);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorSetStreamOutputRate_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _In_  D3D11_VIDEO_PROCESSOR_OUTPUT_RATE OutputRate, _In_  BOOL RepeatFrame, _In_opt_  const DXGI_RATIONAL * pCustomRate)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorSetStreamOutputRate");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorSetStreamOutputRate(ptr, pVideoProcessor, StreamIndex, OutputRate, RepeatFrame, pCustomRate);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorSetStreamSourceRect_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _In_  BOOL Enable, _In_opt_  const RECT * pRect)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorSetStreamSourceRect");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorSetStreamSourceRect(ptr, pVideoProcessor, StreamIndex, Enable, pRect);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorSetStreamDestRect_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _In_  BOOL Enable, _In_opt_  const RECT * pRect)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorSetStreamDestRect");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorSetStreamDestRect(ptr, pVideoProcessor, StreamIndex, Enable, pRect);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorSetStreamAlpha_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _In_  BOOL Enable, _In_  FLOAT Alpha)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorSetStreamAlpha");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorSetStreamAlpha(ptr, pVideoProcessor, StreamIndex, Enable, Alpha);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorSetStreamPalette_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _In_  UINT Count, _In_reads_opt_(Count)  const UINT * pEntries)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorSetStreamPalette");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorSetStreamPalette(ptr, pVideoProcessor, StreamIndex, Count, pEntries);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorSetStreamPixelAspectRatio_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _In_  BOOL Enable, _In_opt_  const DXGI_RATIONAL * pSourceAspectRatio, _In_opt_  const DXGI_RATIONAL * pDestinationAspectRatio)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorSetStreamPixelAspectRatio");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorSetStreamPixelAspectRatio(ptr, pVideoProcessor, StreamIndex, Enable, pSourceAspectRatio, pDestinationAspectRatio);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorSetStreamLumaKey_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _In_  BOOL Enable, _In_  FLOAT Lower, _In_  FLOAT Upper)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorSetStreamLumaKey");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorSetStreamLumaKey(ptr, pVideoProcessor, StreamIndex, Enable, Lower, Upper);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorSetStreamStereoFormat_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _In_  BOOL Enable, _In_  D3D11_VIDEO_PROCESSOR_STEREO_FORMAT Format, _In_  BOOL LeftViewFrame0, _In_  BOOL BaseViewFrame0, _In_  D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE FlipMode, _In_  int MonoOffset)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorSetStreamStereoFormat");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorSetStreamStereoFormat(ptr, pVideoProcessor, StreamIndex, Enable, Format, LeftViewFrame0, BaseViewFrame0, FlipMode, MonoOffset);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorSetStreamAutoProcessingMode_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _In_  BOOL Enable)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorSetStreamAutoProcessingMode");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorSetStreamAutoProcessingMode(ptr, pVideoProcessor, StreamIndex, Enable);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorSetStreamFilter_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _In_  D3D11_VIDEO_PROCESSOR_FILTER Filter, _In_  BOOL Enable, _In_  int Level)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorSetStreamFilter");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorSetStreamFilter(ptr, pVideoProcessor, StreamIndex, Filter, Enable, Level);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorSetStreamExtension_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _In_  const GUID * pExtensionGuid, _In_  UINT DataSize, _In_  void * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorSetStreamExtension");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorSetStreamExtension(ptr, pVideoProcessor, StreamIndex, pExtensionGuid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorGetStreamFrameFormat_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _Out_  D3D11_VIDEO_FRAME_FORMAT * pFrameFormat)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorGetStreamFrameFormat");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorGetStreamFrameFormat(ptr, pVideoProcessor, StreamIndex, pFrameFormat);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorGetStreamColorSpace_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _Out_  D3D11_VIDEO_PROCESSOR_COLOR_SPACE * pColorSpace)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorGetStreamColorSpace");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorGetStreamColorSpace(ptr, pVideoProcessor, StreamIndex, pColorSpace);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorGetStreamOutputRate_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _Out_  D3D11_VIDEO_PROCESSOR_OUTPUT_RATE * pOutputRate, _Out_  BOOL * pRepeatFrame, _Out_  DXGI_RATIONAL * pCustomRate)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorGetStreamOutputRate");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorGetStreamOutputRate(ptr, pVideoProcessor, StreamIndex, pOutputRate, pRepeatFrame, pCustomRate);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorGetStreamSourceRect_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _Out_  BOOL * pEnabled, _Out_  RECT * pRect)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorGetStreamSourceRect");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorGetStreamSourceRect(ptr, pVideoProcessor, StreamIndex, pEnabled, pRect);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorGetStreamDestRect_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _Out_  BOOL * pEnabled, _Out_  RECT * pRect)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorGetStreamDestRect");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorGetStreamDestRect(ptr, pVideoProcessor, StreamIndex, pEnabled, pRect);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorGetStreamAlpha_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _Out_  BOOL * pEnabled, _Out_  FLOAT * pAlpha)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorGetStreamAlpha");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorGetStreamAlpha(ptr, pVideoProcessor, StreamIndex, pEnabled, pAlpha);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorGetStreamPalette_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _In_  UINT Count, _Out_writes_(Count)  UINT * pEntries)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorGetStreamPalette");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorGetStreamPalette(ptr, pVideoProcessor, StreamIndex, Count, pEntries);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorGetStreamPixelAspectRatio_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _Out_  BOOL * pEnabled, _Out_  DXGI_RATIONAL * pSourceAspectRatio, _Out_  DXGI_RATIONAL * pDestinationAspectRatio)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorGetStreamPixelAspectRatio");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorGetStreamPixelAspectRatio(ptr, pVideoProcessor, StreamIndex, pEnabled, pSourceAspectRatio, pDestinationAspectRatio);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorGetStreamLumaKey_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _Out_  BOOL * pEnabled, _Out_  FLOAT * pLower, _Out_  FLOAT * pUpper)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorGetStreamLumaKey");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorGetStreamLumaKey(ptr, pVideoProcessor, StreamIndex, pEnabled, pLower, pUpper);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorGetStreamStereoFormat_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _Out_  BOOL * pEnable, _Out_  D3D11_VIDEO_PROCESSOR_STEREO_FORMAT * pFormat, _Out_  BOOL * pLeftViewFrame0, _Out_  BOOL * pBaseViewFrame0, _Out_  D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE * pFlipMode, _Out_  int * MonoOffset)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorGetStreamStereoFormat");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorGetStreamStereoFormat(ptr, pVideoProcessor, StreamIndex, pEnable, pFormat, pLeftViewFrame0, pBaseViewFrame0, pFlipMode, MonoOffset);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorGetStreamAutoProcessingMode_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _Out_  BOOL * pEnabled)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorGetStreamAutoProcessingMode");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorGetStreamAutoProcessingMode(ptr, pVideoProcessor, StreamIndex, pEnabled);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorGetStreamFilter_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _In_  D3D11_VIDEO_PROCESSOR_FILTER Filter, _Out_  BOOL * pEnabled, _Out_  int * pLevel)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorGetStreamFilter");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorGetStreamFilter(ptr, pVideoProcessor, StreamIndex, Filter, pEnabled, pLevel);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorGetStreamExtension_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _In_  const GUID * pExtensionGuid, _In_  UINT DataSize, _Out_  void * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorGetStreamExtension");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorGetStreamExtension(ptr, pVideoProcessor, StreamIndex, pExtensionGuid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorBlt_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  ID3D11VideoProcessorOutputView * pView, _In_  UINT OutputFrame, _In_  UINT StreamCount, _In_reads_(StreamCount)  const D3D11_VIDEO_PROCESSOR_STREAM * pStreams)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorBlt");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorBlt(ptr, pVideoProcessor, pView, OutputFrame, StreamCount, pStreams);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoContext_NegotiateCryptoSessionKeyExchange_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11CryptoSession * pCryptoSession, _In_  UINT DataSize, _Inout_updates_bytes_(DataSize)  void * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::NegotiateCryptoSessionKeyExchange");
    return g_D3D11OriginVTables._ID3D11VideoContext.NegotiateCryptoSessionKeyExchange(ptr, pCryptoSession, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_EncryptionBlt_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11CryptoSession * pCryptoSession, _In_  ID3D11Texture2D * pSrcSurface, _In_  ID3D11Texture2D * pDstSurface, _In_  UINT IVSize, _In_reads_bytes_opt_(IVSize)  void * pIV)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::EncryptionBlt");
    return g_D3D11OriginVTables._ID3D11VideoContext.EncryptionBlt(ptr, pCryptoSession, pSrcSurface, pDstSurface, IVSize, pIV);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_DecryptionBlt_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11CryptoSession * pCryptoSession, _In_  ID3D11Texture2D * pSrcSurface, _In_  ID3D11Texture2D * pDstSurface, _In_opt_  D3D11_ENCRYPTED_BLOCK_INFO * pEncryptedBlockInfo, _In_  UINT ContentKeySize, _In_reads_bytes_opt_(ContentKeySize)  const void * pContentKey, _In_  UINT IVSize, _In_reads_bytes_opt_(IVSize)  void * pIV)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::DecryptionBlt");
    return g_D3D11OriginVTables._ID3D11VideoContext.DecryptionBlt(ptr, pCryptoSession, pSrcSurface, pDstSurface, pEncryptedBlockInfo, ContentKeySize, pContentKey, IVSize, pIV);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_StartSessionKeyRefresh_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11CryptoSession * pCryptoSession, _In_  UINT RandomNumberSize, _Out_writes_bytes_(RandomNumberSize)  void * pRandomNumber)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::StartSessionKeyRefresh");
    return g_D3D11OriginVTables._ID3D11VideoContext.StartSessionKeyRefresh(ptr, pCryptoSession, RandomNumberSize, pRandomNumber);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_FinishSessionKeyRefresh_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11CryptoSession * pCryptoSession)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::FinishSessionKeyRefresh");
    return g_D3D11OriginVTables._ID3D11VideoContext.FinishSessionKeyRefresh(ptr, pCryptoSession);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoContext_GetEncryptionBltKey_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11CryptoSession * pCryptoSession, _In_  UINT KeySize, _Out_writes_bytes_(KeySize)  void * pReadbackKey)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::GetEncryptionBltKey");
    return g_D3D11OriginVTables._ID3D11VideoContext.GetEncryptionBltKey(ptr, pCryptoSession, KeySize, pReadbackKey);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoContext_NegotiateAuthenticatedChannelKeyExchange_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11AuthenticatedChannel * pChannel, _In_  UINT DataSize, _Inout_updates_bytes_(DataSize)  void * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::NegotiateAuthenticatedChannelKeyExchange");
    return g_D3D11OriginVTables._ID3D11VideoContext.NegotiateAuthenticatedChannelKeyExchange(ptr, pChannel, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoContext_QueryAuthenticatedChannel_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11AuthenticatedChannel * pChannel, _In_  UINT InputSize, _In_reads_bytes_(InputSize)  const void * pInput, _In_  UINT OutputSize, _Out_writes_bytes_(OutputSize)  void * pOutput)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::QueryAuthenticatedChannel");
    return g_D3D11OriginVTables._ID3D11VideoContext.QueryAuthenticatedChannel(ptr, pChannel, InputSize, pInput, OutputSize, pOutput);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoContext_ConfigureAuthenticatedChannel_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11AuthenticatedChannel * pChannel, _In_  UINT InputSize, _In_reads_bytes_(InputSize)  const void * pInput, _Out_  D3D11_AUTHENTICATED_CONFIGURE_OUTPUT * pOutput)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::ConfigureAuthenticatedChannel");
    return g_D3D11OriginVTables._ID3D11VideoContext.ConfigureAuthenticatedChannel(ptr, pChannel, InputSize, pInput, pOutput);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorSetStreamRotation_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _In_  BOOL Enable, _In_  D3D11_VIDEO_PROCESSOR_ROTATION Rotation)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorSetStreamRotation");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorSetStreamRotation(ptr, pVideoProcessor, StreamIndex, Enable, Rotation);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11VideoContext_VideoProcessorGetStreamRotation_Hooked(ID3D11VideoContext * ptr, _In_  ID3D11VideoProcessor * pVideoProcessor, _In_  UINT StreamIndex, _Out_  BOOL * pEnable, _Out_  D3D11_VIDEO_PROCESSOR_ROTATION * pRotation)
{
    calltrace::AutoTrace trace("ID3D11VideoContext::VideoProcessorGetStreamRotation");
    return g_D3D11OriginVTables._ID3D11VideoContext.VideoProcessorGetStreamRotation(ptr, pVideoProcessor, StreamIndex, pEnable, pRotation);
}

// -----------------------------------------------------------------------------
// ID3D11VideoDeviceHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11VideoDevice(ID3D11VideoDevice * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11VideoDeviceVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11VideoDevice);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11VideoDevice);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11VideoDevice");
}
template <> inline void RealToHooked11<ID3D11VideoDevice>(ID3D11VideoDevice * p)
{
    return RealToHooked11_ID3D11VideoDevice( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDevice_QueryInterface_Hooked(ID3D11VideoDevice * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11VideoDevice::QueryInterface");
    return g_D3D11OriginVTables._ID3D11VideoDevice.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11VideoDevice_AddRef_Hooked(ID3D11VideoDevice * ptr)
{
    calltrace::AutoTrace trace("ID3D11VideoDevice::AddRef");
    return g_D3D11OriginVTables._ID3D11VideoDevice.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11VideoDevice_Release_Hooked(ID3D11VideoDevice * ptr)
{
    calltrace::AutoTrace trace("ID3D11VideoDevice::Release");
    return g_D3D11OriginVTables._ID3D11VideoDevice.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDevice_CreateVideoDecoder_Hooked(ID3D11VideoDevice * ptr, _In_  const D3D11_VIDEO_DECODER_DESC * pVideoDesc, _In_  const D3D11_VIDEO_DECODER_CONFIG * pConfig, _Out_  ID3D11VideoDecoder ** ppDecoder)
{
    calltrace::AutoTrace trace("ID3D11VideoDevice::CreateVideoDecoder");
    return g_D3D11OriginVTables._ID3D11VideoDevice.CreateVideoDecoder(ptr, pVideoDesc, pConfig, ppDecoder);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDevice_CreateVideoProcessor_Hooked(ID3D11VideoDevice * ptr, _In_  ID3D11VideoProcessorEnumerator * pEnum, _In_  UINT RateConversionIndex, _Out_  ID3D11VideoProcessor ** ppVideoProcessor)
{
    calltrace::AutoTrace trace("ID3D11VideoDevice::CreateVideoProcessor");
    return g_D3D11OriginVTables._ID3D11VideoDevice.CreateVideoProcessor(ptr, pEnum, RateConversionIndex, ppVideoProcessor);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDevice_CreateAuthenticatedChannel_Hooked(ID3D11VideoDevice * ptr, _In_  D3D11_AUTHENTICATED_CHANNEL_TYPE ChannelType, _Out_  ID3D11AuthenticatedChannel ** ppAuthenticatedChannel)
{
    calltrace::AutoTrace trace("ID3D11VideoDevice::CreateAuthenticatedChannel");
    return g_D3D11OriginVTables._ID3D11VideoDevice.CreateAuthenticatedChannel(ptr, ChannelType, ppAuthenticatedChannel);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDevice_CreateCryptoSession_Hooked(ID3D11VideoDevice * ptr, _In_  const GUID * pCryptoType, _In_opt_  const GUID * pDecoderProfile, _In_  const GUID * pKeyExchangeType, _Outptr_  ID3D11CryptoSession ** ppCryptoSession)
{
    calltrace::AutoTrace trace("ID3D11VideoDevice::CreateCryptoSession");
    return g_D3D11OriginVTables._ID3D11VideoDevice.CreateCryptoSession(ptr, pCryptoType, pDecoderProfile, pKeyExchangeType, ppCryptoSession);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDevice_CreateVideoDecoderOutputView_Hooked(ID3D11VideoDevice * ptr, _In_  ID3D11Resource * pResource, _In_  const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC * pDesc, _Out_opt_  ID3D11VideoDecoderOutputView ** ppVDOVView)
{
    calltrace::AutoTrace trace("ID3D11VideoDevice::CreateVideoDecoderOutputView");
    return g_D3D11OriginVTables._ID3D11VideoDevice.CreateVideoDecoderOutputView(ptr, pResource, pDesc, ppVDOVView);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDevice_CreateVideoProcessorInputView_Hooked(ID3D11VideoDevice * ptr, _In_  ID3D11Resource * pResource, _In_  ID3D11VideoProcessorEnumerator * pEnum, _In_  const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC * pDesc, _Out_opt_  ID3D11VideoProcessorInputView ** ppVPIView)
{
    calltrace::AutoTrace trace("ID3D11VideoDevice::CreateVideoProcessorInputView");
    return g_D3D11OriginVTables._ID3D11VideoDevice.CreateVideoProcessorInputView(ptr, pResource, pEnum, pDesc, ppVPIView);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDevice_CreateVideoProcessorOutputView_Hooked(ID3D11VideoDevice * ptr, _In_  ID3D11Resource * pResource, _In_  ID3D11VideoProcessorEnumerator * pEnum, _In_  const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC * pDesc, _Out_opt_  ID3D11VideoProcessorOutputView ** ppVPOView)
{
    calltrace::AutoTrace trace("ID3D11VideoDevice::CreateVideoProcessorOutputView");
    return g_D3D11OriginVTables._ID3D11VideoDevice.CreateVideoProcessorOutputView(ptr, pResource, pEnum, pDesc, ppVPOView);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDevice_CreateVideoProcessorEnumerator_Hooked(ID3D11VideoDevice * ptr, _In_  const D3D11_VIDEO_PROCESSOR_CONTENT_DESC * pDesc, _Out_  ID3D11VideoProcessorEnumerator ** ppEnum)
{
    calltrace::AutoTrace trace("ID3D11VideoDevice::CreateVideoProcessorEnumerator");
    return g_D3D11OriginVTables._ID3D11VideoDevice.CreateVideoProcessorEnumerator(ptr, pDesc, ppEnum);
}

// -----------------------------------------------------------------------------
static inline UINT STDMETHODCALLTYPE ID3D11VideoDevice_GetVideoDecoderProfileCount_Hooked(ID3D11VideoDevice * ptr)
{
    calltrace::AutoTrace trace("ID3D11VideoDevice::GetVideoDecoderProfileCount");
    return g_D3D11OriginVTables._ID3D11VideoDevice.GetVideoDecoderProfileCount(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDevice_GetVideoDecoderProfile_Hooked(ID3D11VideoDevice * ptr, _In_  UINT Index, _Out_  GUID * pDecoderProfile)
{
    calltrace::AutoTrace trace("ID3D11VideoDevice::GetVideoDecoderProfile");
    return g_D3D11OriginVTables._ID3D11VideoDevice.GetVideoDecoderProfile(ptr, Index, pDecoderProfile);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDevice_CheckVideoDecoderFormat_Hooked(ID3D11VideoDevice * ptr, _In_  const GUID * pDecoderProfile, _In_  DXGI_FORMAT Format, _Out_  BOOL * pSupported)
{
    calltrace::AutoTrace trace("ID3D11VideoDevice::CheckVideoDecoderFormat");
    return g_D3D11OriginVTables._ID3D11VideoDevice.CheckVideoDecoderFormat(ptr, pDecoderProfile, Format, pSupported);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDevice_GetVideoDecoderConfigCount_Hooked(ID3D11VideoDevice * ptr, _In_  const D3D11_VIDEO_DECODER_DESC * pDesc, _Out_  UINT * pCount)
{
    calltrace::AutoTrace trace("ID3D11VideoDevice::GetVideoDecoderConfigCount");
    return g_D3D11OriginVTables._ID3D11VideoDevice.GetVideoDecoderConfigCount(ptr, pDesc, pCount);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDevice_GetVideoDecoderConfig_Hooked(ID3D11VideoDevice * ptr, _In_  const D3D11_VIDEO_DECODER_DESC * pDesc, _In_  UINT Index, _Out_  D3D11_VIDEO_DECODER_CONFIG * pConfig)
{
    calltrace::AutoTrace trace("ID3D11VideoDevice::GetVideoDecoderConfig");
    return g_D3D11OriginVTables._ID3D11VideoDevice.GetVideoDecoderConfig(ptr, pDesc, Index, pConfig);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDevice_GetContentProtectionCaps_Hooked(ID3D11VideoDevice * ptr, _In_opt_  const GUID * pCryptoType, _In_opt_  const GUID * pDecoderProfile, _Out_  D3D11_VIDEO_CONTENT_PROTECTION_CAPS * pCaps)
{
    calltrace::AutoTrace trace("ID3D11VideoDevice::GetContentProtectionCaps");
    return g_D3D11OriginVTables._ID3D11VideoDevice.GetContentProtectionCaps(ptr, pCryptoType, pDecoderProfile, pCaps);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDevice_CheckCryptoKeyExchange_Hooked(ID3D11VideoDevice * ptr, _In_  const GUID * pCryptoType, _In_opt_  const GUID * pDecoderProfile, _In_  UINT Index, _Out_  GUID * pKeyExchangeType)
{
    calltrace::AutoTrace trace("ID3D11VideoDevice::CheckCryptoKeyExchange");
    return g_D3D11OriginVTables._ID3D11VideoDevice.CheckCryptoKeyExchange(ptr, pCryptoType, pDecoderProfile, Index, pKeyExchangeType);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDevice_SetPrivateData_Hooked(ID3D11VideoDevice * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_(DataSize)  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoDevice::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11VideoDevice.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11VideoDevice_SetPrivateDataInterface_Hooked(ID3D11VideoDevice * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11VideoDevice::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11VideoDevice.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
// ID3D11DeviceHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11Device(ID3D11Device * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11DeviceVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11Device);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11Device);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11Device");
}
template <> inline void RealToHooked11<ID3D11Device>(ID3D11Device * p)
{
    return RealToHooked11_ID3D11Device( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_QueryInterface_Hooked(ID3D11Device * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11Device::QueryInterface");
    return g_D3D11OriginVTables._ID3D11Device.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11Device_AddRef_Hooked(ID3D11Device * ptr)
{
    calltrace::AutoTrace trace("ID3D11Device::AddRef");
    return g_D3D11OriginVTables._ID3D11Device.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11Device_Release_Hooked(ID3D11Device * ptr)
{
    calltrace::AutoTrace trace("ID3D11Device::Release");
    return g_D3D11OriginVTables._ID3D11Device.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CreateBuffer_Hooked(ID3D11Device * ptr, _In_  const D3D11_BUFFER_DESC * pDesc, _In_opt_  const D3D11_SUBRESOURCE_DATA * pInitialData, _Out_opt_  ID3D11Buffer ** ppBuffer)
{
    calltrace::AutoTrace trace("ID3D11Device::CreateBuffer");
    return g_D3D11OriginVTables._ID3D11Device.CreateBuffer(ptr, pDesc, pInitialData, ppBuffer);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CreateTexture1D_Hooked(ID3D11Device * ptr, _In_  const D3D11_TEXTURE1D_DESC * pDesc, _In_reads_opt_(_Inexpressible_(pDesc->MipLevels * pDesc->ArraySize))  const D3D11_SUBRESOURCE_DATA * pInitialData, _Out_opt_  ID3D11Texture1D ** ppTexture1D)
{
    calltrace::AutoTrace trace("ID3D11Device::CreateTexture1D");
    return g_D3D11OriginVTables._ID3D11Device.CreateTexture1D(ptr, pDesc, pInitialData, ppTexture1D);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CreateTexture2D_Hooked(ID3D11Device * ptr, _In_  const D3D11_TEXTURE2D_DESC * pDesc, _In_reads_opt_(_Inexpressible_(pDesc->MipLevels * pDesc->ArraySize))  const D3D11_SUBRESOURCE_DATA * pInitialData, _Out_opt_  ID3D11Texture2D ** ppTexture2D)
{
    calltrace::AutoTrace trace("ID3D11Device::CreateTexture2D");
    return g_D3D11OriginVTables._ID3D11Device.CreateTexture2D(ptr, pDesc, pInitialData, ppTexture2D);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CreateTexture3D_Hooked(ID3D11Device * ptr, _In_  const D3D11_TEXTURE3D_DESC * pDesc, _In_reads_opt_(_Inexpressible_(pDesc->MipLevels))  const D3D11_SUBRESOURCE_DATA * pInitialData, _Out_opt_  ID3D11Texture3D ** ppTexture3D)
{
    calltrace::AutoTrace trace("ID3D11Device::CreateTexture3D");
    return g_D3D11OriginVTables._ID3D11Device.CreateTexture3D(ptr, pDesc, pInitialData, ppTexture3D);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CreateShaderResourceView_Hooked(ID3D11Device * ptr, _In_  ID3D11Resource * pResource, _In_opt_  const D3D11_SHADER_RESOURCE_VIEW_DESC * pDesc, _Out_opt_  ID3D11ShaderResourceView ** ppSRView)
{
    calltrace::AutoTrace trace("ID3D11Device::CreateShaderResourceView");
    return g_D3D11OriginVTables._ID3D11Device.CreateShaderResourceView(ptr, pResource, pDesc, ppSRView);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CreateUnorderedAccessView_Hooked(ID3D11Device * ptr, _In_  ID3D11Resource * pResource, _In_opt_  const D3D11_UNORDERED_ACCESS_VIEW_DESC * pDesc, _Out_opt_  ID3D11UnorderedAccessView ** ppUAView)
{
    calltrace::AutoTrace trace("ID3D11Device::CreateUnorderedAccessView");
    return g_D3D11OriginVTables._ID3D11Device.CreateUnorderedAccessView(ptr, pResource, pDesc, ppUAView);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CreateRenderTargetView_Hooked(ID3D11Device * ptr, _In_  ID3D11Resource * pResource, _In_opt_  const D3D11_RENDER_TARGET_VIEW_DESC * pDesc, _Out_opt_  ID3D11RenderTargetView ** ppRTView)
{
    calltrace::AutoTrace trace("ID3D11Device::CreateRenderTargetView");
    return g_D3D11OriginVTables._ID3D11Device.CreateRenderTargetView(ptr, pResource, pDesc, ppRTView);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CreateDepthStencilView_Hooked(ID3D11Device * ptr, _In_  ID3D11Resource * pResource, _In_opt_  const D3D11_DEPTH_STENCIL_VIEW_DESC * pDesc, _Out_opt_  ID3D11DepthStencilView ** ppDepthStencilView)
{
    calltrace::AutoTrace trace("ID3D11Device::CreateDepthStencilView");
    return g_D3D11OriginVTables._ID3D11Device.CreateDepthStencilView(ptr, pResource, pDesc, ppDepthStencilView);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CreateInputLayout_Hooked(ID3D11Device * ptr, _In_reads_(NumElements)  const D3D11_INPUT_ELEMENT_DESC * pInputElementDescs, _In_range_( 0, D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT )  UINT NumElements, _In_  const void * pShaderBytecodeWithInputSignature, _In_  SIZE_T BytecodeLength, _Out_opt_  ID3D11InputLayout ** ppInputLayout)
{
    calltrace::AutoTrace trace("ID3D11Device::CreateInputLayout");
    return g_D3D11OriginVTables._ID3D11Device.CreateInputLayout(ptr, pInputElementDescs, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayout);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CreateVertexShader_Hooked(ID3D11Device * ptr, _In_  const void * pShaderBytecode, _In_  SIZE_T BytecodeLength, _In_opt_  ID3D11ClassLinkage * pClassLinkage, _Out_opt_  ID3D11VertexShader ** ppVertexShader)
{
    calltrace::AutoTrace trace("ID3D11Device::CreateVertexShader");
    return g_D3D11OriginVTables._ID3D11Device.CreateVertexShader(ptr, pShaderBytecode, BytecodeLength, pClassLinkage, ppVertexShader);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CreateGeometryShader_Hooked(ID3D11Device * ptr, _In_  const void * pShaderBytecode, _In_  SIZE_T BytecodeLength, _In_opt_  ID3D11ClassLinkage * pClassLinkage, _Out_opt_  ID3D11GeometryShader ** ppGeometryShader)
{
    calltrace::AutoTrace trace("ID3D11Device::CreateGeometryShader");
    return g_D3D11OriginVTables._ID3D11Device.CreateGeometryShader(ptr, pShaderBytecode, BytecodeLength, pClassLinkage, ppGeometryShader);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CreateGeometryShaderWithStreamOutput_Hooked(ID3D11Device * ptr, _In_  const void * pShaderBytecode, _In_  SIZE_T BytecodeLength, _In_reads_opt_(NumEntries)  const D3D11_SO_DECLARATION_ENTRY * pSODeclaration, _In_range_( 0, D3D11_SO_STREAM_COUNT * D3D11_SO_OUTPUT_COMPONENT_COUNT )  UINT NumEntries, _In_reads_opt_(NumStrides)  const UINT * pBufferStrides, _In_range_( 0, D3D11_SO_BUFFER_SLOT_COUNT )  UINT NumStrides, _In_  UINT RasterizedStream, _In_opt_  ID3D11ClassLinkage * pClassLinkage, _Out_opt_  ID3D11GeometryShader ** ppGeometryShader)
{
    calltrace::AutoTrace trace("ID3D11Device::CreateGeometryShaderWithStreamOutput");
    return g_D3D11OriginVTables._ID3D11Device.CreateGeometryShaderWithStreamOutput(ptr, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CreatePixelShader_Hooked(ID3D11Device * ptr, _In_  const void * pShaderBytecode, _In_  SIZE_T BytecodeLength, _In_opt_  ID3D11ClassLinkage * pClassLinkage, _Out_opt_  ID3D11PixelShader ** ppPixelShader)
{
    calltrace::AutoTrace trace("ID3D11Device::CreatePixelShader");
    return g_D3D11OriginVTables._ID3D11Device.CreatePixelShader(ptr, pShaderBytecode, BytecodeLength, pClassLinkage, ppPixelShader);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CreateHullShader_Hooked(ID3D11Device * ptr, _In_  const void * pShaderBytecode, _In_  SIZE_T BytecodeLength, _In_opt_  ID3D11ClassLinkage * pClassLinkage, _Out_opt_  ID3D11HullShader ** ppHullShader)
{
    calltrace::AutoTrace trace("ID3D11Device::CreateHullShader");
    return g_D3D11OriginVTables._ID3D11Device.CreateHullShader(ptr, pShaderBytecode, BytecodeLength, pClassLinkage, ppHullShader);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CreateDomainShader_Hooked(ID3D11Device * ptr, _In_  const void * pShaderBytecode, _In_  SIZE_T BytecodeLength, _In_opt_  ID3D11ClassLinkage * pClassLinkage, _Out_opt_  ID3D11DomainShader ** ppDomainShader)
{
    calltrace::AutoTrace trace("ID3D11Device::CreateDomainShader");
    return g_D3D11OriginVTables._ID3D11Device.CreateDomainShader(ptr, pShaderBytecode, BytecodeLength, pClassLinkage, ppDomainShader);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CreateComputeShader_Hooked(ID3D11Device * ptr, _In_  const void * pShaderBytecode, _In_  SIZE_T BytecodeLength, _In_opt_  ID3D11ClassLinkage * pClassLinkage, _Out_opt_  ID3D11ComputeShader ** ppComputeShader)
{
    calltrace::AutoTrace trace("ID3D11Device::CreateComputeShader");
    return g_D3D11OriginVTables._ID3D11Device.CreateComputeShader(ptr, pShaderBytecode, BytecodeLength, pClassLinkage, ppComputeShader);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CreateClassLinkage_Hooked(ID3D11Device * ptr, _Out_  ID3D11ClassLinkage ** ppLinkage)
{
    calltrace::AutoTrace trace("ID3D11Device::CreateClassLinkage");
    return g_D3D11OriginVTables._ID3D11Device.CreateClassLinkage(ptr, ppLinkage);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CreateBlendState_Hooked(ID3D11Device * ptr, _In_  const D3D11_BLEND_DESC * pBlendStateDesc, _Out_opt_  ID3D11BlendState ** ppBlendState)
{
    calltrace::AutoTrace trace("ID3D11Device::CreateBlendState");
    return g_D3D11OriginVTables._ID3D11Device.CreateBlendState(ptr, pBlendStateDesc, ppBlendState);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CreateDepthStencilState_Hooked(ID3D11Device * ptr, _In_  const D3D11_DEPTH_STENCIL_DESC * pDepthStencilDesc, _Out_opt_  ID3D11DepthStencilState ** ppDepthStencilState)
{
    calltrace::AutoTrace trace("ID3D11Device::CreateDepthStencilState");
    return g_D3D11OriginVTables._ID3D11Device.CreateDepthStencilState(ptr, pDepthStencilDesc, ppDepthStencilState);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CreateRasterizerState_Hooked(ID3D11Device * ptr, _In_  const D3D11_RASTERIZER_DESC * pRasterizerDesc, _Out_opt_  ID3D11RasterizerState ** ppRasterizerState)
{
    calltrace::AutoTrace trace("ID3D11Device::CreateRasterizerState");
    return g_D3D11OriginVTables._ID3D11Device.CreateRasterizerState(ptr, pRasterizerDesc, ppRasterizerState);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CreateSamplerState_Hooked(ID3D11Device * ptr, _In_  const D3D11_SAMPLER_DESC * pSamplerDesc, _Out_opt_  ID3D11SamplerState ** ppSamplerState)
{
    calltrace::AutoTrace trace("ID3D11Device::CreateSamplerState");
    return g_D3D11OriginVTables._ID3D11Device.CreateSamplerState(ptr, pSamplerDesc, ppSamplerState);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CreateQuery_Hooked(ID3D11Device * ptr, _In_  const D3D11_QUERY_DESC * pQueryDesc, _Out_opt_  ID3D11Query ** ppQuery)
{
    calltrace::AutoTrace trace("ID3D11Device::CreateQuery");
    return g_D3D11OriginVTables._ID3D11Device.CreateQuery(ptr, pQueryDesc, ppQuery);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CreatePredicate_Hooked(ID3D11Device * ptr, _In_  const D3D11_QUERY_DESC * pPredicateDesc, _Out_opt_  ID3D11Predicate ** ppPredicate)
{
    calltrace::AutoTrace trace("ID3D11Device::CreatePredicate");
    return g_D3D11OriginVTables._ID3D11Device.CreatePredicate(ptr, pPredicateDesc, ppPredicate);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CreateCounter_Hooked(ID3D11Device * ptr, _In_  const D3D11_COUNTER_DESC * pCounterDesc, _Out_opt_  ID3D11Counter ** ppCounter)
{
    calltrace::AutoTrace trace("ID3D11Device::CreateCounter");
    return g_D3D11OriginVTables._ID3D11Device.CreateCounter(ptr, pCounterDesc, ppCounter);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CreateDeferredContext_Hooked(ID3D11Device * ptr, UINT ContextFlags, _Out_opt_  ID3D11DeviceContext ** ppDeferredContext)
{
    calltrace::AutoTrace trace("ID3D11Device::CreateDeferredContext");
    return g_D3D11OriginVTables._ID3D11Device.CreateDeferredContext(ptr, ContextFlags, ppDeferredContext);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_OpenSharedResource_Hooked(ID3D11Device * ptr, _In_  HANDLE hResource, _In_  REFIID ReturnedInterface, _Out_opt_  void ** ppResource)
{
    calltrace::AutoTrace trace("ID3D11Device::OpenSharedResource");
    return g_D3D11OriginVTables._ID3D11Device.OpenSharedResource(ptr, hResource, ReturnedInterface, ppResource);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CheckFormatSupport_Hooked(ID3D11Device * ptr, _In_  DXGI_FORMAT Format, _Out_  UINT * pFormatSupport)
{
    calltrace::AutoTrace trace("ID3D11Device::CheckFormatSupport");
    return g_D3D11OriginVTables._ID3D11Device.CheckFormatSupport(ptr, Format, pFormatSupport);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CheckMultisampleQualityLevels_Hooked(ID3D11Device * ptr, _In_  DXGI_FORMAT Format, _In_  UINT SampleCount, _Out_  UINT * pNumQualityLevels)
{
    calltrace::AutoTrace trace("ID3D11Device::CheckMultisampleQualityLevels");
    return g_D3D11OriginVTables._ID3D11Device.CheckMultisampleQualityLevels(ptr, Format, SampleCount, pNumQualityLevels);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Device_CheckCounterInfo_Hooked(ID3D11Device * ptr, _Out_  D3D11_COUNTER_INFO * pCounterInfo)
{
    calltrace::AutoTrace trace("ID3D11Device::CheckCounterInfo");
    return g_D3D11OriginVTables._ID3D11Device.CheckCounterInfo(ptr, pCounterInfo);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CheckCounter_Hooked(ID3D11Device * ptr, _In_  const D3D11_COUNTER_DESC * pDesc, _Out_  D3D11_COUNTER_TYPE * pType, _Out_  UINT * pActiveCounters, _Out_writes_opt_(*pNameLength)  LPSTR szName, _Inout_opt_  UINT * pNameLength, _Out_writes_opt_(*pUnitsLength)  LPSTR szUnits, _Inout_opt_  UINT * pUnitsLength, _Out_writes_opt_(*pDescriptionLength)  LPSTR szDescription, _Inout_opt_  UINT * pDescriptionLength)
{
    calltrace::AutoTrace trace("ID3D11Device::CheckCounter");
    return g_D3D11OriginVTables._ID3D11Device.CheckCounter(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_CheckFeatureSupport_Hooked(ID3D11Device * ptr, D3D11_FEATURE Feature, _Out_writes_bytes_(FeatureSupportDataSize)  void * pFeatureSupportData, UINT FeatureSupportDataSize)
{
    calltrace::AutoTrace trace("ID3D11Device::CheckFeatureSupport");
    return g_D3D11OriginVTables._ID3D11Device.CheckFeatureSupport(ptr, Feature, pFeatureSupportData, FeatureSupportDataSize);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_GetPrivateData_Hooked(ID3D11Device * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_(*pDataSize)  void * pData)
{
    calltrace::AutoTrace trace("ID3D11Device::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11Device.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_SetPrivateData_Hooked(ID3D11Device * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_(DataSize)  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11Device::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11Device.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_SetPrivateDataInterface_Hooked(ID3D11Device * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11Device::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11Device.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline D3D_FEATURE_LEVEL STDMETHODCALLTYPE ID3D11Device_GetFeatureLevel_Hooked(ID3D11Device * ptr)
{
    calltrace::AutoTrace trace("ID3D11Device::GetFeatureLevel");
    return g_D3D11OriginVTables._ID3D11Device.GetFeatureLevel(ptr);
}

// -----------------------------------------------------------------------------
static inline UINT STDMETHODCALLTYPE ID3D11Device_GetCreationFlags_Hooked(ID3D11Device * ptr)
{
    calltrace::AutoTrace trace("ID3D11Device::GetCreationFlags");
    return g_D3D11OriginVTables._ID3D11Device.GetCreationFlags(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_GetDeviceRemovedReason_Hooked(ID3D11Device * ptr)
{
    calltrace::AutoTrace trace("ID3D11Device::GetDeviceRemovedReason");
    return g_D3D11OriginVTables._ID3D11Device.GetDeviceRemovedReason(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Device_GetImmediateContext_Hooked(ID3D11Device * ptr, _Out_  ID3D11DeviceContext ** ppImmediateContext)
{
    calltrace::AutoTrace trace("ID3D11Device::GetImmediateContext");
    return g_D3D11OriginVTables._ID3D11Device.GetImmediateContext(ptr, ppImmediateContext);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device_SetExceptionMode_Hooked(ID3D11Device * ptr, UINT RaiseFlags)
{
    calltrace::AutoTrace trace("ID3D11Device::SetExceptionMode");
    return g_D3D11OriginVTables._ID3D11Device.SetExceptionMode(ptr, RaiseFlags);
}

// -----------------------------------------------------------------------------
static inline UINT STDMETHODCALLTYPE ID3D11Device_GetExceptionMode_Hooked(ID3D11Device * ptr)
{
    calltrace::AutoTrace trace("ID3D11Device::GetExceptionMode");
    return g_D3D11OriginVTables._ID3D11Device.GetExceptionMode(ptr);
}

// -----------------------------------------------------------------------------
// ID3D11BlendState1Hook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11BlendState1(ID3D11BlendState1 * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11BlendState1Vtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11BlendState1);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11BlendState1);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11BlendState1");
}
template <> inline void RealToHooked11<ID3D11BlendState1>(ID3D11BlendState1 * p)
{
    return RealToHooked11_ID3D11BlendState1( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11BlendState1_QueryInterface_Hooked(ID3D11BlendState1 * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11BlendState1::QueryInterface");
    return g_D3D11OriginVTables._ID3D11BlendState1.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11BlendState1_AddRef_Hooked(ID3D11BlendState1 * ptr)
{
    calltrace::AutoTrace trace("ID3D11BlendState1::AddRef");
    return g_D3D11OriginVTables._ID3D11BlendState1.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11BlendState1_Release_Hooked(ID3D11BlendState1 * ptr)
{
    calltrace::AutoTrace trace("ID3D11BlendState1::Release");
    return g_D3D11OriginVTables._ID3D11BlendState1.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11BlendState1_GetDevice_Hooked(ID3D11BlendState1 * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11BlendState1::GetDevice");
    return g_D3D11OriginVTables._ID3D11BlendState1.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11BlendState1_GetPrivateData_Hooked(ID3D11BlendState1 * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11BlendState1::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11BlendState1.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11BlendState1_SetPrivateData_Hooked(ID3D11BlendState1 * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11BlendState1::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11BlendState1.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11BlendState1_SetPrivateDataInterface_Hooked(ID3D11BlendState1 * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11BlendState1::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11BlendState1.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11BlendState1_GetDesc_Hooked(ID3D11BlendState1 * ptr, _Out_  D3D11_BLEND_DESC * pDesc)
{
    calltrace::AutoTrace trace("ID3D11BlendState1::GetDesc");
    return g_D3D11OriginVTables._ID3D11BlendState1.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11BlendState1_GetDesc1_Hooked(ID3D11BlendState1 * ptr, _Out_  D3D11_BLEND_DESC1 * pDesc)
{
    calltrace::AutoTrace trace("ID3D11BlendState1::GetDesc1");
    return g_D3D11OriginVTables._ID3D11BlendState1.GetDesc1(ptr, pDesc);
}

// -----------------------------------------------------------------------------
// ID3D11RasterizerState1Hook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11RasterizerState1(ID3D11RasterizerState1 * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11RasterizerState1Vtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11RasterizerState1);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11RasterizerState1);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11RasterizerState1");
}
template <> inline void RealToHooked11<ID3D11RasterizerState1>(ID3D11RasterizerState1 * p)
{
    return RealToHooked11_ID3D11RasterizerState1( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11RasterizerState1_QueryInterface_Hooked(ID3D11RasterizerState1 * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11RasterizerState1::QueryInterface");
    return g_D3D11OriginVTables._ID3D11RasterizerState1.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11RasterizerState1_AddRef_Hooked(ID3D11RasterizerState1 * ptr)
{
    calltrace::AutoTrace trace("ID3D11RasterizerState1::AddRef");
    return g_D3D11OriginVTables._ID3D11RasterizerState1.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11RasterizerState1_Release_Hooked(ID3D11RasterizerState1 * ptr)
{
    calltrace::AutoTrace trace("ID3D11RasterizerState1::Release");
    return g_D3D11OriginVTables._ID3D11RasterizerState1.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11RasterizerState1_GetDevice_Hooked(ID3D11RasterizerState1 * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11RasterizerState1::GetDevice");
    return g_D3D11OriginVTables._ID3D11RasterizerState1.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11RasterizerState1_GetPrivateData_Hooked(ID3D11RasterizerState1 * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11RasterizerState1::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11RasterizerState1.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11RasterizerState1_SetPrivateData_Hooked(ID3D11RasterizerState1 * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11RasterizerState1::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11RasterizerState1.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11RasterizerState1_SetPrivateDataInterface_Hooked(ID3D11RasterizerState1 * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11RasterizerState1::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11RasterizerState1.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11RasterizerState1_GetDesc_Hooked(ID3D11RasterizerState1 * ptr, _Out_  D3D11_RASTERIZER_DESC * pDesc)
{
    calltrace::AutoTrace trace("ID3D11RasterizerState1::GetDesc");
    return g_D3D11OriginVTables._ID3D11RasterizerState1.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11RasterizerState1_GetDesc1_Hooked(ID3D11RasterizerState1 * ptr, _Out_  D3D11_RASTERIZER_DESC1 * pDesc)
{
    calltrace::AutoTrace trace("ID3D11RasterizerState1::GetDesc1");
    return g_D3D11OriginVTables._ID3D11RasterizerState1.GetDesc1(ptr, pDesc);
}

// -----------------------------------------------------------------------------
// ID3DDeviceContextStateHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3DDeviceContextState(ID3DDeviceContextState * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3DDeviceContextStateVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3DDeviceContextState);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3DDeviceContextState);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3DDeviceContextState");
}
template <> inline void RealToHooked11<ID3DDeviceContextState>(ID3DDeviceContextState * p)
{
    return RealToHooked11_ID3DDeviceContextState( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3DDeviceContextState_QueryInterface_Hooked(ID3DDeviceContextState * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3DDeviceContextState::QueryInterface");
    return g_D3D11OriginVTables._ID3DDeviceContextState.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3DDeviceContextState_AddRef_Hooked(ID3DDeviceContextState * ptr)
{
    calltrace::AutoTrace trace("ID3DDeviceContextState::AddRef");
    return g_D3D11OriginVTables._ID3DDeviceContextState.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3DDeviceContextState_Release_Hooked(ID3DDeviceContextState * ptr)
{
    calltrace::AutoTrace trace("ID3DDeviceContextState::Release");
    return g_D3D11OriginVTables._ID3DDeviceContextState.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3DDeviceContextState_GetDevice_Hooked(ID3DDeviceContextState * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3DDeviceContextState::GetDevice");
    return g_D3D11OriginVTables._ID3DDeviceContextState.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3DDeviceContextState_GetPrivateData_Hooked(ID3DDeviceContextState * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3DDeviceContextState::GetPrivateData");
    return g_D3D11OriginVTables._ID3DDeviceContextState.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3DDeviceContextState_SetPrivateData_Hooked(ID3DDeviceContextState * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3DDeviceContextState::SetPrivateData");
    return g_D3D11OriginVTables._ID3DDeviceContextState.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3DDeviceContextState_SetPrivateDataInterface_Hooked(ID3DDeviceContextState * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3DDeviceContextState::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3DDeviceContextState.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
// ID3D11DeviceContext1Hook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11DeviceContext1(ID3D11DeviceContext1 * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11DeviceContext1Vtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11DeviceContext1);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11DeviceContext1);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11DeviceContext1");
}
template <> inline void RealToHooked11<ID3D11DeviceContext1>(ID3D11DeviceContext1 * p)
{
    return RealToHooked11_ID3D11DeviceContext1( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DeviceContext1_QueryInterface_Hooked(ID3D11DeviceContext1 * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::QueryInterface");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11DeviceContext1_AddRef_Hooked(ID3D11DeviceContext1 * ptr)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::AddRef");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11DeviceContext1_Release_Hooked(ID3D11DeviceContext1 * ptr)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::Release");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_GetDevice_Hooked(ID3D11DeviceContext1 * ptr, _Out_  ID3D11Device ** ppDevice)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::GetDevice");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.GetDevice(ptr, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DeviceContext1_GetPrivateData_Hooked(ID3D11DeviceContext1 * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_( *pDataSize )  void * pData)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DeviceContext1_SetPrivateData_Hooked(ID3D11DeviceContext1 * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_( DataSize )  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DeviceContext1_SetPrivateDataInterface_Hooked(ID3D11DeviceContext1 * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_VSSetConstantBuffers_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _In_reads_opt_(NumBuffers)  ID3D11Buffer *const * ppConstantBuffers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::VSSetConstantBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.VSSetConstantBuffers(ptr, StartSlot, NumBuffers, ppConstantBuffers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_PSSetShaderResources_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews, _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const * ppShaderResourceViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::PSSetShaderResources");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.PSSetShaderResources(ptr, StartSlot, NumViews, ppShaderResourceViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_PSSetShader_Hooked(ID3D11DeviceContext1 * ptr, _In_opt_  ID3D11PixelShader * pPixelShader, _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const * ppClassInstances, UINT NumClassInstances)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::PSSetShader");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.PSSetShader(ptr, pPixelShader, ppClassInstances, NumClassInstances);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_PSSetSamplers_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers, _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const * ppSamplers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::PSSetSamplers");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.PSSetSamplers(ptr, StartSlot, NumSamplers, ppSamplers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_VSSetShader_Hooked(ID3D11DeviceContext1 * ptr, _In_opt_  ID3D11VertexShader * pVertexShader, _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const * ppClassInstances, UINT NumClassInstances)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::VSSetShader");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.VSSetShader(ptr, pVertexShader, ppClassInstances, NumClassInstances);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_DrawIndexed_Hooked(ID3D11DeviceContext1 * ptr, _In_  UINT IndexCount, _In_  UINT StartIndexLocation, _In_  INT BaseVertexLocation)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::DrawIndexed");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.DrawIndexed(ptr, IndexCount, StartIndexLocation, BaseVertexLocation);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_Draw_Hooked(ID3D11DeviceContext1 * ptr, _In_  UINT VertexCount, _In_  UINT StartVertexLocation)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::Draw");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.Draw(ptr, VertexCount, StartVertexLocation);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DeviceContext1_Map_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11Resource * pResource, _In_  UINT Subresource, _In_  D3D11_MAP MapType, _In_  UINT MapFlags, _Out_  D3D11_MAPPED_SUBRESOURCE * pMappedResource)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::Map");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.Map(ptr, pResource, Subresource, MapType, MapFlags, pMappedResource);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_Unmap_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11Resource * pResource, _In_  UINT Subresource)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::Unmap");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.Unmap(ptr, pResource, Subresource);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_PSSetConstantBuffers_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _In_reads_opt_(NumBuffers)  ID3D11Buffer *const * ppConstantBuffers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::PSSetConstantBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.PSSetConstantBuffers(ptr, StartSlot, NumBuffers, ppConstantBuffers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_IASetInputLayout_Hooked(ID3D11DeviceContext1 * ptr, _In_opt_  ID3D11InputLayout * pInputLayout)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::IASetInputLayout");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.IASetInputLayout(ptr, pInputLayout);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_IASetVertexBuffers_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumBuffers, _In_reads_opt_(NumBuffers)  ID3D11Buffer *const * ppVertexBuffers, _In_reads_opt_(NumBuffers)  const UINT * pStrides, _In_reads_opt_(NumBuffers)  const UINT * pOffsets)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::IASetVertexBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.IASetVertexBuffers(ptr, StartSlot, NumBuffers, ppVertexBuffers, pStrides, pOffsets);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_IASetIndexBuffer_Hooked(ID3D11DeviceContext1 * ptr, _In_opt_  ID3D11Buffer * pIndexBuffer, _In_  DXGI_FORMAT Format, _In_  UINT Offset)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::IASetIndexBuffer");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.IASetIndexBuffer(ptr, pIndexBuffer, Format, Offset);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_DrawIndexedInstanced_Hooked(ID3D11DeviceContext1 * ptr, _In_  UINT IndexCountPerInstance, _In_  UINT InstanceCount, _In_  UINT StartIndexLocation, _In_  INT BaseVertexLocation, _In_  UINT StartInstanceLocation)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::DrawIndexedInstanced");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.DrawIndexedInstanced(ptr, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_DrawInstanced_Hooked(ID3D11DeviceContext1 * ptr, _In_  UINT VertexCountPerInstance, _In_  UINT InstanceCount, _In_  UINT StartVertexLocation, _In_  UINT StartInstanceLocation)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::DrawInstanced");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.DrawInstanced(ptr, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_GSSetConstantBuffers_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _In_reads_opt_(NumBuffers)  ID3D11Buffer *const * ppConstantBuffers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::GSSetConstantBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.GSSetConstantBuffers(ptr, StartSlot, NumBuffers, ppConstantBuffers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_GSSetShader_Hooked(ID3D11DeviceContext1 * ptr, _In_opt_  ID3D11GeometryShader * pShader, _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const * ppClassInstances, UINT NumClassInstances)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::GSSetShader");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.GSSetShader(ptr, pShader, ppClassInstances, NumClassInstances);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_IASetPrimitiveTopology_Hooked(ID3D11DeviceContext1 * ptr, _In_  D3D11_PRIMITIVE_TOPOLOGY Topology)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::IASetPrimitiveTopology");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.IASetPrimitiveTopology(ptr, Topology);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_VSSetShaderResources_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews, _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const * ppShaderResourceViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::VSSetShaderResources");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.VSSetShaderResources(ptr, StartSlot, NumViews, ppShaderResourceViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_VSSetSamplers_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers, _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const * ppSamplers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::VSSetSamplers");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.VSSetSamplers(ptr, StartSlot, NumSamplers, ppSamplers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_Begin_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11Asynchronous * pAsync)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::Begin");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.Begin(ptr, pAsync);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_End_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11Asynchronous * pAsync)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::End");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.End(ptr, pAsync);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DeviceContext1_GetData_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11Asynchronous * pAsync, _Out_writes_bytes_opt_( DataSize )  void * pData, _In_  UINT DataSize, _In_  UINT GetDataFlags)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::GetData");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.GetData(ptr, pAsync, pData, DataSize, GetDataFlags);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_SetPredication_Hooked(ID3D11DeviceContext1 * ptr, _In_opt_  ID3D11Predicate * pPredicate, _In_  BOOL PredicateValue)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::SetPredication");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.SetPredication(ptr, pPredicate, PredicateValue);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_GSSetShaderResources_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews, _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const * ppShaderResourceViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::GSSetShaderResources");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.GSSetShaderResources(ptr, StartSlot, NumViews, ppShaderResourceViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_GSSetSamplers_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers, _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const * ppSamplers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::GSSetSamplers");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.GSSetSamplers(ptr, StartSlot, NumSamplers, ppSamplers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_OMSetRenderTargets_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT )  UINT NumViews, _In_reads_opt_(NumViews)  ID3D11RenderTargetView *const * ppRenderTargetViews, _In_opt_  ID3D11DepthStencilView * pDepthStencilView)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::OMSetRenderTargets");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.OMSetRenderTargets(ptr, NumViews, ppRenderTargetViews, pDepthStencilView);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_OMSetRenderTargetsAndUnorderedAccessViews_Hooked(ID3D11DeviceContext1 * ptr, _In_  UINT NumRTVs, _In_reads_opt_(NumRTVs)  ID3D11RenderTargetView *const * ppRenderTargetViews, _In_opt_  ID3D11DepthStencilView * pDepthStencilView, _In_range_( 0, D3D11_1_UAV_SLOT_COUNT - 1 )  UINT UAVStartSlot, _In_  UINT NumUAVs, _In_reads_opt_(NumUAVs)  ID3D11UnorderedAccessView *const * ppUnorderedAccessViews, _In_reads_opt_(NumUAVs)  const UINT * pUAVInitialCounts)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::OMSetRenderTargetsAndUnorderedAccessViews");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.OMSetRenderTargetsAndUnorderedAccessViews(ptr, NumRTVs, ppRenderTargetViews, pDepthStencilView, UAVStartSlot, NumUAVs, ppUnorderedAccessViews, pUAVInitialCounts);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_OMSetBlendState_Hooked(ID3D11DeviceContext1 * ptr, _In_opt_  ID3D11BlendState * pBlendState, _In_opt_  const FLOAT BlendFactor [4], _In_  UINT SampleMask)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::OMSetBlendState");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.OMSetBlendState(ptr, pBlendState, BlendFactor, SampleMask);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_OMSetDepthStencilState_Hooked(ID3D11DeviceContext1 * ptr, _In_opt_  ID3D11DepthStencilState * pDepthStencilState, _In_  UINT StencilRef)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::OMSetDepthStencilState");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.OMSetDepthStencilState(ptr, pDepthStencilState, StencilRef);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_SOSetTargets_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_SO_BUFFER_SLOT_COUNT)  UINT NumBuffers, _In_reads_opt_(NumBuffers)  ID3D11Buffer *const * ppSOTargets, _In_reads_opt_(NumBuffers)  const UINT * pOffsets)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::SOSetTargets");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.SOSetTargets(ptr, NumBuffers, ppSOTargets, pOffsets);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_DrawAuto_Hooked(ID3D11DeviceContext1 * ptr)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::DrawAuto");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.DrawAuto(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_DrawIndexedInstancedIndirect_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11Buffer * pBufferForArgs, _In_  UINT AlignedByteOffsetForArgs)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::DrawIndexedInstancedIndirect");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.DrawIndexedInstancedIndirect(ptr, pBufferForArgs, AlignedByteOffsetForArgs);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_DrawInstancedIndirect_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11Buffer * pBufferForArgs, _In_  UINT AlignedByteOffsetForArgs)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::DrawInstancedIndirect");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.DrawInstancedIndirect(ptr, pBufferForArgs, AlignedByteOffsetForArgs);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_Dispatch_Hooked(ID3D11DeviceContext1 * ptr, _In_  UINT ThreadGroupCountX, _In_  UINT ThreadGroupCountY, _In_  UINT ThreadGroupCountZ)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::Dispatch");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.Dispatch(ptr, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_DispatchIndirect_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11Buffer * pBufferForArgs, _In_  UINT AlignedByteOffsetForArgs)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::DispatchIndirect");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.DispatchIndirect(ptr, pBufferForArgs, AlignedByteOffsetForArgs);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_RSSetState_Hooked(ID3D11DeviceContext1 * ptr, _In_opt_  ID3D11RasterizerState * pRasterizerState)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::RSSetState");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.RSSetState(ptr, pRasterizerState);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_RSSetViewports_Hooked(ID3D11DeviceContext1 * ptr, _In_range_(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE)  UINT NumViewports, _In_reads_opt_(NumViewports)  const D3D11_VIEWPORT * pViewports)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::RSSetViewports");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.RSSetViewports(ptr, NumViewports, pViewports);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_RSSetScissorRects_Hooked(ID3D11DeviceContext1 * ptr, _In_range_(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE)  UINT NumRects, _In_reads_opt_(NumRects)  const D3D11_RECT * pRects)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::RSSetScissorRects");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.RSSetScissorRects(ptr, NumRects, pRects);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_CopySubresourceRegion_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11Resource * pDstResource, _In_  UINT DstSubresource, _In_  UINT DstX, _In_  UINT DstY, _In_  UINT DstZ, _In_  ID3D11Resource * pSrcResource, _In_  UINT SrcSubresource, _In_opt_  const D3D11_BOX * pSrcBox)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::CopySubresourceRegion");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.CopySubresourceRegion(ptr, pDstResource, DstSubresource, DstX, DstY, DstZ, pSrcResource, SrcSubresource, pSrcBox);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_CopyResource_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11Resource * pDstResource, _In_  ID3D11Resource * pSrcResource)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::CopyResource");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.CopyResource(ptr, pDstResource, pSrcResource);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_UpdateSubresource_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11Resource * pDstResource, _In_  UINT DstSubresource, _In_opt_  const D3D11_BOX * pDstBox, _In_  const void * pSrcData, _In_  UINT SrcRowPitch, _In_  UINT SrcDepthPitch)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::UpdateSubresource");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.UpdateSubresource(ptr, pDstResource, DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_CopyStructureCount_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11Buffer * pDstBuffer, _In_  UINT DstAlignedByteOffset, _In_  ID3D11UnorderedAccessView * pSrcView)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::CopyStructureCount");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.CopyStructureCount(ptr, pDstBuffer, DstAlignedByteOffset, pSrcView);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_ClearRenderTargetView_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11RenderTargetView * pRenderTargetView, _In_  const FLOAT ColorRGBA [4])
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::ClearRenderTargetView");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.ClearRenderTargetView(ptr, pRenderTargetView, ColorRGBA);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_ClearUnorderedAccessViewUint_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11UnorderedAccessView * pUnorderedAccessView, _In_  const UINT Values [4])
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::ClearUnorderedAccessViewUint");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.ClearUnorderedAccessViewUint(ptr, pUnorderedAccessView, Values);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_ClearUnorderedAccessViewFloat_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11UnorderedAccessView * pUnorderedAccessView, _In_  const FLOAT Values [4])
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::ClearUnorderedAccessViewFloat");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.ClearUnorderedAccessViewFloat(ptr, pUnorderedAccessView, Values);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_ClearDepthStencilView_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11DepthStencilView * pDepthStencilView, _In_  UINT ClearFlags, _In_  FLOAT Depth, _In_  UINT8 Stencil)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::ClearDepthStencilView");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.ClearDepthStencilView(ptr, pDepthStencilView, ClearFlags, Depth, Stencil);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_GenerateMips_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11ShaderResourceView * pShaderResourceView)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::GenerateMips");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.GenerateMips(ptr, pShaderResourceView);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_SetResourceMinLOD_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11Resource * pResource, FLOAT MinLOD)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::SetResourceMinLOD");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.SetResourceMinLOD(ptr, pResource, MinLOD);
}

// -----------------------------------------------------------------------------
static inline FLOAT STDMETHODCALLTYPE ID3D11DeviceContext1_GetResourceMinLOD_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11Resource * pResource)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::GetResourceMinLOD");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.GetResourceMinLOD(ptr, pResource);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_ResolveSubresource_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11Resource * pDstResource, _In_  UINT DstSubresource, _In_  ID3D11Resource * pSrcResource, _In_  UINT SrcSubresource, _In_  DXGI_FORMAT Format)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::ResolveSubresource");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.ResolveSubresource(ptr, pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_ExecuteCommandList_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11CommandList * pCommandList, BOOL RestoreContextState)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::ExecuteCommandList");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.ExecuteCommandList(ptr, pCommandList, RestoreContextState);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_HSSetShaderResources_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews, _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const * ppShaderResourceViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::HSSetShaderResources");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.HSSetShaderResources(ptr, StartSlot, NumViews, ppShaderResourceViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_HSSetShader_Hooked(ID3D11DeviceContext1 * ptr, _In_opt_  ID3D11HullShader * pHullShader, _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const * ppClassInstances, UINT NumClassInstances)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::HSSetShader");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.HSSetShader(ptr, pHullShader, ppClassInstances, NumClassInstances);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_HSSetSamplers_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers, _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const * ppSamplers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::HSSetSamplers");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.HSSetSamplers(ptr, StartSlot, NumSamplers, ppSamplers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_HSSetConstantBuffers_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _In_reads_opt_(NumBuffers)  ID3D11Buffer *const * ppConstantBuffers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::HSSetConstantBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.HSSetConstantBuffers(ptr, StartSlot, NumBuffers, ppConstantBuffers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_DSSetShaderResources_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews, _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const * ppShaderResourceViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::DSSetShaderResources");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.DSSetShaderResources(ptr, StartSlot, NumViews, ppShaderResourceViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_DSSetShader_Hooked(ID3D11DeviceContext1 * ptr, _In_opt_  ID3D11DomainShader * pDomainShader, _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const * ppClassInstances, UINT NumClassInstances)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::DSSetShader");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.DSSetShader(ptr, pDomainShader, ppClassInstances, NumClassInstances);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_DSSetSamplers_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers, _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const * ppSamplers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::DSSetSamplers");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.DSSetSamplers(ptr, StartSlot, NumSamplers, ppSamplers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_DSSetConstantBuffers_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _In_reads_opt_(NumBuffers)  ID3D11Buffer *const * ppConstantBuffers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::DSSetConstantBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.DSSetConstantBuffers(ptr, StartSlot, NumBuffers, ppConstantBuffers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_CSSetShaderResources_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews, _In_reads_opt_(NumViews)  ID3D11ShaderResourceView *const * ppShaderResourceViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::CSSetShaderResources");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.CSSetShaderResources(ptr, StartSlot, NumViews, ppShaderResourceViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_CSSetUnorderedAccessViews_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_1_UAV_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_1_UAV_SLOT_COUNT - StartSlot )  UINT NumUAVs, _In_reads_opt_(NumUAVs)  ID3D11UnorderedAccessView *const * ppUnorderedAccessViews, _In_reads_opt_(NumUAVs)  const UINT * pUAVInitialCounts)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::CSSetUnorderedAccessViews");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.CSSetUnorderedAccessViews(ptr, StartSlot, NumUAVs, ppUnorderedAccessViews, pUAVInitialCounts);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_CSSetShader_Hooked(ID3D11DeviceContext1 * ptr, _In_opt_  ID3D11ComputeShader * pComputeShader, _In_reads_opt_(NumClassInstances)  ID3D11ClassInstance *const * ppClassInstances, UINT NumClassInstances)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::CSSetShader");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.CSSetShader(ptr, pComputeShader, ppClassInstances, NumClassInstances);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_CSSetSamplers_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers, _In_reads_opt_(NumSamplers)  ID3D11SamplerState *const * ppSamplers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::CSSetSamplers");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.CSSetSamplers(ptr, StartSlot, NumSamplers, ppSamplers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_CSSetConstantBuffers_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _In_reads_opt_(NumBuffers)  ID3D11Buffer *const * ppConstantBuffers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::CSSetConstantBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.CSSetConstantBuffers(ptr, StartSlot, NumBuffers, ppConstantBuffers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_VSGetConstantBuffers_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _Out_writes_opt_(NumBuffers)  ID3D11Buffer ** ppConstantBuffers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::VSGetConstantBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.VSGetConstantBuffers(ptr, StartSlot, NumBuffers, ppConstantBuffers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_PSGetShaderResources_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews, _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView ** ppShaderResourceViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::PSGetShaderResources");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.PSGetShaderResources(ptr, StartSlot, NumViews, ppShaderResourceViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_PSGetShader_Hooked(ID3D11DeviceContext1 * ptr, _Out_  ID3D11PixelShader ** ppPixelShader, _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance ** ppClassInstances, _Inout_opt_  UINT * pNumClassInstances)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::PSGetShader");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.PSGetShader(ptr, ppPixelShader, ppClassInstances, pNumClassInstances);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_PSGetSamplers_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers, _Out_writes_opt_(NumSamplers)  ID3D11SamplerState ** ppSamplers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::PSGetSamplers");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.PSGetSamplers(ptr, StartSlot, NumSamplers, ppSamplers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_VSGetShader_Hooked(ID3D11DeviceContext1 * ptr, _Out_  ID3D11VertexShader ** ppVertexShader, _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance ** ppClassInstances, _Inout_opt_  UINT * pNumClassInstances)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::VSGetShader");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.VSGetShader(ptr, ppVertexShader, ppClassInstances, pNumClassInstances);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_PSGetConstantBuffers_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _Out_writes_opt_(NumBuffers)  ID3D11Buffer ** ppConstantBuffers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::PSGetConstantBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.PSGetConstantBuffers(ptr, StartSlot, NumBuffers, ppConstantBuffers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_IAGetInputLayout_Hooked(ID3D11DeviceContext1 * ptr, _Out_  ID3D11InputLayout ** ppInputLayout)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::IAGetInputLayout");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.IAGetInputLayout(ptr, ppInputLayout);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_IAGetVertexBuffers_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumBuffers, _Out_writes_opt_(NumBuffers)  ID3D11Buffer ** ppVertexBuffers, _Out_writes_opt_(NumBuffers)  UINT * pStrides, _Out_writes_opt_(NumBuffers)  UINT * pOffsets)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::IAGetVertexBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.IAGetVertexBuffers(ptr, StartSlot, NumBuffers, ppVertexBuffers, pStrides, pOffsets);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_IAGetIndexBuffer_Hooked(ID3D11DeviceContext1 * ptr, _Out_opt_  ID3D11Buffer ** pIndexBuffer, _Out_opt_  DXGI_FORMAT * Format, _Out_opt_  UINT * Offset)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::IAGetIndexBuffer");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.IAGetIndexBuffer(ptr, pIndexBuffer, Format, Offset);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_GSGetConstantBuffers_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _Out_writes_opt_(NumBuffers)  ID3D11Buffer ** ppConstantBuffers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::GSGetConstantBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.GSGetConstantBuffers(ptr, StartSlot, NumBuffers, ppConstantBuffers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_GSGetShader_Hooked(ID3D11DeviceContext1 * ptr, _Out_  ID3D11GeometryShader ** ppGeometryShader, _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance ** ppClassInstances, _Inout_opt_  UINT * pNumClassInstances)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::GSGetShader");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.GSGetShader(ptr, ppGeometryShader, ppClassInstances, pNumClassInstances);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_IAGetPrimitiveTopology_Hooked(ID3D11DeviceContext1 * ptr, _Out_  D3D11_PRIMITIVE_TOPOLOGY * pTopology)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::IAGetPrimitiveTopology");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.IAGetPrimitiveTopology(ptr, pTopology);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_VSGetShaderResources_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews, _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView ** ppShaderResourceViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::VSGetShaderResources");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.VSGetShaderResources(ptr, StartSlot, NumViews, ppShaderResourceViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_VSGetSamplers_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers, _Out_writes_opt_(NumSamplers)  ID3D11SamplerState ** ppSamplers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::VSGetSamplers");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.VSGetSamplers(ptr, StartSlot, NumSamplers, ppSamplers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_GetPredication_Hooked(ID3D11DeviceContext1 * ptr, _Out_opt_  ID3D11Predicate ** ppPredicate, _Out_opt_  BOOL * pPredicateValue)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::GetPredication");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.GetPredication(ptr, ppPredicate, pPredicateValue);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_GSGetShaderResources_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews, _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView ** ppShaderResourceViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::GSGetShaderResources");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.GSGetShaderResources(ptr, StartSlot, NumViews, ppShaderResourceViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_GSGetSamplers_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers, _Out_writes_opt_(NumSamplers)  ID3D11SamplerState ** ppSamplers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::GSGetSamplers");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.GSGetSamplers(ptr, StartSlot, NumSamplers, ppSamplers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_OMGetRenderTargets_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT )  UINT NumViews, _Out_writes_opt_(NumViews)  ID3D11RenderTargetView ** ppRenderTargetViews, _Out_opt_  ID3D11DepthStencilView ** ppDepthStencilView)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::OMGetRenderTargets");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.OMGetRenderTargets(ptr, NumViews, ppRenderTargetViews, ppDepthStencilView);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_OMGetRenderTargetsAndUnorderedAccessViews_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT )  UINT NumRTVs, _Out_writes_opt_(NumRTVs)  ID3D11RenderTargetView ** ppRenderTargetViews, _Out_opt_  ID3D11DepthStencilView ** ppDepthStencilView, _In_range_( 0, D3D11_PS_CS_UAV_REGISTER_COUNT - 1 )  UINT UAVStartSlot, _In_range_( 0, D3D11_PS_CS_UAV_REGISTER_COUNT - UAVStartSlot )  UINT NumUAVs, _Out_writes_opt_(NumUAVs)  ID3D11UnorderedAccessView ** ppUnorderedAccessViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::OMGetRenderTargetsAndUnorderedAccessViews");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.OMGetRenderTargetsAndUnorderedAccessViews(ptr, NumRTVs, ppRenderTargetViews, ppDepthStencilView, UAVStartSlot, NumUAVs, ppUnorderedAccessViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_OMGetBlendState_Hooked(ID3D11DeviceContext1 * ptr, _Out_opt_  ID3D11BlendState ** ppBlendState, _Out_opt_  FLOAT BlendFactor [4], _Out_opt_  UINT * pSampleMask)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::OMGetBlendState");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.OMGetBlendState(ptr, ppBlendState, BlendFactor, pSampleMask);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_OMGetDepthStencilState_Hooked(ID3D11DeviceContext1 * ptr, _Out_opt_  ID3D11DepthStencilState ** ppDepthStencilState, _Out_opt_  UINT * pStencilRef)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::OMGetDepthStencilState");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.OMGetDepthStencilState(ptr, ppDepthStencilState, pStencilRef);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_SOGetTargets_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_SO_BUFFER_SLOT_COUNT )  UINT NumBuffers, _Out_writes_opt_(NumBuffers)  ID3D11Buffer ** ppSOTargets)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::SOGetTargets");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.SOGetTargets(ptr, NumBuffers, ppSOTargets);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_RSGetState_Hooked(ID3D11DeviceContext1 * ptr, _Out_  ID3D11RasterizerState ** ppRasterizerState)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::RSGetState");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.RSGetState(ptr, ppRasterizerState);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_RSGetViewports_Hooked(ID3D11DeviceContext1 * ptr, _Inout_ /*_range(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE )*/   UINT * pNumViewports, _Out_writes_opt_(*pNumViewports)  D3D11_VIEWPORT * pViewports)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::RSGetViewports");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.RSGetViewports(ptr, pNumViewports, pViewports);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_RSGetScissorRects_Hooked(ID3D11DeviceContext1 * ptr, _Inout_ /*_range(0, D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE )*/   UINT * pNumRects, _Out_writes_opt_(*pNumRects)  D3D11_RECT * pRects)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::RSGetScissorRects");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.RSGetScissorRects(ptr, pNumRects, pRects);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_HSGetShaderResources_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews, _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView ** ppShaderResourceViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::HSGetShaderResources");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.HSGetShaderResources(ptr, StartSlot, NumViews, ppShaderResourceViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_HSGetShader_Hooked(ID3D11DeviceContext1 * ptr, _Out_  ID3D11HullShader ** ppHullShader, _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance ** ppClassInstances, _Inout_opt_  UINT * pNumClassInstances)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::HSGetShader");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.HSGetShader(ptr, ppHullShader, ppClassInstances, pNumClassInstances);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_HSGetSamplers_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers, _Out_writes_opt_(NumSamplers)  ID3D11SamplerState ** ppSamplers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::HSGetSamplers");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.HSGetSamplers(ptr, StartSlot, NumSamplers, ppSamplers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_HSGetConstantBuffers_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _Out_writes_opt_(NumBuffers)  ID3D11Buffer ** ppConstantBuffers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::HSGetConstantBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.HSGetConstantBuffers(ptr, StartSlot, NumBuffers, ppConstantBuffers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_DSGetShaderResources_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews, _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView ** ppShaderResourceViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::DSGetShaderResources");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.DSGetShaderResources(ptr, StartSlot, NumViews, ppShaderResourceViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_DSGetShader_Hooked(ID3D11DeviceContext1 * ptr, _Out_  ID3D11DomainShader ** ppDomainShader, _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance ** ppClassInstances, _Inout_opt_  UINT * pNumClassInstances)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::DSGetShader");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.DSGetShader(ptr, ppDomainShader, ppClassInstances, pNumClassInstances);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_DSGetSamplers_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers, _Out_writes_opt_(NumSamplers)  ID3D11SamplerState ** ppSamplers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::DSGetSamplers");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.DSGetSamplers(ptr, StartSlot, NumSamplers, ppSamplers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_DSGetConstantBuffers_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _Out_writes_opt_(NumBuffers)  ID3D11Buffer ** ppConstantBuffers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::DSGetConstantBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.DSGetConstantBuffers(ptr, StartSlot, NumBuffers, ppConstantBuffers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_CSGetShaderResources_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT - StartSlot )  UINT NumViews, _Out_writes_opt_(NumViews)  ID3D11ShaderResourceView ** ppShaderResourceViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::CSGetShaderResources");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.CSGetShaderResources(ptr, StartSlot, NumViews, ppShaderResourceViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_CSGetUnorderedAccessViews_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_PS_CS_UAV_REGISTER_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_PS_CS_UAV_REGISTER_COUNT - StartSlot )  UINT NumUAVs, _Out_writes_opt_(NumUAVs)  ID3D11UnorderedAccessView ** ppUnorderedAccessViews)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::CSGetUnorderedAccessViews");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.CSGetUnorderedAccessViews(ptr, StartSlot, NumUAVs, ppUnorderedAccessViews);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_CSGetShader_Hooked(ID3D11DeviceContext1 * ptr, _Out_  ID3D11ComputeShader ** ppComputeShader, _Out_writes_opt_(*pNumClassInstances)  ID3D11ClassInstance ** ppClassInstances, _Inout_opt_  UINT * pNumClassInstances)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::CSGetShader");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.CSGetShader(ptr, ppComputeShader, ppClassInstances, pNumClassInstances);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_CSGetSamplers_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT - StartSlot )  UINT NumSamplers, _Out_writes_opt_(NumSamplers)  ID3D11SamplerState ** ppSamplers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::CSGetSamplers");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.CSGetSamplers(ptr, StartSlot, NumSamplers, ppSamplers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_CSGetConstantBuffers_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _Out_writes_opt_(NumBuffers)  ID3D11Buffer ** ppConstantBuffers)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::CSGetConstantBuffers");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.CSGetConstantBuffers(ptr, StartSlot, NumBuffers, ppConstantBuffers);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_ClearState_Hooked(ID3D11DeviceContext1 * ptr)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::ClearState");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.ClearState(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_Flush_Hooked(ID3D11DeviceContext1 * ptr)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::Flush");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.Flush(ptr);
}

// -----------------------------------------------------------------------------
static inline D3D11_DEVICE_CONTEXT_TYPE STDMETHODCALLTYPE ID3D11DeviceContext1_GetType_Hooked(ID3D11DeviceContext1 * ptr)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::GetType");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.GetType(ptr);
}

// -----------------------------------------------------------------------------
static inline UINT STDMETHODCALLTYPE ID3D11DeviceContext1_GetContextFlags_Hooked(ID3D11DeviceContext1 * ptr)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::GetContextFlags");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.GetContextFlags(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11DeviceContext1_FinishCommandList_Hooked(ID3D11DeviceContext1 * ptr, BOOL RestoreDeferredContextState, _Out_opt_  ID3D11CommandList ** ppCommandList)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::FinishCommandList");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.FinishCommandList(ptr, RestoreDeferredContextState, ppCommandList);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_CopySubresourceRegion1_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11Resource * pDstResource, _In_  UINT DstSubresource, _In_  UINT DstX, _In_  UINT DstY, _In_  UINT DstZ, _In_  ID3D11Resource * pSrcResource, _In_  UINT SrcSubresource, _In_opt_  const D3D11_BOX * pSrcBox, _In_  UINT CopyFlags)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::CopySubresourceRegion1");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.CopySubresourceRegion1(ptr, pDstResource, DstSubresource, DstX, DstY, DstZ, pSrcResource, SrcSubresource, pSrcBox, CopyFlags);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_UpdateSubresource1_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11Resource * pDstResource, _In_  UINT DstSubresource, _In_opt_  const D3D11_BOX * pDstBox, _In_  const void * pSrcData, _In_  UINT SrcRowPitch, _In_  UINT SrcDepthPitch, _In_  UINT CopyFlags)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::UpdateSubresource1");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.UpdateSubresource1(ptr, pDstResource, DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch, CopyFlags);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_DiscardResource_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11Resource * pResource)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::DiscardResource");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.DiscardResource(ptr, pResource);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_DiscardView_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11View * pResourceView)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::DiscardView");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.DiscardView(ptr, pResourceView);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_VSSetConstantBuffers1_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _In_reads_opt_(NumBuffers)  ID3D11Buffer *const * ppConstantBuffers, _In_reads_opt_(NumBuffers)  const UINT * pFirstConstant, _In_reads_opt_(NumBuffers)  const UINT * pNumConstants)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::VSSetConstantBuffers1");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.VSSetConstantBuffers1(ptr, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_HSSetConstantBuffers1_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _In_reads_opt_(NumBuffers)  ID3D11Buffer *const * ppConstantBuffers, _In_reads_opt_(NumBuffers)  const UINT * pFirstConstant, _In_reads_opt_(NumBuffers)  const UINT * pNumConstants)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::HSSetConstantBuffers1");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.HSSetConstantBuffers1(ptr, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_DSSetConstantBuffers1_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _In_reads_opt_(NumBuffers)  ID3D11Buffer *const * ppConstantBuffers, _In_reads_opt_(NumBuffers)  const UINT * pFirstConstant, _In_reads_opt_(NumBuffers)  const UINT * pNumConstants)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::DSSetConstantBuffers1");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.DSSetConstantBuffers1(ptr, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_GSSetConstantBuffers1_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _In_reads_opt_(NumBuffers)  ID3D11Buffer *const * ppConstantBuffers, _In_reads_opt_(NumBuffers)  const UINT * pFirstConstant, _In_reads_opt_(NumBuffers)  const UINT * pNumConstants)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::GSSetConstantBuffers1");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.GSSetConstantBuffers1(ptr, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_PSSetConstantBuffers1_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _In_reads_opt_(NumBuffers)  ID3D11Buffer *const * ppConstantBuffers, _In_reads_opt_(NumBuffers)  const UINT * pFirstConstant, _In_reads_opt_(NumBuffers)  const UINT * pNumConstants)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::PSSetConstantBuffers1");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.PSSetConstantBuffers1(ptr, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_CSSetConstantBuffers1_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _In_reads_opt_(NumBuffers)  ID3D11Buffer *const * ppConstantBuffers, _In_reads_opt_(NumBuffers)  const UINT * pFirstConstant, _In_reads_opt_(NumBuffers)  const UINT * pNumConstants)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::CSSetConstantBuffers1");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.CSSetConstantBuffers1(ptr, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_VSGetConstantBuffers1_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _Out_writes_opt_(NumBuffers)  ID3D11Buffer ** ppConstantBuffers, _Out_writes_opt_(NumBuffers)  UINT * pFirstConstant, _Out_writes_opt_(NumBuffers)  UINT * pNumConstants)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::VSGetConstantBuffers1");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.VSGetConstantBuffers1(ptr, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_HSGetConstantBuffers1_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _Out_writes_opt_(NumBuffers)  ID3D11Buffer ** ppConstantBuffers, _Out_writes_opt_(NumBuffers)  UINT * pFirstConstant, _Out_writes_opt_(NumBuffers)  UINT * pNumConstants)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::HSGetConstantBuffers1");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.HSGetConstantBuffers1(ptr, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_DSGetConstantBuffers1_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _Out_writes_opt_(NumBuffers)  ID3D11Buffer ** ppConstantBuffers, _Out_writes_opt_(NumBuffers)  UINT * pFirstConstant, _Out_writes_opt_(NumBuffers)  UINT * pNumConstants)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::DSGetConstantBuffers1");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.DSGetConstantBuffers1(ptr, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_GSGetConstantBuffers1_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _Out_writes_opt_(NumBuffers)  ID3D11Buffer ** ppConstantBuffers, _Out_writes_opt_(NumBuffers)  UINT * pFirstConstant, _Out_writes_opt_(NumBuffers)  UINT * pNumConstants)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::GSGetConstantBuffers1");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.GSGetConstantBuffers1(ptr, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_PSGetConstantBuffers1_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _Out_writes_opt_(NumBuffers)  ID3D11Buffer ** ppConstantBuffers, _Out_writes_opt_(NumBuffers)  UINT * pFirstConstant, _Out_writes_opt_(NumBuffers)  UINT * pNumConstants)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::PSGetConstantBuffers1");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.PSGetConstantBuffers1(ptr, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_CSGetConstantBuffers1_Hooked(ID3D11DeviceContext1 * ptr, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - 1 )  UINT StartSlot, _In_range_( 0, D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT - StartSlot )  UINT NumBuffers, _Out_writes_opt_(NumBuffers)  ID3D11Buffer ** ppConstantBuffers, _Out_writes_opt_(NumBuffers)  UINT * pFirstConstant, _Out_writes_opt_(NumBuffers)  UINT * pNumConstants)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::CSGetConstantBuffers1");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.CSGetConstantBuffers1(ptr, StartSlot, NumBuffers, ppConstantBuffers, pFirstConstant, pNumConstants);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_SwapDeviceContextState_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3DDeviceContextState * pState, _Out_opt_  ID3DDeviceContextState ** ppPreviousState)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::SwapDeviceContextState");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.SwapDeviceContextState(ptr, pState, ppPreviousState);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_ClearView_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11View * pView, _In_  const FLOAT Color [4], _In_reads_opt_(NumRects)  const D3D11_RECT * pRect, UINT NumRects)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::ClearView");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.ClearView(ptr, pView, Color, pRect, NumRects);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11DeviceContext1_DiscardView1_Hooked(ID3D11DeviceContext1 * ptr, _In_  ID3D11View * pResourceView, _In_reads_opt_(NumRects)  const D3D11_RECT * pRects, UINT NumRects)
{
    calltrace::AutoTrace trace("ID3D11DeviceContext1::DiscardView1");
    return g_D3D11OriginVTables._ID3D11DeviceContext1.DiscardView1(ptr, pResourceView, pRects, NumRects);
}

// -----------------------------------------------------------------------------
// ID3D11Device1Hook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11Device1(ID3D11Device1 * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11Device1Vtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11Device1);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11Device1);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11Device1");
}
template <> inline void RealToHooked11<ID3D11Device1>(ID3D11Device1 * p)
{
    return RealToHooked11_ID3D11Device1( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_QueryInterface_Hooked(ID3D11Device1 * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11Device1::QueryInterface");
    return g_D3D11OriginVTables._ID3D11Device1.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11Device1_AddRef_Hooked(ID3D11Device1 * ptr)
{
    calltrace::AutoTrace trace("ID3D11Device1::AddRef");
    return g_D3D11OriginVTables._ID3D11Device1.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11Device1_Release_Hooked(ID3D11Device1 * ptr)
{
    calltrace::AutoTrace trace("ID3D11Device1::Release");
    return g_D3D11OriginVTables._ID3D11Device1.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateBuffer_Hooked(ID3D11Device1 * ptr, _In_  const D3D11_BUFFER_DESC * pDesc, _In_opt_  const D3D11_SUBRESOURCE_DATA * pInitialData, _Out_opt_  ID3D11Buffer ** ppBuffer)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateBuffer");
    return g_D3D11OriginVTables._ID3D11Device1.CreateBuffer(ptr, pDesc, pInitialData, ppBuffer);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateTexture1D_Hooked(ID3D11Device1 * ptr, _In_  const D3D11_TEXTURE1D_DESC * pDesc, _In_reads_opt_(_Inexpressible_(pDesc->MipLevels * pDesc->ArraySize))  const D3D11_SUBRESOURCE_DATA * pInitialData, _Out_opt_  ID3D11Texture1D ** ppTexture1D)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateTexture1D");
    return g_D3D11OriginVTables._ID3D11Device1.CreateTexture1D(ptr, pDesc, pInitialData, ppTexture1D);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateTexture2D_Hooked(ID3D11Device1 * ptr, _In_  const D3D11_TEXTURE2D_DESC * pDesc, _In_reads_opt_(_Inexpressible_(pDesc->MipLevels * pDesc->ArraySize))  const D3D11_SUBRESOURCE_DATA * pInitialData, _Out_opt_  ID3D11Texture2D ** ppTexture2D)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateTexture2D");
    return g_D3D11OriginVTables._ID3D11Device1.CreateTexture2D(ptr, pDesc, pInitialData, ppTexture2D);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateTexture3D_Hooked(ID3D11Device1 * ptr, _In_  const D3D11_TEXTURE3D_DESC * pDesc, _In_reads_opt_(_Inexpressible_(pDesc->MipLevels))  const D3D11_SUBRESOURCE_DATA * pInitialData, _Out_opt_  ID3D11Texture3D ** ppTexture3D)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateTexture3D");
    return g_D3D11OriginVTables._ID3D11Device1.CreateTexture3D(ptr, pDesc, pInitialData, ppTexture3D);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateShaderResourceView_Hooked(ID3D11Device1 * ptr, _In_  ID3D11Resource * pResource, _In_opt_  const D3D11_SHADER_RESOURCE_VIEW_DESC * pDesc, _Out_opt_  ID3D11ShaderResourceView ** ppSRView)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateShaderResourceView");
    return g_D3D11OriginVTables._ID3D11Device1.CreateShaderResourceView(ptr, pResource, pDesc, ppSRView);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateUnorderedAccessView_Hooked(ID3D11Device1 * ptr, _In_  ID3D11Resource * pResource, _In_opt_  const D3D11_UNORDERED_ACCESS_VIEW_DESC * pDesc, _Out_opt_  ID3D11UnorderedAccessView ** ppUAView)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateUnorderedAccessView");
    return g_D3D11OriginVTables._ID3D11Device1.CreateUnorderedAccessView(ptr, pResource, pDesc, ppUAView);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateRenderTargetView_Hooked(ID3D11Device1 * ptr, _In_  ID3D11Resource * pResource, _In_opt_  const D3D11_RENDER_TARGET_VIEW_DESC * pDesc, _Out_opt_  ID3D11RenderTargetView ** ppRTView)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateRenderTargetView");
    return g_D3D11OriginVTables._ID3D11Device1.CreateRenderTargetView(ptr, pResource, pDesc, ppRTView);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateDepthStencilView_Hooked(ID3D11Device1 * ptr, _In_  ID3D11Resource * pResource, _In_opt_  const D3D11_DEPTH_STENCIL_VIEW_DESC * pDesc, _Out_opt_  ID3D11DepthStencilView ** ppDepthStencilView)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateDepthStencilView");
    return g_D3D11OriginVTables._ID3D11Device1.CreateDepthStencilView(ptr, pResource, pDesc, ppDepthStencilView);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateInputLayout_Hooked(ID3D11Device1 * ptr, _In_reads_(NumElements)  const D3D11_INPUT_ELEMENT_DESC * pInputElementDescs, _In_range_( 0, D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT )  UINT NumElements, _In_  const void * pShaderBytecodeWithInputSignature, _In_  SIZE_T BytecodeLength, _Out_opt_  ID3D11InputLayout ** ppInputLayout)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateInputLayout");
    return g_D3D11OriginVTables._ID3D11Device1.CreateInputLayout(ptr, pInputElementDescs, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayout);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateVertexShader_Hooked(ID3D11Device1 * ptr, _In_  const void * pShaderBytecode, _In_  SIZE_T BytecodeLength, _In_opt_  ID3D11ClassLinkage * pClassLinkage, _Out_opt_  ID3D11VertexShader ** ppVertexShader)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateVertexShader");
    return g_D3D11OriginVTables._ID3D11Device1.CreateVertexShader(ptr, pShaderBytecode, BytecodeLength, pClassLinkage, ppVertexShader);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateGeometryShader_Hooked(ID3D11Device1 * ptr, _In_  const void * pShaderBytecode, _In_  SIZE_T BytecodeLength, _In_opt_  ID3D11ClassLinkage * pClassLinkage, _Out_opt_  ID3D11GeometryShader ** ppGeometryShader)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateGeometryShader");
    return g_D3D11OriginVTables._ID3D11Device1.CreateGeometryShader(ptr, pShaderBytecode, BytecodeLength, pClassLinkage, ppGeometryShader);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateGeometryShaderWithStreamOutput_Hooked(ID3D11Device1 * ptr, _In_  const void * pShaderBytecode, _In_  SIZE_T BytecodeLength, _In_reads_opt_(NumEntries)  const D3D11_SO_DECLARATION_ENTRY * pSODeclaration, _In_range_( 0, D3D11_SO_STREAM_COUNT * D3D11_SO_OUTPUT_COMPONENT_COUNT )  UINT NumEntries, _In_reads_opt_(NumStrides)  const UINT * pBufferStrides, _In_range_( 0, D3D11_SO_BUFFER_SLOT_COUNT )  UINT NumStrides, _In_  UINT RasterizedStream, _In_opt_  ID3D11ClassLinkage * pClassLinkage, _Out_opt_  ID3D11GeometryShader ** ppGeometryShader)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateGeometryShaderWithStreamOutput");
    return g_D3D11OriginVTables._ID3D11Device1.CreateGeometryShaderWithStreamOutput(ptr, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreatePixelShader_Hooked(ID3D11Device1 * ptr, _In_  const void * pShaderBytecode, _In_  SIZE_T BytecodeLength, _In_opt_  ID3D11ClassLinkage * pClassLinkage, _Out_opt_  ID3D11PixelShader ** ppPixelShader)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreatePixelShader");
    return g_D3D11OriginVTables._ID3D11Device1.CreatePixelShader(ptr, pShaderBytecode, BytecodeLength, pClassLinkage, ppPixelShader);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateHullShader_Hooked(ID3D11Device1 * ptr, _In_  const void * pShaderBytecode, _In_  SIZE_T BytecodeLength, _In_opt_  ID3D11ClassLinkage * pClassLinkage, _Out_opt_  ID3D11HullShader ** ppHullShader)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateHullShader");
    return g_D3D11OriginVTables._ID3D11Device1.CreateHullShader(ptr, pShaderBytecode, BytecodeLength, pClassLinkage, ppHullShader);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateDomainShader_Hooked(ID3D11Device1 * ptr, _In_  const void * pShaderBytecode, _In_  SIZE_T BytecodeLength, _In_opt_  ID3D11ClassLinkage * pClassLinkage, _Out_opt_  ID3D11DomainShader ** ppDomainShader)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateDomainShader");
    return g_D3D11OriginVTables._ID3D11Device1.CreateDomainShader(ptr, pShaderBytecode, BytecodeLength, pClassLinkage, ppDomainShader);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateComputeShader_Hooked(ID3D11Device1 * ptr, _In_  const void * pShaderBytecode, _In_  SIZE_T BytecodeLength, _In_opt_  ID3D11ClassLinkage * pClassLinkage, _Out_opt_  ID3D11ComputeShader ** ppComputeShader)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateComputeShader");
    return g_D3D11OriginVTables._ID3D11Device1.CreateComputeShader(ptr, pShaderBytecode, BytecodeLength, pClassLinkage, ppComputeShader);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateClassLinkage_Hooked(ID3D11Device1 * ptr, _Out_  ID3D11ClassLinkage ** ppLinkage)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateClassLinkage");
    return g_D3D11OriginVTables._ID3D11Device1.CreateClassLinkage(ptr, ppLinkage);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateBlendState_Hooked(ID3D11Device1 * ptr, _In_  const D3D11_BLEND_DESC * pBlendStateDesc, _Out_opt_  ID3D11BlendState ** ppBlendState)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateBlendState");
    return g_D3D11OriginVTables._ID3D11Device1.CreateBlendState(ptr, pBlendStateDesc, ppBlendState);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateDepthStencilState_Hooked(ID3D11Device1 * ptr, _In_  const D3D11_DEPTH_STENCIL_DESC * pDepthStencilDesc, _Out_opt_  ID3D11DepthStencilState ** ppDepthStencilState)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateDepthStencilState");
    return g_D3D11OriginVTables._ID3D11Device1.CreateDepthStencilState(ptr, pDepthStencilDesc, ppDepthStencilState);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateRasterizerState_Hooked(ID3D11Device1 * ptr, _In_  const D3D11_RASTERIZER_DESC * pRasterizerDesc, _Out_opt_  ID3D11RasterizerState ** ppRasterizerState)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateRasterizerState");
    return g_D3D11OriginVTables._ID3D11Device1.CreateRasterizerState(ptr, pRasterizerDesc, ppRasterizerState);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateSamplerState_Hooked(ID3D11Device1 * ptr, _In_  const D3D11_SAMPLER_DESC * pSamplerDesc, _Out_opt_  ID3D11SamplerState ** ppSamplerState)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateSamplerState");
    return g_D3D11OriginVTables._ID3D11Device1.CreateSamplerState(ptr, pSamplerDesc, ppSamplerState);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateQuery_Hooked(ID3D11Device1 * ptr, _In_  const D3D11_QUERY_DESC * pQueryDesc, _Out_opt_  ID3D11Query ** ppQuery)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateQuery");
    return g_D3D11OriginVTables._ID3D11Device1.CreateQuery(ptr, pQueryDesc, ppQuery);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreatePredicate_Hooked(ID3D11Device1 * ptr, _In_  const D3D11_QUERY_DESC * pPredicateDesc, _Out_opt_  ID3D11Predicate ** ppPredicate)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreatePredicate");
    return g_D3D11OriginVTables._ID3D11Device1.CreatePredicate(ptr, pPredicateDesc, ppPredicate);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateCounter_Hooked(ID3D11Device1 * ptr, _In_  const D3D11_COUNTER_DESC * pCounterDesc, _Out_opt_  ID3D11Counter ** ppCounter)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateCounter");
    return g_D3D11OriginVTables._ID3D11Device1.CreateCounter(ptr, pCounterDesc, ppCounter);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateDeferredContext_Hooked(ID3D11Device1 * ptr, UINT ContextFlags, _Out_opt_  ID3D11DeviceContext ** ppDeferredContext)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateDeferredContext");
    return g_D3D11OriginVTables._ID3D11Device1.CreateDeferredContext(ptr, ContextFlags, ppDeferredContext);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_OpenSharedResource_Hooked(ID3D11Device1 * ptr, _In_  HANDLE hResource, _In_  REFIID ReturnedInterface, _Out_opt_  void ** ppResource)
{
    calltrace::AutoTrace trace("ID3D11Device1::OpenSharedResource");
    return g_D3D11OriginVTables._ID3D11Device1.OpenSharedResource(ptr, hResource, ReturnedInterface, ppResource);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CheckFormatSupport_Hooked(ID3D11Device1 * ptr, _In_  DXGI_FORMAT Format, _Out_  UINT * pFormatSupport)
{
    calltrace::AutoTrace trace("ID3D11Device1::CheckFormatSupport");
    return g_D3D11OriginVTables._ID3D11Device1.CheckFormatSupport(ptr, Format, pFormatSupport);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CheckMultisampleQualityLevels_Hooked(ID3D11Device1 * ptr, _In_  DXGI_FORMAT Format, _In_  UINT SampleCount, _Out_  UINT * pNumQualityLevels)
{
    calltrace::AutoTrace trace("ID3D11Device1::CheckMultisampleQualityLevels");
    return g_D3D11OriginVTables._ID3D11Device1.CheckMultisampleQualityLevels(ptr, Format, SampleCount, pNumQualityLevels);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Device1_CheckCounterInfo_Hooked(ID3D11Device1 * ptr, _Out_  D3D11_COUNTER_INFO * pCounterInfo)
{
    calltrace::AutoTrace trace("ID3D11Device1::CheckCounterInfo");
    return g_D3D11OriginVTables._ID3D11Device1.CheckCounterInfo(ptr, pCounterInfo);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CheckCounter_Hooked(ID3D11Device1 * ptr, _In_  const D3D11_COUNTER_DESC * pDesc, _Out_  D3D11_COUNTER_TYPE * pType, _Out_  UINT * pActiveCounters, _Out_writes_opt_(*pNameLength)  LPSTR szName, _Inout_opt_  UINT * pNameLength, _Out_writes_opt_(*pUnitsLength)  LPSTR szUnits, _Inout_opt_  UINT * pUnitsLength, _Out_writes_opt_(*pDescriptionLength)  LPSTR szDescription, _Inout_opt_  UINT * pDescriptionLength)
{
    calltrace::AutoTrace trace("ID3D11Device1::CheckCounter");
    return g_D3D11OriginVTables._ID3D11Device1.CheckCounter(ptr, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CheckFeatureSupport_Hooked(ID3D11Device1 * ptr, D3D11_FEATURE Feature, _Out_writes_bytes_(FeatureSupportDataSize)  void * pFeatureSupportData, UINT FeatureSupportDataSize)
{
    calltrace::AutoTrace trace("ID3D11Device1::CheckFeatureSupport");
    return g_D3D11OriginVTables._ID3D11Device1.CheckFeatureSupport(ptr, Feature, pFeatureSupportData, FeatureSupportDataSize);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_GetPrivateData_Hooked(ID3D11Device1 * ptr, _In_  REFGUID guid, _Inout_  UINT * pDataSize, _Out_writes_bytes_opt_(*pDataSize)  void * pData)
{
    calltrace::AutoTrace trace("ID3D11Device1::GetPrivateData");
    return g_D3D11OriginVTables._ID3D11Device1.GetPrivateData(ptr, guid, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_SetPrivateData_Hooked(ID3D11Device1 * ptr, _In_  REFGUID guid, _In_  UINT DataSize, _In_reads_bytes_opt_(DataSize)  const void * pData)
{
    calltrace::AutoTrace trace("ID3D11Device1::SetPrivateData");
    return g_D3D11OriginVTables._ID3D11Device1.SetPrivateData(ptr, guid, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_SetPrivateDataInterface_Hooked(ID3D11Device1 * ptr, _In_  REFGUID guid, _In_opt_  const IUnknown * pData)
{
    calltrace::AutoTrace trace("ID3D11Device1::SetPrivateDataInterface");
    return g_D3D11OriginVTables._ID3D11Device1.SetPrivateDataInterface(ptr, guid, pData);
}

// -----------------------------------------------------------------------------
static inline D3D_FEATURE_LEVEL STDMETHODCALLTYPE ID3D11Device1_GetFeatureLevel_Hooked(ID3D11Device1 * ptr)
{
    calltrace::AutoTrace trace("ID3D11Device1::GetFeatureLevel");
    return g_D3D11OriginVTables._ID3D11Device1.GetFeatureLevel(ptr);
}

// -----------------------------------------------------------------------------
static inline UINT STDMETHODCALLTYPE ID3D11Device1_GetCreationFlags_Hooked(ID3D11Device1 * ptr)
{
    calltrace::AutoTrace trace("ID3D11Device1::GetCreationFlags");
    return g_D3D11OriginVTables._ID3D11Device1.GetCreationFlags(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_GetDeviceRemovedReason_Hooked(ID3D11Device1 * ptr)
{
    calltrace::AutoTrace trace("ID3D11Device1::GetDeviceRemovedReason");
    return g_D3D11OriginVTables._ID3D11Device1.GetDeviceRemovedReason(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Device1_GetImmediateContext_Hooked(ID3D11Device1 * ptr, _Out_  ID3D11DeviceContext ** ppImmediateContext)
{
    calltrace::AutoTrace trace("ID3D11Device1::GetImmediateContext");
    return g_D3D11OriginVTables._ID3D11Device1.GetImmediateContext(ptr, ppImmediateContext);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_SetExceptionMode_Hooked(ID3D11Device1 * ptr, UINT RaiseFlags)
{
    calltrace::AutoTrace trace("ID3D11Device1::SetExceptionMode");
    return g_D3D11OriginVTables._ID3D11Device1.SetExceptionMode(ptr, RaiseFlags);
}

// -----------------------------------------------------------------------------
static inline UINT STDMETHODCALLTYPE ID3D11Device1_GetExceptionMode_Hooked(ID3D11Device1 * ptr)
{
    calltrace::AutoTrace trace("ID3D11Device1::GetExceptionMode");
    return g_D3D11OriginVTables._ID3D11Device1.GetExceptionMode(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11Device1_GetImmediateContext1_Hooked(ID3D11Device1 * ptr, _Out_  ID3D11DeviceContext1 ** ppImmediateContext)
{
    calltrace::AutoTrace trace("ID3D11Device1::GetImmediateContext1");
    return g_D3D11OriginVTables._ID3D11Device1.GetImmediateContext1(ptr, ppImmediateContext);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateDeferredContext1_Hooked(ID3D11Device1 * ptr, UINT ContextFlags, _Out_opt_  ID3D11DeviceContext1 ** ppDeferredContext)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateDeferredContext1");
    return g_D3D11OriginVTables._ID3D11Device1.CreateDeferredContext1(ptr, ContextFlags, ppDeferredContext);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateBlendState1_Hooked(ID3D11Device1 * ptr, _In_  const D3D11_BLEND_DESC1 * pBlendStateDesc, _Out_opt_  ID3D11BlendState1 ** ppBlendState)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateBlendState1");
    return g_D3D11OriginVTables._ID3D11Device1.CreateBlendState1(ptr, pBlendStateDesc, ppBlendState);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateRasterizerState1_Hooked(ID3D11Device1 * ptr, _In_  const D3D11_RASTERIZER_DESC1 * pRasterizerDesc, _Out_opt_  ID3D11RasterizerState1 ** ppRasterizerState)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateRasterizerState1");
    return g_D3D11OriginVTables._ID3D11Device1.CreateRasterizerState1(ptr, pRasterizerDesc, ppRasterizerState);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_CreateDeviceContextState_Hooked(ID3D11Device1 * ptr, UINT Flags, _In_reads_( FeatureLevels )  const D3D_FEATURE_LEVEL * pFeatureLevels, UINT FeatureLevels, UINT SDKVersion, REFIID EmulatedInterface, _Out_opt_  D3D_FEATURE_LEVEL * pChosenFeatureLevel, _Out_opt_  ID3DDeviceContextState ** ppContextState)
{
    calltrace::AutoTrace trace("ID3D11Device1::CreateDeviceContextState");
    return g_D3D11OriginVTables._ID3D11Device1.CreateDeviceContextState(ptr, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, ppContextState);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_OpenSharedResource1_Hooked(ID3D11Device1 * ptr, _In_  HANDLE hResource, _In_  REFIID returnedInterface, _Out_  void ** ppResource)
{
    calltrace::AutoTrace trace("ID3D11Device1::OpenSharedResource1");
    return g_D3D11OriginVTables._ID3D11Device1.OpenSharedResource1(ptr, hResource, returnedInterface, ppResource);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Device1_OpenSharedResourceByName_Hooked(ID3D11Device1 * ptr, _In_  LPCWSTR lpName, _In_  DWORD dwDesiredAccess, _In_  REFIID returnedInterface, _Out_  void ** ppResource)
{
    calltrace::AutoTrace trace("ID3D11Device1::OpenSharedResourceByName");
    return g_D3D11OriginVTables._ID3D11Device1.OpenSharedResourceByName(ptr, lpName, dwDesiredAccess, returnedInterface, ppResource);
}

// -----------------------------------------------------------------------------
// ID3DUserDefinedAnnotationHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3DUserDefinedAnnotation(ID3DUserDefinedAnnotation * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3DUserDefinedAnnotationVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3DUserDefinedAnnotation);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3DUserDefinedAnnotation);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3DUserDefinedAnnotation");
}
template <> inline void RealToHooked11<ID3DUserDefinedAnnotation>(ID3DUserDefinedAnnotation * p)
{
    return RealToHooked11_ID3DUserDefinedAnnotation( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3DUserDefinedAnnotation_QueryInterface_Hooked(ID3DUserDefinedAnnotation * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3DUserDefinedAnnotation::QueryInterface");
    return g_D3D11OriginVTables._ID3DUserDefinedAnnotation.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3DUserDefinedAnnotation_AddRef_Hooked(ID3DUserDefinedAnnotation * ptr)
{
    calltrace::AutoTrace trace("ID3DUserDefinedAnnotation::AddRef");
    return g_D3D11OriginVTables._ID3DUserDefinedAnnotation.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3DUserDefinedAnnotation_Release_Hooked(ID3DUserDefinedAnnotation * ptr)
{
    calltrace::AutoTrace trace("ID3DUserDefinedAnnotation::Release");
    return g_D3D11OriginVTables._ID3DUserDefinedAnnotation.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline INT STDMETHODCALLTYPE ID3DUserDefinedAnnotation_BeginEvent_Hooked(ID3DUserDefinedAnnotation * ptr, _In_  LPCWSTR Name)
{
    calltrace::AutoTrace trace("ID3DUserDefinedAnnotation::BeginEvent");
    return g_D3D11OriginVTables._ID3DUserDefinedAnnotation.BeginEvent(ptr, Name);
}

// -----------------------------------------------------------------------------
static inline INT STDMETHODCALLTYPE ID3DUserDefinedAnnotation_EndEvent_Hooked(ID3DUserDefinedAnnotation * ptr)
{
    calltrace::AutoTrace trace("ID3DUserDefinedAnnotation::EndEvent");
    return g_D3D11OriginVTables._ID3DUserDefinedAnnotation.EndEvent(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3DUserDefinedAnnotation_SetMarker_Hooked(ID3DUserDefinedAnnotation * ptr, _In_  LPCWSTR Name)
{
    calltrace::AutoTrace trace("ID3DUserDefinedAnnotation::SetMarker");
    return g_D3D11OriginVTables._ID3DUserDefinedAnnotation.SetMarker(ptr, Name);
}

// -----------------------------------------------------------------------------
static inline BOOL STDMETHODCALLTYPE ID3DUserDefinedAnnotation_GetStatus_Hooked(ID3DUserDefinedAnnotation * ptr)
{
    calltrace::AutoTrace trace("ID3DUserDefinedAnnotation::GetStatus");
    return g_D3D11OriginVTables._ID3DUserDefinedAnnotation.GetStatus(ptr);
}

// -----------------------------------------------------------------------------
// ID3D11DebugHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11Debug(ID3D11Debug * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11DebugVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11Debug);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11Debug);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11Debug");
}
template <> inline void RealToHooked11<ID3D11Debug>(ID3D11Debug * p)
{
    return RealToHooked11_ID3D11Debug( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Debug_QueryInterface_Hooked(ID3D11Debug * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11Debug::QueryInterface");
    return g_D3D11OriginVTables._ID3D11Debug.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11Debug_AddRef_Hooked(ID3D11Debug * ptr)
{
    calltrace::AutoTrace trace("ID3D11Debug::AddRef");
    return g_D3D11OriginVTables._ID3D11Debug.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11Debug_Release_Hooked(ID3D11Debug * ptr)
{
    calltrace::AutoTrace trace("ID3D11Debug::Release");
    return g_D3D11OriginVTables._ID3D11Debug.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Debug_SetFeatureMask_Hooked(ID3D11Debug * ptr, UINT Mask)
{
    calltrace::AutoTrace trace("ID3D11Debug::SetFeatureMask");
    return g_D3D11OriginVTables._ID3D11Debug.SetFeatureMask(ptr, Mask);
}

// -----------------------------------------------------------------------------
static inline UINT STDMETHODCALLTYPE ID3D11Debug_GetFeatureMask_Hooked(ID3D11Debug * ptr)
{
    calltrace::AutoTrace trace("ID3D11Debug::GetFeatureMask");
    return g_D3D11OriginVTables._ID3D11Debug.GetFeatureMask(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Debug_SetPresentPerRenderOpDelay_Hooked(ID3D11Debug * ptr, UINT Milliseconds)
{
    calltrace::AutoTrace trace("ID3D11Debug::SetPresentPerRenderOpDelay");
    return g_D3D11OriginVTables._ID3D11Debug.SetPresentPerRenderOpDelay(ptr, Milliseconds);
}

// -----------------------------------------------------------------------------
static inline UINT STDMETHODCALLTYPE ID3D11Debug_GetPresentPerRenderOpDelay_Hooked(ID3D11Debug * ptr)
{
    calltrace::AutoTrace trace("ID3D11Debug::GetPresentPerRenderOpDelay");
    return g_D3D11OriginVTables._ID3D11Debug.GetPresentPerRenderOpDelay(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Debug_SetSwapChain_Hooked(ID3D11Debug * ptr, _In_opt_  IDXGISwapChain * pSwapChain)
{
    calltrace::AutoTrace trace("ID3D11Debug::SetSwapChain");
    return g_D3D11OriginVTables._ID3D11Debug.SetSwapChain(ptr, pSwapChain);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Debug_GetSwapChain_Hooked(ID3D11Debug * ptr, _Out_  IDXGISwapChain ** ppSwapChain)
{
    calltrace::AutoTrace trace("ID3D11Debug::GetSwapChain");
    return g_D3D11OriginVTables._ID3D11Debug.GetSwapChain(ptr, ppSwapChain);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Debug_ValidateContext_Hooked(ID3D11Debug * ptr, _In_  ID3D11DeviceContext * pContext)
{
    calltrace::AutoTrace trace("ID3D11Debug::ValidateContext");
    return g_D3D11OriginVTables._ID3D11Debug.ValidateContext(ptr, pContext);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Debug_ReportLiveDeviceObjects_Hooked(ID3D11Debug * ptr, D3D11_RLDO_FLAGS Flags)
{
    calltrace::AutoTrace trace("ID3D11Debug::ReportLiveDeviceObjects");
    return g_D3D11OriginVTables._ID3D11Debug.ReportLiveDeviceObjects(ptr, Flags);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11Debug_ValidateContextForDispatch_Hooked(ID3D11Debug * ptr, _In_  ID3D11DeviceContext * pContext)
{
    calltrace::AutoTrace trace("ID3D11Debug::ValidateContextForDispatch");
    return g_D3D11OriginVTables._ID3D11Debug.ValidateContextForDispatch(ptr, pContext);
}

// -----------------------------------------------------------------------------
// ID3D11SwitchToRefHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11SwitchToRef(ID3D11SwitchToRef * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11SwitchToRefVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11SwitchToRef);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11SwitchToRef);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11SwitchToRef");
}
template <> inline void RealToHooked11<ID3D11SwitchToRef>(ID3D11SwitchToRef * p)
{
    return RealToHooked11_ID3D11SwitchToRef( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11SwitchToRef_QueryInterface_Hooked(ID3D11SwitchToRef * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11SwitchToRef::QueryInterface");
    return g_D3D11OriginVTables._ID3D11SwitchToRef.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11SwitchToRef_AddRef_Hooked(ID3D11SwitchToRef * ptr)
{
    calltrace::AutoTrace trace("ID3D11SwitchToRef::AddRef");
    return g_D3D11OriginVTables._ID3D11SwitchToRef.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11SwitchToRef_Release_Hooked(ID3D11SwitchToRef * ptr)
{
    calltrace::AutoTrace trace("ID3D11SwitchToRef::Release");
    return g_D3D11OriginVTables._ID3D11SwitchToRef.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline BOOL STDMETHODCALLTYPE ID3D11SwitchToRef_SetUseRef_Hooked(ID3D11SwitchToRef * ptr, BOOL UseRef)
{
    calltrace::AutoTrace trace("ID3D11SwitchToRef::SetUseRef");
    return g_D3D11OriginVTables._ID3D11SwitchToRef.SetUseRef(ptr, UseRef);
}

// -----------------------------------------------------------------------------
static inline BOOL STDMETHODCALLTYPE ID3D11SwitchToRef_GetUseRef_Hooked(ID3D11SwitchToRef * ptr)
{
    calltrace::AutoTrace trace("ID3D11SwitchToRef::GetUseRef");
    return g_D3D11OriginVTables._ID3D11SwitchToRef.GetUseRef(ptr);
}

// -----------------------------------------------------------------------------
// ID3D11TracingDeviceHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11TracingDevice(ID3D11TracingDevice * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11TracingDeviceVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11TracingDevice);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11TracingDevice);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11TracingDevice");
}
template <> inline void RealToHooked11<ID3D11TracingDevice>(ID3D11TracingDevice * p)
{
    return RealToHooked11_ID3D11TracingDevice( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11TracingDevice_QueryInterface_Hooked(ID3D11TracingDevice * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11TracingDevice::QueryInterface");
    return g_D3D11OriginVTables._ID3D11TracingDevice.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11TracingDevice_AddRef_Hooked(ID3D11TracingDevice * ptr)
{
    calltrace::AutoTrace trace("ID3D11TracingDevice::AddRef");
    return g_D3D11OriginVTables._ID3D11TracingDevice.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11TracingDevice_Release_Hooked(ID3D11TracingDevice * ptr)
{
    calltrace::AutoTrace trace("ID3D11TracingDevice::Release");
    return g_D3D11OriginVTables._ID3D11TracingDevice.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11TracingDevice_SetShaderTrackingOptionsByType_Hooked(ID3D11TracingDevice * ptr, _In_  UINT ResourceTypeFlags, _In_  UINT Options)
{
    calltrace::AutoTrace trace("ID3D11TracingDevice::SetShaderTrackingOptionsByType");
    return g_D3D11OriginVTables._ID3D11TracingDevice.SetShaderTrackingOptionsByType(ptr, ResourceTypeFlags, Options);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11TracingDevice_SetShaderTrackingOptions_Hooked(ID3D11TracingDevice * ptr, _In_  IUnknown * pShader, _In_  UINT Options)
{
    calltrace::AutoTrace trace("ID3D11TracingDevice::SetShaderTrackingOptions");
    return g_D3D11OriginVTables._ID3D11TracingDevice.SetShaderTrackingOptions(ptr, pShader, Options);
}

// -----------------------------------------------------------------------------
// ID3D11RefTrackingOptionsHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11RefTrackingOptions(ID3D11RefTrackingOptions * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11RefTrackingOptionsVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11RefTrackingOptions);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11RefTrackingOptions);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11RefTrackingOptions");
}
template <> inline void RealToHooked11<ID3D11RefTrackingOptions>(ID3D11RefTrackingOptions * p)
{
    return RealToHooked11_ID3D11RefTrackingOptions( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11RefTrackingOptions_QueryInterface_Hooked(ID3D11RefTrackingOptions * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11RefTrackingOptions::QueryInterface");
    return g_D3D11OriginVTables._ID3D11RefTrackingOptions.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11RefTrackingOptions_AddRef_Hooked(ID3D11RefTrackingOptions * ptr)
{
    calltrace::AutoTrace trace("ID3D11RefTrackingOptions::AddRef");
    return g_D3D11OriginVTables._ID3D11RefTrackingOptions.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11RefTrackingOptions_Release_Hooked(ID3D11RefTrackingOptions * ptr)
{
    calltrace::AutoTrace trace("ID3D11RefTrackingOptions::Release");
    return g_D3D11OriginVTables._ID3D11RefTrackingOptions.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11RefTrackingOptions_SetTrackingOptions_Hooked(ID3D11RefTrackingOptions * ptr, UINT uOptions)
{
    calltrace::AutoTrace trace("ID3D11RefTrackingOptions::SetTrackingOptions");
    return g_D3D11OriginVTables._ID3D11RefTrackingOptions.SetTrackingOptions(ptr, uOptions);
}

// -----------------------------------------------------------------------------
// ID3D11RefDefaultTrackingOptionsHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11RefDefaultTrackingOptions(ID3D11RefDefaultTrackingOptions * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11RefDefaultTrackingOptionsVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11RefDefaultTrackingOptions);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11RefDefaultTrackingOptions);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11RefDefaultTrackingOptions");
}
template <> inline void RealToHooked11<ID3D11RefDefaultTrackingOptions>(ID3D11RefDefaultTrackingOptions * p)
{
    return RealToHooked11_ID3D11RefDefaultTrackingOptions( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11RefDefaultTrackingOptions_QueryInterface_Hooked(ID3D11RefDefaultTrackingOptions * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11RefDefaultTrackingOptions::QueryInterface");
    return g_D3D11OriginVTables._ID3D11RefDefaultTrackingOptions.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11RefDefaultTrackingOptions_AddRef_Hooked(ID3D11RefDefaultTrackingOptions * ptr)
{
    calltrace::AutoTrace trace("ID3D11RefDefaultTrackingOptions::AddRef");
    return g_D3D11OriginVTables._ID3D11RefDefaultTrackingOptions.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11RefDefaultTrackingOptions_Release_Hooked(ID3D11RefDefaultTrackingOptions * ptr)
{
    calltrace::AutoTrace trace("ID3D11RefDefaultTrackingOptions::Release");
    return g_D3D11OriginVTables._ID3D11RefDefaultTrackingOptions.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11RefDefaultTrackingOptions_SetTrackingOptions_Hooked(ID3D11RefDefaultTrackingOptions * ptr, UINT ResourceTypeFlags, UINT Options)
{
    calltrace::AutoTrace trace("ID3D11RefDefaultTrackingOptions::SetTrackingOptions");
    return g_D3D11OriginVTables._ID3D11RefDefaultTrackingOptions.SetTrackingOptions(ptr, ResourceTypeFlags, Options);
}

// -----------------------------------------------------------------------------
// ID3D11InfoQueueHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_ID3D11InfoQueue(ID3D11InfoQueue * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(ID3D11InfoQueueVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._ID3D11InfoQueue);
    void** hooked = (void**)&(g_D3D11HookedVTables._ID3D11InfoQueue);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "ID3D11InfoQueue");
}
template <> inline void RealToHooked11<ID3D11InfoQueue>(ID3D11InfoQueue * p)
{
    return RealToHooked11_ID3D11InfoQueue( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11InfoQueue_QueryInterface_Hooked(ID3D11InfoQueue * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::QueryInterface");
    return g_D3D11OriginVTables._ID3D11InfoQueue.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11InfoQueue_AddRef_Hooked(ID3D11InfoQueue * ptr)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::AddRef");
    return g_D3D11OriginVTables._ID3D11InfoQueue.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE ID3D11InfoQueue_Release_Hooked(ID3D11InfoQueue * ptr)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::Release");
    return g_D3D11OriginVTables._ID3D11InfoQueue.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11InfoQueue_SetMessageCountLimit_Hooked(ID3D11InfoQueue * ptr, _In_  UINT64 MessageCountLimit)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::SetMessageCountLimit");
    return g_D3D11OriginVTables._ID3D11InfoQueue.SetMessageCountLimit(ptr, MessageCountLimit);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11InfoQueue_ClearStoredMessages_Hooked(ID3D11InfoQueue * ptr)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::ClearStoredMessages");
    return g_D3D11OriginVTables._ID3D11InfoQueue.ClearStoredMessages(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11InfoQueue_GetMessage_Hooked(ID3D11InfoQueue * ptr, _In_  UINT64 MessageIndex, _Out_writes_bytes_opt_(*pMessageByteLength)  D3D11_MESSAGE * pMessage, _Inout_  SIZE_T * pMessageByteLength)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::GetMessage");
    return g_D3D11OriginVTables._ID3D11InfoQueue.GetMessage(ptr, MessageIndex, pMessage, pMessageByteLength);
}

// -----------------------------------------------------------------------------
static inline UINT64 STDMETHODCALLTYPE ID3D11InfoQueue_GetNumMessagesAllowedByStorageFilter_Hooked(ID3D11InfoQueue * ptr)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::GetNumMessagesAllowedByStorageFilter");
    return g_D3D11OriginVTables._ID3D11InfoQueue.GetNumMessagesAllowedByStorageFilter(ptr);
}

// -----------------------------------------------------------------------------
static inline UINT64 STDMETHODCALLTYPE ID3D11InfoQueue_GetNumMessagesDeniedByStorageFilter_Hooked(ID3D11InfoQueue * ptr)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::GetNumMessagesDeniedByStorageFilter");
    return g_D3D11OriginVTables._ID3D11InfoQueue.GetNumMessagesDeniedByStorageFilter(ptr);
}

// -----------------------------------------------------------------------------
static inline UINT64 STDMETHODCALLTYPE ID3D11InfoQueue_GetNumStoredMessages_Hooked(ID3D11InfoQueue * ptr)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::GetNumStoredMessages");
    return g_D3D11OriginVTables._ID3D11InfoQueue.GetNumStoredMessages(ptr);
}

// -----------------------------------------------------------------------------
static inline UINT64 STDMETHODCALLTYPE ID3D11InfoQueue_GetNumStoredMessagesAllowedByRetrievalFilter_Hooked(ID3D11InfoQueue * ptr)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::GetNumStoredMessagesAllowedByRetrievalFilter");
    return g_D3D11OriginVTables._ID3D11InfoQueue.GetNumStoredMessagesAllowedByRetrievalFilter(ptr);
}

// -----------------------------------------------------------------------------
static inline UINT64 STDMETHODCALLTYPE ID3D11InfoQueue_GetNumMessagesDiscardedByMessageCountLimit_Hooked(ID3D11InfoQueue * ptr)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::GetNumMessagesDiscardedByMessageCountLimit");
    return g_D3D11OriginVTables._ID3D11InfoQueue.GetNumMessagesDiscardedByMessageCountLimit(ptr);
}

// -----------------------------------------------------------------------------
static inline UINT64 STDMETHODCALLTYPE ID3D11InfoQueue_GetMessageCountLimit_Hooked(ID3D11InfoQueue * ptr)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::GetMessageCountLimit");
    return g_D3D11OriginVTables._ID3D11InfoQueue.GetMessageCountLimit(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11InfoQueue_AddStorageFilterEntries_Hooked(ID3D11InfoQueue * ptr, _In_  D3D11_INFO_QUEUE_FILTER * pFilter)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::AddStorageFilterEntries");
    return g_D3D11OriginVTables._ID3D11InfoQueue.AddStorageFilterEntries(ptr, pFilter);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11InfoQueue_GetStorageFilter_Hooked(ID3D11InfoQueue * ptr, _Out_writes_bytes_opt_(*pFilterByteLength)  D3D11_INFO_QUEUE_FILTER * pFilter, _Inout_  SIZE_T * pFilterByteLength)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::GetStorageFilter");
    return g_D3D11OriginVTables._ID3D11InfoQueue.GetStorageFilter(ptr, pFilter, pFilterByteLength);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11InfoQueue_ClearStorageFilter_Hooked(ID3D11InfoQueue * ptr)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::ClearStorageFilter");
    return g_D3D11OriginVTables._ID3D11InfoQueue.ClearStorageFilter(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11InfoQueue_PushEmptyStorageFilter_Hooked(ID3D11InfoQueue * ptr)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::PushEmptyStorageFilter");
    return g_D3D11OriginVTables._ID3D11InfoQueue.PushEmptyStorageFilter(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11InfoQueue_PushCopyOfStorageFilter_Hooked(ID3D11InfoQueue * ptr)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::PushCopyOfStorageFilter");
    return g_D3D11OriginVTables._ID3D11InfoQueue.PushCopyOfStorageFilter(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11InfoQueue_PushStorageFilter_Hooked(ID3D11InfoQueue * ptr, _In_  D3D11_INFO_QUEUE_FILTER * pFilter)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::PushStorageFilter");
    return g_D3D11OriginVTables._ID3D11InfoQueue.PushStorageFilter(ptr, pFilter);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11InfoQueue_PopStorageFilter_Hooked(ID3D11InfoQueue * ptr)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::PopStorageFilter");
    return g_D3D11OriginVTables._ID3D11InfoQueue.PopStorageFilter(ptr);
}

// -----------------------------------------------------------------------------
static inline UINT STDMETHODCALLTYPE ID3D11InfoQueue_GetStorageFilterStackSize_Hooked(ID3D11InfoQueue * ptr)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::GetStorageFilterStackSize");
    return g_D3D11OriginVTables._ID3D11InfoQueue.GetStorageFilterStackSize(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11InfoQueue_AddRetrievalFilterEntries_Hooked(ID3D11InfoQueue * ptr, _In_  D3D11_INFO_QUEUE_FILTER * pFilter)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::AddRetrievalFilterEntries");
    return g_D3D11OriginVTables._ID3D11InfoQueue.AddRetrievalFilterEntries(ptr, pFilter);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11InfoQueue_GetRetrievalFilter_Hooked(ID3D11InfoQueue * ptr, _Out_writes_bytes_opt_(*pFilterByteLength)  D3D11_INFO_QUEUE_FILTER * pFilter, _Inout_  SIZE_T * pFilterByteLength)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::GetRetrievalFilter");
    return g_D3D11OriginVTables._ID3D11InfoQueue.GetRetrievalFilter(ptr, pFilter, pFilterByteLength);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11InfoQueue_ClearRetrievalFilter_Hooked(ID3D11InfoQueue * ptr)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::ClearRetrievalFilter");
    return g_D3D11OriginVTables._ID3D11InfoQueue.ClearRetrievalFilter(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11InfoQueue_PushEmptyRetrievalFilter_Hooked(ID3D11InfoQueue * ptr)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::PushEmptyRetrievalFilter");
    return g_D3D11OriginVTables._ID3D11InfoQueue.PushEmptyRetrievalFilter(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11InfoQueue_PushCopyOfRetrievalFilter_Hooked(ID3D11InfoQueue * ptr)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::PushCopyOfRetrievalFilter");
    return g_D3D11OriginVTables._ID3D11InfoQueue.PushCopyOfRetrievalFilter(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11InfoQueue_PushRetrievalFilter_Hooked(ID3D11InfoQueue * ptr, _In_  D3D11_INFO_QUEUE_FILTER * pFilter)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::PushRetrievalFilter");
    return g_D3D11OriginVTables._ID3D11InfoQueue.PushRetrievalFilter(ptr, pFilter);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11InfoQueue_PopRetrievalFilter_Hooked(ID3D11InfoQueue * ptr)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::PopRetrievalFilter");
    return g_D3D11OriginVTables._ID3D11InfoQueue.PopRetrievalFilter(ptr);
}

// -----------------------------------------------------------------------------
static inline UINT STDMETHODCALLTYPE ID3D11InfoQueue_GetRetrievalFilterStackSize_Hooked(ID3D11InfoQueue * ptr)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::GetRetrievalFilterStackSize");
    return g_D3D11OriginVTables._ID3D11InfoQueue.GetRetrievalFilterStackSize(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11InfoQueue_AddMessage_Hooked(ID3D11InfoQueue * ptr, _In_  D3D11_MESSAGE_CATEGORY Category, _In_  D3D11_MESSAGE_SEVERITY Severity, _In_  D3D11_MESSAGE_ID ID, _In_  LPCSTR pDescription)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::AddMessage");
    return g_D3D11OriginVTables._ID3D11InfoQueue.AddMessage(ptr, Category, Severity, ID, pDescription);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11InfoQueue_AddApplicationMessage_Hooked(ID3D11InfoQueue * ptr, _In_  D3D11_MESSAGE_SEVERITY Severity, _In_  LPCSTR pDescription)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::AddApplicationMessage");
    return g_D3D11OriginVTables._ID3D11InfoQueue.AddApplicationMessage(ptr, Severity, pDescription);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11InfoQueue_SetBreakOnCategory_Hooked(ID3D11InfoQueue * ptr, _In_  D3D11_MESSAGE_CATEGORY Category, _In_  BOOL bEnable)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::SetBreakOnCategory");
    return g_D3D11OriginVTables._ID3D11InfoQueue.SetBreakOnCategory(ptr, Category, bEnable);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11InfoQueue_SetBreakOnSeverity_Hooked(ID3D11InfoQueue * ptr, _In_  D3D11_MESSAGE_SEVERITY Severity, _In_  BOOL bEnable)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::SetBreakOnSeverity");
    return g_D3D11OriginVTables._ID3D11InfoQueue.SetBreakOnSeverity(ptr, Severity, bEnable);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE ID3D11InfoQueue_SetBreakOnID_Hooked(ID3D11InfoQueue * ptr, _In_  D3D11_MESSAGE_ID ID, _In_  BOOL bEnable)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::SetBreakOnID");
    return g_D3D11OriginVTables._ID3D11InfoQueue.SetBreakOnID(ptr, ID, bEnable);
}

// -----------------------------------------------------------------------------
static inline BOOL STDMETHODCALLTYPE ID3D11InfoQueue_GetBreakOnCategory_Hooked(ID3D11InfoQueue * ptr, _In_  D3D11_MESSAGE_CATEGORY Category)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::GetBreakOnCategory");
    return g_D3D11OriginVTables._ID3D11InfoQueue.GetBreakOnCategory(ptr, Category);
}

// -----------------------------------------------------------------------------
static inline BOOL STDMETHODCALLTYPE ID3D11InfoQueue_GetBreakOnSeverity_Hooked(ID3D11InfoQueue * ptr, _In_  D3D11_MESSAGE_SEVERITY Severity)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::GetBreakOnSeverity");
    return g_D3D11OriginVTables._ID3D11InfoQueue.GetBreakOnSeverity(ptr, Severity);
}

// -----------------------------------------------------------------------------
static inline BOOL STDMETHODCALLTYPE ID3D11InfoQueue_GetBreakOnID_Hooked(ID3D11InfoQueue * ptr, _In_  D3D11_MESSAGE_ID ID)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::GetBreakOnID");
    return g_D3D11OriginVTables._ID3D11InfoQueue.GetBreakOnID(ptr, ID);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE ID3D11InfoQueue_SetMuteDebugOutput_Hooked(ID3D11InfoQueue * ptr, _In_  BOOL bMute)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::SetMuteDebugOutput");
    return g_D3D11OriginVTables._ID3D11InfoQueue.SetMuteDebugOutput(ptr, bMute);
}

// -----------------------------------------------------------------------------
static inline BOOL STDMETHODCALLTYPE ID3D11InfoQueue_GetMuteDebugOutput_Hooked(ID3D11InfoQueue * ptr)
{
    calltrace::AutoTrace trace("ID3D11InfoQueue::GetMuteDebugOutput");
    return g_D3D11OriginVTables._ID3D11InfoQueue.GetMuteDebugOutput(ptr);
}

// -----------------------------------------------------------------------------
// IDXGIObjectHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_IDXGIObject(IDXGIObject * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(IDXGIObjectVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._IDXGIObject);
    void** hooked = (void**)&(g_D3D11HookedVTables._IDXGIObject);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "IDXGIObject");
}
template <> inline void RealToHooked11<IDXGIObject>(IDXGIObject * p)
{
    return RealToHooked11_IDXGIObject( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIObject_QueryInterface_Hooked(IDXGIObject * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("IDXGIObject::QueryInterface");
    return g_D3D11OriginVTables._IDXGIObject.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIObject_AddRef_Hooked(IDXGIObject * ptr)
{
    calltrace::AutoTrace trace("IDXGIObject::AddRef");
    return g_D3D11OriginVTables._IDXGIObject.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIObject_Release_Hooked(IDXGIObject * ptr)
{
    calltrace::AutoTrace trace("IDXGIObject::Release");
    return g_D3D11OriginVTables._IDXGIObject.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIObject_SetPrivateData_Hooked(IDXGIObject * ptr, _In_  REFGUID Name, /* [in] */ UINT DataSize, _In_reads_bytes_(DataSize)  const void * pData)
{
    calltrace::AutoTrace trace("IDXGIObject::SetPrivateData");
    return g_D3D11OriginVTables._IDXGIObject.SetPrivateData(ptr, Name, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIObject_SetPrivateDataInterface_Hooked(IDXGIObject * ptr, _In_  REFGUID Name, _In_  const IUnknown * pUnknown)
{
    calltrace::AutoTrace trace("IDXGIObject::SetPrivateDataInterface");
    return g_D3D11OriginVTables._IDXGIObject.SetPrivateDataInterface(ptr, Name, pUnknown);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIObject_GetPrivateData_Hooked(IDXGIObject * ptr, _In_  REFGUID Name, _Inout_  UINT * pDataSize, _Out_writes_bytes_(*pDataSize)  void * pData)
{
    calltrace::AutoTrace trace("IDXGIObject::GetPrivateData");
    return g_D3D11OriginVTables._IDXGIObject.GetPrivateData(ptr, Name, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIObject_GetParent_Hooked(IDXGIObject * ptr, _In_  REFIID riid, _Out_  void ** ppParent)
{
    calltrace::AutoTrace trace("IDXGIObject::GetParent");
    return g_D3D11OriginVTables._IDXGIObject.GetParent(ptr, riid, ppParent);
}

// -----------------------------------------------------------------------------
// IDXGIDeviceSubObjectHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_IDXGIDeviceSubObject(IDXGIDeviceSubObject * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(IDXGIDeviceSubObjectVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._IDXGIDeviceSubObject);
    void** hooked = (void**)&(g_D3D11HookedVTables._IDXGIDeviceSubObject);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "IDXGIDeviceSubObject");
}
template <> inline void RealToHooked11<IDXGIDeviceSubObject>(IDXGIDeviceSubObject * p)
{
    return RealToHooked11_IDXGIDeviceSubObject( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDeviceSubObject_QueryInterface_Hooked(IDXGIDeviceSubObject * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("IDXGIDeviceSubObject::QueryInterface");
    return g_D3D11OriginVTables._IDXGIDeviceSubObject.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIDeviceSubObject_AddRef_Hooked(IDXGIDeviceSubObject * ptr)
{
    calltrace::AutoTrace trace("IDXGIDeviceSubObject::AddRef");
    return g_D3D11OriginVTables._IDXGIDeviceSubObject.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIDeviceSubObject_Release_Hooked(IDXGIDeviceSubObject * ptr)
{
    calltrace::AutoTrace trace("IDXGIDeviceSubObject::Release");
    return g_D3D11OriginVTables._IDXGIDeviceSubObject.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDeviceSubObject_SetPrivateData_Hooked(IDXGIDeviceSubObject * ptr, _In_  REFGUID Name, /* [in] */ UINT DataSize, _In_reads_bytes_(DataSize)  const void * pData)
{
    calltrace::AutoTrace trace("IDXGIDeviceSubObject::SetPrivateData");
    return g_D3D11OriginVTables._IDXGIDeviceSubObject.SetPrivateData(ptr, Name, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDeviceSubObject_SetPrivateDataInterface_Hooked(IDXGIDeviceSubObject * ptr, _In_  REFGUID Name, _In_  const IUnknown * pUnknown)
{
    calltrace::AutoTrace trace("IDXGIDeviceSubObject::SetPrivateDataInterface");
    return g_D3D11OriginVTables._IDXGIDeviceSubObject.SetPrivateDataInterface(ptr, Name, pUnknown);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDeviceSubObject_GetPrivateData_Hooked(IDXGIDeviceSubObject * ptr, _In_  REFGUID Name, _Inout_  UINT * pDataSize, _Out_writes_bytes_(*pDataSize)  void * pData)
{
    calltrace::AutoTrace trace("IDXGIDeviceSubObject::GetPrivateData");
    return g_D3D11OriginVTables._IDXGIDeviceSubObject.GetPrivateData(ptr, Name, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDeviceSubObject_GetParent_Hooked(IDXGIDeviceSubObject * ptr, _In_  REFIID riid, _Out_  void ** ppParent)
{
    calltrace::AutoTrace trace("IDXGIDeviceSubObject::GetParent");
    return g_D3D11OriginVTables._IDXGIDeviceSubObject.GetParent(ptr, riid, ppParent);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDeviceSubObject_GetDevice_Hooked(IDXGIDeviceSubObject * ptr, _In_  REFIID riid, _Out_  void ** ppDevice)
{
    calltrace::AutoTrace trace("IDXGIDeviceSubObject::GetDevice");
    return g_D3D11OriginVTables._IDXGIDeviceSubObject.GetDevice(ptr, riid, ppDevice);
}

// -----------------------------------------------------------------------------
// IDXGIResourceHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_IDXGIResource(IDXGIResource * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(IDXGIResourceVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._IDXGIResource);
    void** hooked = (void**)&(g_D3D11HookedVTables._IDXGIResource);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "IDXGIResource");
}
template <> inline void RealToHooked11<IDXGIResource>(IDXGIResource * p)
{
    return RealToHooked11_IDXGIResource( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIResource_QueryInterface_Hooked(IDXGIResource * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("IDXGIResource::QueryInterface");
    return g_D3D11OriginVTables._IDXGIResource.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIResource_AddRef_Hooked(IDXGIResource * ptr)
{
    calltrace::AutoTrace trace("IDXGIResource::AddRef");
    return g_D3D11OriginVTables._IDXGIResource.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIResource_Release_Hooked(IDXGIResource * ptr)
{
    calltrace::AutoTrace trace("IDXGIResource::Release");
    return g_D3D11OriginVTables._IDXGIResource.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIResource_SetPrivateData_Hooked(IDXGIResource * ptr, _In_  REFGUID Name, /* [in] */ UINT DataSize, _In_reads_bytes_(DataSize)  const void * pData)
{
    calltrace::AutoTrace trace("IDXGIResource::SetPrivateData");
    return g_D3D11OriginVTables._IDXGIResource.SetPrivateData(ptr, Name, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIResource_SetPrivateDataInterface_Hooked(IDXGIResource * ptr, _In_  REFGUID Name, _In_  const IUnknown * pUnknown)
{
    calltrace::AutoTrace trace("IDXGIResource::SetPrivateDataInterface");
    return g_D3D11OriginVTables._IDXGIResource.SetPrivateDataInterface(ptr, Name, pUnknown);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIResource_GetPrivateData_Hooked(IDXGIResource * ptr, _In_  REFGUID Name, _Inout_  UINT * pDataSize, _Out_writes_bytes_(*pDataSize)  void * pData)
{
    calltrace::AutoTrace trace("IDXGIResource::GetPrivateData");
    return g_D3D11OriginVTables._IDXGIResource.GetPrivateData(ptr, Name, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIResource_GetParent_Hooked(IDXGIResource * ptr, _In_  REFIID riid, _Out_  void ** ppParent)
{
    calltrace::AutoTrace trace("IDXGIResource::GetParent");
    return g_D3D11OriginVTables._IDXGIResource.GetParent(ptr, riid, ppParent);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIResource_GetDevice_Hooked(IDXGIResource * ptr, _In_  REFIID riid, _Out_  void ** ppDevice)
{
    calltrace::AutoTrace trace("IDXGIResource::GetDevice");
    return g_D3D11OriginVTables._IDXGIResource.GetDevice(ptr, riid, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIResource_GetSharedHandle_Hooked(IDXGIResource * ptr, _Out_  HANDLE * pSharedHandle)
{
    calltrace::AutoTrace trace("IDXGIResource::GetSharedHandle");
    return g_D3D11OriginVTables._IDXGIResource.GetSharedHandle(ptr, pSharedHandle);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIResource_GetUsage_Hooked(IDXGIResource * ptr, _Out_  DXGI_USAGE * pUsage)
{
    calltrace::AutoTrace trace("IDXGIResource::GetUsage");
    return g_D3D11OriginVTables._IDXGIResource.GetUsage(ptr, pUsage);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIResource_SetEvictionPriority_Hooked(IDXGIResource * ptr, /* [in] */ UINT EvictionPriority)
{
    calltrace::AutoTrace trace("IDXGIResource::SetEvictionPriority");
    return g_D3D11OriginVTables._IDXGIResource.SetEvictionPriority(ptr, EvictionPriority);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIResource_GetEvictionPriority_Hooked(IDXGIResource * ptr, _Out_  UINT * pEvictionPriority)
{
    calltrace::AutoTrace trace("IDXGIResource::GetEvictionPriority");
    return g_D3D11OriginVTables._IDXGIResource.GetEvictionPriority(ptr, pEvictionPriority);
}

// -----------------------------------------------------------------------------
// IDXGIKeyedMutexHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_IDXGIKeyedMutex(IDXGIKeyedMutex * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(IDXGIKeyedMutexVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._IDXGIKeyedMutex);
    void** hooked = (void**)&(g_D3D11HookedVTables._IDXGIKeyedMutex);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "IDXGIKeyedMutex");
}
template <> inline void RealToHooked11<IDXGIKeyedMutex>(IDXGIKeyedMutex * p)
{
    return RealToHooked11_IDXGIKeyedMutex( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIKeyedMutex_QueryInterface_Hooked(IDXGIKeyedMutex * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("IDXGIKeyedMutex::QueryInterface");
    return g_D3D11OriginVTables._IDXGIKeyedMutex.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIKeyedMutex_AddRef_Hooked(IDXGIKeyedMutex * ptr)
{
    calltrace::AutoTrace trace("IDXGIKeyedMutex::AddRef");
    return g_D3D11OriginVTables._IDXGIKeyedMutex.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIKeyedMutex_Release_Hooked(IDXGIKeyedMutex * ptr)
{
    calltrace::AutoTrace trace("IDXGIKeyedMutex::Release");
    return g_D3D11OriginVTables._IDXGIKeyedMutex.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIKeyedMutex_SetPrivateData_Hooked(IDXGIKeyedMutex * ptr, _In_  REFGUID Name, /* [in] */ UINT DataSize, _In_reads_bytes_(DataSize)  const void * pData)
{
    calltrace::AutoTrace trace("IDXGIKeyedMutex::SetPrivateData");
    return g_D3D11OriginVTables._IDXGIKeyedMutex.SetPrivateData(ptr, Name, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIKeyedMutex_SetPrivateDataInterface_Hooked(IDXGIKeyedMutex * ptr, _In_  REFGUID Name, _In_  const IUnknown * pUnknown)
{
    calltrace::AutoTrace trace("IDXGIKeyedMutex::SetPrivateDataInterface");
    return g_D3D11OriginVTables._IDXGIKeyedMutex.SetPrivateDataInterface(ptr, Name, pUnknown);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIKeyedMutex_GetPrivateData_Hooked(IDXGIKeyedMutex * ptr, _In_  REFGUID Name, _Inout_  UINT * pDataSize, _Out_writes_bytes_(*pDataSize)  void * pData)
{
    calltrace::AutoTrace trace("IDXGIKeyedMutex::GetPrivateData");
    return g_D3D11OriginVTables._IDXGIKeyedMutex.GetPrivateData(ptr, Name, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIKeyedMutex_GetParent_Hooked(IDXGIKeyedMutex * ptr, _In_  REFIID riid, _Out_  void ** ppParent)
{
    calltrace::AutoTrace trace("IDXGIKeyedMutex::GetParent");
    return g_D3D11OriginVTables._IDXGIKeyedMutex.GetParent(ptr, riid, ppParent);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIKeyedMutex_GetDevice_Hooked(IDXGIKeyedMutex * ptr, _In_  REFIID riid, _Out_  void ** ppDevice)
{
    calltrace::AutoTrace trace("IDXGIKeyedMutex::GetDevice");
    return g_D3D11OriginVTables._IDXGIKeyedMutex.GetDevice(ptr, riid, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIKeyedMutex_AcquireSync_Hooked(IDXGIKeyedMutex * ptr, /* [in] */ UINT64 Key, /* [in] */ DWORD dwMilliseconds)
{
    calltrace::AutoTrace trace("IDXGIKeyedMutex::AcquireSync");
    return g_D3D11OriginVTables._IDXGIKeyedMutex.AcquireSync(ptr, Key, dwMilliseconds);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIKeyedMutex_ReleaseSync_Hooked(IDXGIKeyedMutex * ptr, /* [in] */ UINT64 Key)
{
    calltrace::AutoTrace trace("IDXGIKeyedMutex::ReleaseSync");
    return g_D3D11OriginVTables._IDXGIKeyedMutex.ReleaseSync(ptr, Key);
}

// -----------------------------------------------------------------------------
// IDXGISurfaceHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_IDXGISurface(IDXGISurface * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(IDXGISurfaceVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._IDXGISurface);
    void** hooked = (void**)&(g_D3D11HookedVTables._IDXGISurface);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "IDXGISurface");
}
template <> inline void RealToHooked11<IDXGISurface>(IDXGISurface * p)
{
    return RealToHooked11_IDXGISurface( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface_QueryInterface_Hooked(IDXGISurface * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("IDXGISurface::QueryInterface");
    return g_D3D11OriginVTables._IDXGISurface.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGISurface_AddRef_Hooked(IDXGISurface * ptr)
{
    calltrace::AutoTrace trace("IDXGISurface::AddRef");
    return g_D3D11OriginVTables._IDXGISurface.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGISurface_Release_Hooked(IDXGISurface * ptr)
{
    calltrace::AutoTrace trace("IDXGISurface::Release");
    return g_D3D11OriginVTables._IDXGISurface.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface_SetPrivateData_Hooked(IDXGISurface * ptr, _In_  REFGUID Name, /* [in] */ UINT DataSize, _In_reads_bytes_(DataSize)  const void * pData)
{
    calltrace::AutoTrace trace("IDXGISurface::SetPrivateData");
    return g_D3D11OriginVTables._IDXGISurface.SetPrivateData(ptr, Name, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface_SetPrivateDataInterface_Hooked(IDXGISurface * ptr, _In_  REFGUID Name, _In_  const IUnknown * pUnknown)
{
    calltrace::AutoTrace trace("IDXGISurface::SetPrivateDataInterface");
    return g_D3D11OriginVTables._IDXGISurface.SetPrivateDataInterface(ptr, Name, pUnknown);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface_GetPrivateData_Hooked(IDXGISurface * ptr, _In_  REFGUID Name, _Inout_  UINT * pDataSize, _Out_writes_bytes_(*pDataSize)  void * pData)
{
    calltrace::AutoTrace trace("IDXGISurface::GetPrivateData");
    return g_D3D11OriginVTables._IDXGISurface.GetPrivateData(ptr, Name, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface_GetParent_Hooked(IDXGISurface * ptr, _In_  REFIID riid, _Out_  void ** ppParent)
{
    calltrace::AutoTrace trace("IDXGISurface::GetParent");
    return g_D3D11OriginVTables._IDXGISurface.GetParent(ptr, riid, ppParent);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface_GetDevice_Hooked(IDXGISurface * ptr, _In_  REFIID riid, _Out_  void ** ppDevice)
{
    calltrace::AutoTrace trace("IDXGISurface::GetDevice");
    return g_D3D11OriginVTables._IDXGISurface.GetDevice(ptr, riid, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface_GetDesc_Hooked(IDXGISurface * ptr, _Out_  DXGI_SURFACE_DESC * pDesc)
{
    calltrace::AutoTrace trace("IDXGISurface::GetDesc");
    return g_D3D11OriginVTables._IDXGISurface.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface_Map_Hooked(IDXGISurface * ptr, _Out_  DXGI_MAPPED_RECT * pLockedRect, /* [in] */ UINT MapFlags)
{
    calltrace::AutoTrace trace("IDXGISurface::Map");
    return g_D3D11OriginVTables._IDXGISurface.Map(ptr, pLockedRect, MapFlags);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface_Unmap_Hooked(IDXGISurface * ptr)
{
    calltrace::AutoTrace trace("IDXGISurface::Unmap");
    return g_D3D11OriginVTables._IDXGISurface.Unmap(ptr);
}

// -----------------------------------------------------------------------------
// IDXGISurface1Hook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_IDXGISurface1(IDXGISurface1 * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(IDXGISurface1Vtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._IDXGISurface1);
    void** hooked = (void**)&(g_D3D11HookedVTables._IDXGISurface1);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "IDXGISurface1");
}
template <> inline void RealToHooked11<IDXGISurface1>(IDXGISurface1 * p)
{
    return RealToHooked11_IDXGISurface1( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface1_QueryInterface_Hooked(IDXGISurface1 * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("IDXGISurface1::QueryInterface");
    return g_D3D11OriginVTables._IDXGISurface1.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGISurface1_AddRef_Hooked(IDXGISurface1 * ptr)
{
    calltrace::AutoTrace trace("IDXGISurface1::AddRef");
    return g_D3D11OriginVTables._IDXGISurface1.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGISurface1_Release_Hooked(IDXGISurface1 * ptr)
{
    calltrace::AutoTrace trace("IDXGISurface1::Release");
    return g_D3D11OriginVTables._IDXGISurface1.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface1_SetPrivateData_Hooked(IDXGISurface1 * ptr, _In_  REFGUID Name, /* [in] */ UINT DataSize, _In_reads_bytes_(DataSize)  const void * pData)
{
    calltrace::AutoTrace trace("IDXGISurface1::SetPrivateData");
    return g_D3D11OriginVTables._IDXGISurface1.SetPrivateData(ptr, Name, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface1_SetPrivateDataInterface_Hooked(IDXGISurface1 * ptr, _In_  REFGUID Name, _In_  const IUnknown * pUnknown)
{
    calltrace::AutoTrace trace("IDXGISurface1::SetPrivateDataInterface");
    return g_D3D11OriginVTables._IDXGISurface1.SetPrivateDataInterface(ptr, Name, pUnknown);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface1_GetPrivateData_Hooked(IDXGISurface1 * ptr, _In_  REFGUID Name, _Inout_  UINT * pDataSize, _Out_writes_bytes_(*pDataSize)  void * pData)
{
    calltrace::AutoTrace trace("IDXGISurface1::GetPrivateData");
    return g_D3D11OriginVTables._IDXGISurface1.GetPrivateData(ptr, Name, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface1_GetParent_Hooked(IDXGISurface1 * ptr, _In_  REFIID riid, _Out_  void ** ppParent)
{
    calltrace::AutoTrace trace("IDXGISurface1::GetParent");
    return g_D3D11OriginVTables._IDXGISurface1.GetParent(ptr, riid, ppParent);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface1_GetDevice_Hooked(IDXGISurface1 * ptr, _In_  REFIID riid, _Out_  void ** ppDevice)
{
    calltrace::AutoTrace trace("IDXGISurface1::GetDevice");
    return g_D3D11OriginVTables._IDXGISurface1.GetDevice(ptr, riid, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface1_GetDesc_Hooked(IDXGISurface1 * ptr, _Out_  DXGI_SURFACE_DESC * pDesc)
{
    calltrace::AutoTrace trace("IDXGISurface1::GetDesc");
    return g_D3D11OriginVTables._IDXGISurface1.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface1_Map_Hooked(IDXGISurface1 * ptr, _Out_  DXGI_MAPPED_RECT * pLockedRect, /* [in] */ UINT MapFlags)
{
    calltrace::AutoTrace trace("IDXGISurface1::Map");
    return g_D3D11OriginVTables._IDXGISurface1.Map(ptr, pLockedRect, MapFlags);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface1_Unmap_Hooked(IDXGISurface1 * ptr)
{
    calltrace::AutoTrace trace("IDXGISurface1::Unmap");
    return g_D3D11OriginVTables._IDXGISurface1.Unmap(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface1_GetDC_Hooked(IDXGISurface1 * ptr, /* [in] */ BOOL Discard, _Out_  HDC * phdc)
{
    calltrace::AutoTrace trace("IDXGISurface1::GetDC");
    return g_D3D11OriginVTables._IDXGISurface1.GetDC(ptr, Discard, phdc);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface1_ReleaseDC_Hooked(IDXGISurface1 * ptr, _In_opt_  RECT * pDirtyRect)
{
    calltrace::AutoTrace trace("IDXGISurface1::ReleaseDC");
    return g_D3D11OriginVTables._IDXGISurface1.ReleaseDC(ptr, pDirtyRect);
}

// -----------------------------------------------------------------------------
// IDXGIAdapterHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_IDXGIAdapter(IDXGIAdapter * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(IDXGIAdapterVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._IDXGIAdapter);
    void** hooked = (void**)&(g_D3D11HookedVTables._IDXGIAdapter);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "IDXGIAdapter");
}
template <> inline void RealToHooked11<IDXGIAdapter>(IDXGIAdapter * p)
{
    return RealToHooked11_IDXGIAdapter( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter_QueryInterface_Hooked(IDXGIAdapter * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("IDXGIAdapter::QueryInterface");
    return g_D3D11OriginVTables._IDXGIAdapter.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIAdapter_AddRef_Hooked(IDXGIAdapter * ptr)
{
    calltrace::AutoTrace trace("IDXGIAdapter::AddRef");
    return g_D3D11OriginVTables._IDXGIAdapter.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIAdapter_Release_Hooked(IDXGIAdapter * ptr)
{
    calltrace::AutoTrace trace("IDXGIAdapter::Release");
    return g_D3D11OriginVTables._IDXGIAdapter.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter_SetPrivateData_Hooked(IDXGIAdapter * ptr, _In_  REFGUID Name, /* [in] */ UINT DataSize, _In_reads_bytes_(DataSize)  const void * pData)
{
    calltrace::AutoTrace trace("IDXGIAdapter::SetPrivateData");
    return g_D3D11OriginVTables._IDXGIAdapter.SetPrivateData(ptr, Name, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter_SetPrivateDataInterface_Hooked(IDXGIAdapter * ptr, _In_  REFGUID Name, _In_  const IUnknown * pUnknown)
{
    calltrace::AutoTrace trace("IDXGIAdapter::SetPrivateDataInterface");
    return g_D3D11OriginVTables._IDXGIAdapter.SetPrivateDataInterface(ptr, Name, pUnknown);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter_GetPrivateData_Hooked(IDXGIAdapter * ptr, _In_  REFGUID Name, _Inout_  UINT * pDataSize, _Out_writes_bytes_(*pDataSize)  void * pData)
{
    calltrace::AutoTrace trace("IDXGIAdapter::GetPrivateData");
    return g_D3D11OriginVTables._IDXGIAdapter.GetPrivateData(ptr, Name, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter_GetParent_Hooked(IDXGIAdapter * ptr, _In_  REFIID riid, _Out_  void ** ppParent)
{
    calltrace::AutoTrace trace("IDXGIAdapter::GetParent");
    return g_D3D11OriginVTables._IDXGIAdapter.GetParent(ptr, riid, ppParent);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter_EnumOutputs_Hooked(IDXGIAdapter * ptr, /* [in] */ UINT Output, _Out_  IDXGIOutput ** ppOutput)
{
    calltrace::AutoTrace trace("IDXGIAdapter::EnumOutputs");
    return g_D3D11OriginVTables._IDXGIAdapter.EnumOutputs(ptr, Output, ppOutput);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter_GetDesc_Hooked(IDXGIAdapter * ptr, _Out_  DXGI_ADAPTER_DESC * pDesc)
{
    calltrace::AutoTrace trace("IDXGIAdapter::GetDesc");
    return g_D3D11OriginVTables._IDXGIAdapter.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter_CheckInterfaceSupport_Hooked(IDXGIAdapter * ptr, _In_  REFGUID InterfaceName, _Out_  LARGE_INTEGER * pUMDVersion)
{
    calltrace::AutoTrace trace("IDXGIAdapter::CheckInterfaceSupport");
    return g_D3D11OriginVTables._IDXGIAdapter.CheckInterfaceSupport(ptr, InterfaceName, pUMDVersion);
}

// -----------------------------------------------------------------------------
// IDXGIOutputHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_IDXGIOutput(IDXGIOutput * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(IDXGIOutputVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._IDXGIOutput);
    void** hooked = (void**)&(g_D3D11HookedVTables._IDXGIOutput);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "IDXGIOutput");
}
template <> inline void RealToHooked11<IDXGIOutput>(IDXGIOutput * p)
{
    return RealToHooked11_IDXGIOutput( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput_QueryInterface_Hooked(IDXGIOutput * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("IDXGIOutput::QueryInterface");
    return g_D3D11OriginVTables._IDXGIOutput.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIOutput_AddRef_Hooked(IDXGIOutput * ptr)
{
    calltrace::AutoTrace trace("IDXGIOutput::AddRef");
    return g_D3D11OriginVTables._IDXGIOutput.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIOutput_Release_Hooked(IDXGIOutput * ptr)
{
    calltrace::AutoTrace trace("IDXGIOutput::Release");
    return g_D3D11OriginVTables._IDXGIOutput.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput_SetPrivateData_Hooked(IDXGIOutput * ptr, _In_  REFGUID Name, /* [in] */ UINT DataSize, _In_reads_bytes_(DataSize)  const void * pData)
{
    calltrace::AutoTrace trace("IDXGIOutput::SetPrivateData");
    return g_D3D11OriginVTables._IDXGIOutput.SetPrivateData(ptr, Name, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput_SetPrivateDataInterface_Hooked(IDXGIOutput * ptr, _In_  REFGUID Name, _In_  const IUnknown * pUnknown)
{
    calltrace::AutoTrace trace("IDXGIOutput::SetPrivateDataInterface");
    return g_D3D11OriginVTables._IDXGIOutput.SetPrivateDataInterface(ptr, Name, pUnknown);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput_GetPrivateData_Hooked(IDXGIOutput * ptr, _In_  REFGUID Name, _Inout_  UINT * pDataSize, _Out_writes_bytes_(*pDataSize)  void * pData)
{
    calltrace::AutoTrace trace("IDXGIOutput::GetPrivateData");
    return g_D3D11OriginVTables._IDXGIOutput.GetPrivateData(ptr, Name, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput_GetParent_Hooked(IDXGIOutput * ptr, _In_  REFIID riid, _Out_  void ** ppParent)
{
    calltrace::AutoTrace trace("IDXGIOutput::GetParent");
    return g_D3D11OriginVTables._IDXGIOutput.GetParent(ptr, riid, ppParent);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput_GetDesc_Hooked(IDXGIOutput * ptr, _Out_  DXGI_OUTPUT_DESC * pDesc)
{
    calltrace::AutoTrace trace("IDXGIOutput::GetDesc");
    return g_D3D11OriginVTables._IDXGIOutput.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput_GetDisplayModeList_Hooked(IDXGIOutput * ptr, /* [in] */ DXGI_FORMAT EnumFormat, /* [in] */ UINT Flags, _Inout_  UINT * pNumModes, _Out_writes_to_opt_(*pNumModes,*pNumModes)  DXGI_MODE_DESC * pDesc)
{
    calltrace::AutoTrace trace("IDXGIOutput::GetDisplayModeList");
    return g_D3D11OriginVTables._IDXGIOutput.GetDisplayModeList(ptr, EnumFormat, Flags, pNumModes, pDesc);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput_FindClosestMatchingMode_Hooked(IDXGIOutput * ptr, _In_  const DXGI_MODE_DESC * pModeToMatch, _Out_  DXGI_MODE_DESC * pClosestMatch, _In_opt_  IUnknown * pConcernedDevice)
{
    calltrace::AutoTrace trace("IDXGIOutput::FindClosestMatchingMode");
    return g_D3D11OriginVTables._IDXGIOutput.FindClosestMatchingMode(ptr, pModeToMatch, pClosestMatch, pConcernedDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput_WaitForVBlank_Hooked(IDXGIOutput * ptr)
{
    calltrace::AutoTrace trace("IDXGIOutput::WaitForVBlank");
    return g_D3D11OriginVTables._IDXGIOutput.WaitForVBlank(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput_TakeOwnership_Hooked(IDXGIOutput * ptr, _In_  IUnknown * pDevice, BOOL Exclusive)
{
    calltrace::AutoTrace trace("IDXGIOutput::TakeOwnership");
    return g_D3D11OriginVTables._IDXGIOutput.TakeOwnership(ptr, pDevice, Exclusive);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE IDXGIOutput_ReleaseOwnership_Hooked(IDXGIOutput * ptr)
{
    calltrace::AutoTrace trace("IDXGIOutput::ReleaseOwnership");
    return g_D3D11OriginVTables._IDXGIOutput.ReleaseOwnership(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput_GetGammaControlCapabilities_Hooked(IDXGIOutput * ptr, _Out_  DXGI_GAMMA_CONTROL_CAPABILITIES * pGammaCaps)
{
    calltrace::AutoTrace trace("IDXGIOutput::GetGammaControlCapabilities");
    return g_D3D11OriginVTables._IDXGIOutput.GetGammaControlCapabilities(ptr, pGammaCaps);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput_SetGammaControl_Hooked(IDXGIOutput * ptr, _In_  const DXGI_GAMMA_CONTROL * pArray)
{
    calltrace::AutoTrace trace("IDXGIOutput::SetGammaControl");
    return g_D3D11OriginVTables._IDXGIOutput.SetGammaControl(ptr, pArray);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput_GetGammaControl_Hooked(IDXGIOutput * ptr, _Out_  DXGI_GAMMA_CONTROL * pArray)
{
    calltrace::AutoTrace trace("IDXGIOutput::GetGammaControl");
    return g_D3D11OriginVTables._IDXGIOutput.GetGammaControl(ptr, pArray);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput_SetDisplaySurface_Hooked(IDXGIOutput * ptr, _In_  IDXGISurface * pScanoutSurface)
{
    calltrace::AutoTrace trace("IDXGIOutput::SetDisplaySurface");
    return g_D3D11OriginVTables._IDXGIOutput.SetDisplaySurface(ptr, pScanoutSurface);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput_GetDisplaySurfaceData_Hooked(IDXGIOutput * ptr, _In_  IDXGISurface * pDestination)
{
    calltrace::AutoTrace trace("IDXGIOutput::GetDisplaySurfaceData");
    return g_D3D11OriginVTables._IDXGIOutput.GetDisplaySurfaceData(ptr, pDestination);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput_GetFrameStatistics_Hooked(IDXGIOutput * ptr, _Out_  DXGI_FRAME_STATISTICS * pStats)
{
    calltrace::AutoTrace trace("IDXGIOutput::GetFrameStatistics");
    return g_D3D11OriginVTables._IDXGIOutput.GetFrameStatistics(ptr, pStats);
}

// -----------------------------------------------------------------------------
// IDXGISwapChainHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_IDXGISwapChain(IDXGISwapChain * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(IDXGISwapChainVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._IDXGISwapChain);
    void** hooked = (void**)&(g_D3D11HookedVTables._IDXGISwapChain);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "IDXGISwapChain");
}
template <> inline void RealToHooked11<IDXGISwapChain>(IDXGISwapChain * p)
{
    return RealToHooked11_IDXGISwapChain( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain_QueryInterface_Hooked(IDXGISwapChain * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("IDXGISwapChain::QueryInterface");
    return g_D3D11OriginVTables._IDXGISwapChain.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGISwapChain_AddRef_Hooked(IDXGISwapChain * ptr)
{
    calltrace::AutoTrace trace("IDXGISwapChain::AddRef");
    return g_D3D11OriginVTables._IDXGISwapChain.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGISwapChain_Release_Hooked(IDXGISwapChain * ptr)
{
    calltrace::AutoTrace trace("IDXGISwapChain::Release");
    return g_D3D11OriginVTables._IDXGISwapChain.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain_SetPrivateData_Hooked(IDXGISwapChain * ptr, _In_  REFGUID Name, /* [in] */ UINT DataSize, _In_reads_bytes_(DataSize)  const void * pData)
{
    calltrace::AutoTrace trace("IDXGISwapChain::SetPrivateData");
    return g_D3D11OriginVTables._IDXGISwapChain.SetPrivateData(ptr, Name, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain_SetPrivateDataInterface_Hooked(IDXGISwapChain * ptr, _In_  REFGUID Name, _In_  const IUnknown * pUnknown)
{
    calltrace::AutoTrace trace("IDXGISwapChain::SetPrivateDataInterface");
    return g_D3D11OriginVTables._IDXGISwapChain.SetPrivateDataInterface(ptr, Name, pUnknown);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain_GetPrivateData_Hooked(IDXGISwapChain * ptr, _In_  REFGUID Name, _Inout_  UINT * pDataSize, _Out_writes_bytes_(*pDataSize)  void * pData)
{
    calltrace::AutoTrace trace("IDXGISwapChain::GetPrivateData");
    return g_D3D11OriginVTables._IDXGISwapChain.GetPrivateData(ptr, Name, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain_GetParent_Hooked(IDXGISwapChain * ptr, _In_  REFIID riid, _Out_  void ** ppParent)
{
    calltrace::AutoTrace trace("IDXGISwapChain::GetParent");
    return g_D3D11OriginVTables._IDXGISwapChain.GetParent(ptr, riid, ppParent);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain_GetDevice_Hooked(IDXGISwapChain * ptr, _In_  REFIID riid, _Out_  void ** ppDevice)
{
    calltrace::AutoTrace trace("IDXGISwapChain::GetDevice");
    return g_D3D11OriginVTables._IDXGISwapChain.GetDevice(ptr, riid, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain_Present_Hooked(IDXGISwapChain * ptr, /* [in] */ UINT SyncInterval, /* [in] */ UINT Flags)
{
    calltrace::AutoTrace trace("IDXGISwapChain::Present");
    return g_D3D11OriginVTables._IDXGISwapChain.Present(ptr, SyncInterval, Flags);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain_GetBuffer_Hooked(IDXGISwapChain * ptr, /* [in] */ UINT Buffer, _In_  REFIID riid, _Out_  void ** ppSurface)
{
    calltrace::AutoTrace trace("IDXGISwapChain::GetBuffer");
    return g_D3D11OriginVTables._IDXGISwapChain.GetBuffer(ptr, Buffer, riid, ppSurface);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain_SetFullscreenState_Hooked(IDXGISwapChain * ptr, /* [in] */ BOOL Fullscreen, _In_opt_  IDXGIOutput * pTarget)
{
    calltrace::AutoTrace trace("IDXGISwapChain::SetFullscreenState");
    return g_D3D11OriginVTables._IDXGISwapChain.SetFullscreenState(ptr, Fullscreen, pTarget);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain_GetFullscreenState_Hooked(IDXGISwapChain * ptr, _Out_opt_  BOOL * pFullscreen, _Out_opt_  IDXGIOutput ** ppTarget)
{
    calltrace::AutoTrace trace("IDXGISwapChain::GetFullscreenState");
    return g_D3D11OriginVTables._IDXGISwapChain.GetFullscreenState(ptr, pFullscreen, ppTarget);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain_GetDesc_Hooked(IDXGISwapChain * ptr, _Out_  DXGI_SWAP_CHAIN_DESC * pDesc)
{
    calltrace::AutoTrace trace("IDXGISwapChain::GetDesc");
    return g_D3D11OriginVTables._IDXGISwapChain.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain_ResizeBuffers_Hooked(IDXGISwapChain * ptr, /* [in] */ UINT BufferCount, /* [in] */ UINT Width, /* [in] */ UINT Height, /* [in] */ DXGI_FORMAT NewFormat, /* [in] */ UINT SwapChainFlags)
{
    calltrace::AutoTrace trace("IDXGISwapChain::ResizeBuffers");
    return g_D3D11OriginVTables._IDXGISwapChain.ResizeBuffers(ptr, BufferCount, Width, Height, NewFormat, SwapChainFlags);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain_ResizeTarget_Hooked(IDXGISwapChain * ptr, _In_  const DXGI_MODE_DESC * pNewTargetParameters)
{
    calltrace::AutoTrace trace("IDXGISwapChain::ResizeTarget");
    return g_D3D11OriginVTables._IDXGISwapChain.ResizeTarget(ptr, pNewTargetParameters);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain_GetContainingOutput_Hooked(IDXGISwapChain * ptr, _Out_  IDXGIOutput ** ppOutput)
{
    calltrace::AutoTrace trace("IDXGISwapChain::GetContainingOutput");
    return g_D3D11OriginVTables._IDXGISwapChain.GetContainingOutput(ptr, ppOutput);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain_GetFrameStatistics_Hooked(IDXGISwapChain * ptr, _Out_  DXGI_FRAME_STATISTICS * pStats)
{
    calltrace::AutoTrace trace("IDXGISwapChain::GetFrameStatistics");
    return g_D3D11OriginVTables._IDXGISwapChain.GetFrameStatistics(ptr, pStats);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain_GetLastPresentCount_Hooked(IDXGISwapChain * ptr, _Out_  UINT * pLastPresentCount)
{
    calltrace::AutoTrace trace("IDXGISwapChain::GetLastPresentCount");
    return g_D3D11OriginVTables._IDXGISwapChain.GetLastPresentCount(ptr, pLastPresentCount);
}

// -----------------------------------------------------------------------------
// IDXGIFactoryHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_IDXGIFactory(IDXGIFactory * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(IDXGIFactoryVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._IDXGIFactory);
    void** hooked = (void**)&(g_D3D11HookedVTables._IDXGIFactory);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "IDXGIFactory");
}
template <> inline void RealToHooked11<IDXGIFactory>(IDXGIFactory * p)
{
    return RealToHooked11_IDXGIFactory( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory_QueryInterface_Hooked(IDXGIFactory * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("IDXGIFactory::QueryInterface");
    return g_D3D11OriginVTables._IDXGIFactory.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIFactory_AddRef_Hooked(IDXGIFactory * ptr)
{
    calltrace::AutoTrace trace("IDXGIFactory::AddRef");
    return g_D3D11OriginVTables._IDXGIFactory.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIFactory_Release_Hooked(IDXGIFactory * ptr)
{
    calltrace::AutoTrace trace("IDXGIFactory::Release");
    return g_D3D11OriginVTables._IDXGIFactory.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory_SetPrivateData_Hooked(IDXGIFactory * ptr, _In_  REFGUID Name, /* [in] */ UINT DataSize, _In_reads_bytes_(DataSize)  const void * pData)
{
    calltrace::AutoTrace trace("IDXGIFactory::SetPrivateData");
    return g_D3D11OriginVTables._IDXGIFactory.SetPrivateData(ptr, Name, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory_SetPrivateDataInterface_Hooked(IDXGIFactory * ptr, _In_  REFGUID Name, _In_  const IUnknown * pUnknown)
{
    calltrace::AutoTrace trace("IDXGIFactory::SetPrivateDataInterface");
    return g_D3D11OriginVTables._IDXGIFactory.SetPrivateDataInterface(ptr, Name, pUnknown);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory_GetPrivateData_Hooked(IDXGIFactory * ptr, _In_  REFGUID Name, _Inout_  UINT * pDataSize, _Out_writes_bytes_(*pDataSize)  void * pData)
{
    calltrace::AutoTrace trace("IDXGIFactory::GetPrivateData");
    return g_D3D11OriginVTables._IDXGIFactory.GetPrivateData(ptr, Name, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory_GetParent_Hooked(IDXGIFactory * ptr, _In_  REFIID riid, _Out_  void ** ppParent)
{
    calltrace::AutoTrace trace("IDXGIFactory::GetParent");
    return g_D3D11OriginVTables._IDXGIFactory.GetParent(ptr, riid, ppParent);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory_EnumAdapters_Hooked(IDXGIFactory * ptr, /* [in] */ UINT Adapter, _Out_  IDXGIAdapter ** ppAdapter)
{
    calltrace::AutoTrace trace("IDXGIFactory::EnumAdapters");
    return g_D3D11OriginVTables._IDXGIFactory.EnumAdapters(ptr, Adapter, ppAdapter);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory_MakeWindowAssociation_Hooked(IDXGIFactory * ptr, HWND WindowHandle, UINT Flags)
{
    calltrace::AutoTrace trace("IDXGIFactory::MakeWindowAssociation");
    return g_D3D11OriginVTables._IDXGIFactory.MakeWindowAssociation(ptr, WindowHandle, Flags);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory_GetWindowAssociation_Hooked(IDXGIFactory * ptr, _Out_  HWND * pWindowHandle)
{
    calltrace::AutoTrace trace("IDXGIFactory::GetWindowAssociation");
    return g_D3D11OriginVTables._IDXGIFactory.GetWindowAssociation(ptr, pWindowHandle);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory_CreateSwapChain_Hooked(IDXGIFactory * ptr, _In_  IUnknown * pDevice, _In_  DXGI_SWAP_CHAIN_DESC * pDesc, _Out_  IDXGISwapChain ** ppSwapChain)
{
    calltrace::AutoTrace trace("IDXGIFactory::CreateSwapChain");
    return g_D3D11OriginVTables._IDXGIFactory.CreateSwapChain(ptr, pDevice, pDesc, ppSwapChain);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory_CreateSoftwareAdapter_Hooked(IDXGIFactory * ptr, /* [in] */ HMODULE Module, _Out_  IDXGIAdapter ** ppAdapter)
{
    calltrace::AutoTrace trace("IDXGIFactory::CreateSoftwareAdapter");
    return g_D3D11OriginVTables._IDXGIFactory.CreateSoftwareAdapter(ptr, Module, ppAdapter);
}

// -----------------------------------------------------------------------------
// IDXGIDeviceHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_IDXGIDevice(IDXGIDevice * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(IDXGIDeviceVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._IDXGIDevice);
    void** hooked = (void**)&(g_D3D11HookedVTables._IDXGIDevice);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "IDXGIDevice");
}
template <> inline void RealToHooked11<IDXGIDevice>(IDXGIDevice * p)
{
    return RealToHooked11_IDXGIDevice( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice_QueryInterface_Hooked(IDXGIDevice * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("IDXGIDevice::QueryInterface");
    return g_D3D11OriginVTables._IDXGIDevice.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIDevice_AddRef_Hooked(IDXGIDevice * ptr)
{
    calltrace::AutoTrace trace("IDXGIDevice::AddRef");
    return g_D3D11OriginVTables._IDXGIDevice.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIDevice_Release_Hooked(IDXGIDevice * ptr)
{
    calltrace::AutoTrace trace("IDXGIDevice::Release");
    return g_D3D11OriginVTables._IDXGIDevice.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice_SetPrivateData_Hooked(IDXGIDevice * ptr, _In_  REFGUID Name, /* [in] */ UINT DataSize, _In_reads_bytes_(DataSize)  const void * pData)
{
    calltrace::AutoTrace trace("IDXGIDevice::SetPrivateData");
    return g_D3D11OriginVTables._IDXGIDevice.SetPrivateData(ptr, Name, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice_SetPrivateDataInterface_Hooked(IDXGIDevice * ptr, _In_  REFGUID Name, _In_  const IUnknown * pUnknown)
{
    calltrace::AutoTrace trace("IDXGIDevice::SetPrivateDataInterface");
    return g_D3D11OriginVTables._IDXGIDevice.SetPrivateDataInterface(ptr, Name, pUnknown);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice_GetPrivateData_Hooked(IDXGIDevice * ptr, _In_  REFGUID Name, _Inout_  UINT * pDataSize, _Out_writes_bytes_(*pDataSize)  void * pData)
{
    calltrace::AutoTrace trace("IDXGIDevice::GetPrivateData");
    return g_D3D11OriginVTables._IDXGIDevice.GetPrivateData(ptr, Name, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice_GetParent_Hooked(IDXGIDevice * ptr, _In_  REFIID riid, _Out_  void ** ppParent)
{
    calltrace::AutoTrace trace("IDXGIDevice::GetParent");
    return g_D3D11OriginVTables._IDXGIDevice.GetParent(ptr, riid, ppParent);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice_GetAdapter_Hooked(IDXGIDevice * ptr, _Out_  IDXGIAdapter ** pAdapter)
{
    calltrace::AutoTrace trace("IDXGIDevice::GetAdapter");
    return g_D3D11OriginVTables._IDXGIDevice.GetAdapter(ptr, pAdapter);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice_CreateSurface_Hooked(IDXGIDevice * ptr, _In_  const DXGI_SURFACE_DESC * pDesc, /* [in] */ UINT NumSurfaces, /* [in] */ DXGI_USAGE Usage, _In_opt_  const DXGI_SHARED_RESOURCE * pSharedResource, _Out_  IDXGISurface ** ppSurface)
{
    calltrace::AutoTrace trace("IDXGIDevice::CreateSurface");
    return g_D3D11OriginVTables._IDXGIDevice.CreateSurface(ptr, pDesc, NumSurfaces, Usage, pSharedResource, ppSurface);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice_QueryResourceResidency_Hooked(IDXGIDevice * ptr, _In_reads_(NumResources)  IUnknown *const * ppResources, _Out_writes_(NumResources)  DXGI_RESIDENCY * pResidencyStatus, /* [in] */ UINT NumResources)
{
    calltrace::AutoTrace trace("IDXGIDevice::QueryResourceResidency");
    return g_D3D11OriginVTables._IDXGIDevice.QueryResourceResidency(ptr, ppResources, pResidencyStatus, NumResources);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice_SetGPUThreadPriority_Hooked(IDXGIDevice * ptr, /* [in] */ INT Priority)
{
    calltrace::AutoTrace trace("IDXGIDevice::SetGPUThreadPriority");
    return g_D3D11OriginVTables._IDXGIDevice.SetGPUThreadPriority(ptr, Priority);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice_GetGPUThreadPriority_Hooked(IDXGIDevice * ptr, _Out_  INT * pPriority)
{
    calltrace::AutoTrace trace("IDXGIDevice::GetGPUThreadPriority");
    return g_D3D11OriginVTables._IDXGIDevice.GetGPUThreadPriority(ptr, pPriority);
}

// -----------------------------------------------------------------------------
// IDXGIFactory1Hook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_IDXGIFactory1(IDXGIFactory1 * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(IDXGIFactory1Vtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._IDXGIFactory1);
    void** hooked = (void**)&(g_D3D11HookedVTables._IDXGIFactory1);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "IDXGIFactory1");
}
template <> inline void RealToHooked11<IDXGIFactory1>(IDXGIFactory1 * p)
{
    return RealToHooked11_IDXGIFactory1( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory1_QueryInterface_Hooked(IDXGIFactory1 * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("IDXGIFactory1::QueryInterface");
    return g_D3D11OriginVTables._IDXGIFactory1.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIFactory1_AddRef_Hooked(IDXGIFactory1 * ptr)
{
    calltrace::AutoTrace trace("IDXGIFactory1::AddRef");
    return g_D3D11OriginVTables._IDXGIFactory1.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIFactory1_Release_Hooked(IDXGIFactory1 * ptr)
{
    calltrace::AutoTrace trace("IDXGIFactory1::Release");
    return g_D3D11OriginVTables._IDXGIFactory1.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory1_SetPrivateData_Hooked(IDXGIFactory1 * ptr, _In_  REFGUID Name, /* [in] */ UINT DataSize, _In_reads_bytes_(DataSize)  const void * pData)
{
    calltrace::AutoTrace trace("IDXGIFactory1::SetPrivateData");
    return g_D3D11OriginVTables._IDXGIFactory1.SetPrivateData(ptr, Name, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory1_SetPrivateDataInterface_Hooked(IDXGIFactory1 * ptr, _In_  REFGUID Name, _In_  const IUnknown * pUnknown)
{
    calltrace::AutoTrace trace("IDXGIFactory1::SetPrivateDataInterface");
    return g_D3D11OriginVTables._IDXGIFactory1.SetPrivateDataInterface(ptr, Name, pUnknown);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory1_GetPrivateData_Hooked(IDXGIFactory1 * ptr, _In_  REFGUID Name, _Inout_  UINT * pDataSize, _Out_writes_bytes_(*pDataSize)  void * pData)
{
    calltrace::AutoTrace trace("IDXGIFactory1::GetPrivateData");
    return g_D3D11OriginVTables._IDXGIFactory1.GetPrivateData(ptr, Name, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory1_GetParent_Hooked(IDXGIFactory1 * ptr, _In_  REFIID riid, _Out_  void ** ppParent)
{
    calltrace::AutoTrace trace("IDXGIFactory1::GetParent");
    return g_D3D11OriginVTables._IDXGIFactory1.GetParent(ptr, riid, ppParent);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory1_EnumAdapters_Hooked(IDXGIFactory1 * ptr, /* [in] */ UINT Adapter, _Out_  IDXGIAdapter ** ppAdapter)
{
    calltrace::AutoTrace trace("IDXGIFactory1::EnumAdapters");
    return g_D3D11OriginVTables._IDXGIFactory1.EnumAdapters(ptr, Adapter, ppAdapter);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory1_MakeWindowAssociation_Hooked(IDXGIFactory1 * ptr, HWND WindowHandle, UINT Flags)
{
    calltrace::AutoTrace trace("IDXGIFactory1::MakeWindowAssociation");
    return g_D3D11OriginVTables._IDXGIFactory1.MakeWindowAssociation(ptr, WindowHandle, Flags);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory1_GetWindowAssociation_Hooked(IDXGIFactory1 * ptr, _Out_  HWND * pWindowHandle)
{
    calltrace::AutoTrace trace("IDXGIFactory1::GetWindowAssociation");
    return g_D3D11OriginVTables._IDXGIFactory1.GetWindowAssociation(ptr, pWindowHandle);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory1_CreateSwapChain_Hooked(IDXGIFactory1 * ptr, _In_  IUnknown * pDevice, _In_  DXGI_SWAP_CHAIN_DESC * pDesc, _Out_  IDXGISwapChain ** ppSwapChain)
{
    calltrace::AutoTrace trace("IDXGIFactory1::CreateSwapChain");
    return g_D3D11OriginVTables._IDXGIFactory1.CreateSwapChain(ptr, pDevice, pDesc, ppSwapChain);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory1_CreateSoftwareAdapter_Hooked(IDXGIFactory1 * ptr, /* [in] */ HMODULE Module, _Out_  IDXGIAdapter ** ppAdapter)
{
    calltrace::AutoTrace trace("IDXGIFactory1::CreateSoftwareAdapter");
    return g_D3D11OriginVTables._IDXGIFactory1.CreateSoftwareAdapter(ptr, Module, ppAdapter);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory1_EnumAdapters1_Hooked(IDXGIFactory1 * ptr, /* [in] */ UINT Adapter, _Out_  IDXGIAdapter1 ** ppAdapter)
{
    calltrace::AutoTrace trace("IDXGIFactory1::EnumAdapters1");
    return g_D3D11OriginVTables._IDXGIFactory1.EnumAdapters1(ptr, Adapter, ppAdapter);
}

// -----------------------------------------------------------------------------
static inline BOOL STDMETHODCALLTYPE IDXGIFactory1_IsCurrent_Hooked(IDXGIFactory1 * ptr)
{
    calltrace::AutoTrace trace("IDXGIFactory1::IsCurrent");
    return g_D3D11OriginVTables._IDXGIFactory1.IsCurrent(ptr);
}

// -----------------------------------------------------------------------------
// IDXGIAdapter1Hook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_IDXGIAdapter1(IDXGIAdapter1 * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(IDXGIAdapter1Vtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._IDXGIAdapter1);
    void** hooked = (void**)&(g_D3D11HookedVTables._IDXGIAdapter1);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "IDXGIAdapter1");
}
template <> inline void RealToHooked11<IDXGIAdapter1>(IDXGIAdapter1 * p)
{
    return RealToHooked11_IDXGIAdapter1( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter1_QueryInterface_Hooked(IDXGIAdapter1 * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("IDXGIAdapter1::QueryInterface");
    return g_D3D11OriginVTables._IDXGIAdapter1.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIAdapter1_AddRef_Hooked(IDXGIAdapter1 * ptr)
{
    calltrace::AutoTrace trace("IDXGIAdapter1::AddRef");
    return g_D3D11OriginVTables._IDXGIAdapter1.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIAdapter1_Release_Hooked(IDXGIAdapter1 * ptr)
{
    calltrace::AutoTrace trace("IDXGIAdapter1::Release");
    return g_D3D11OriginVTables._IDXGIAdapter1.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter1_SetPrivateData_Hooked(IDXGIAdapter1 * ptr, _In_  REFGUID Name, /* [in] */ UINT DataSize, _In_reads_bytes_(DataSize)  const void * pData)
{
    calltrace::AutoTrace trace("IDXGIAdapter1::SetPrivateData");
    return g_D3D11OriginVTables._IDXGIAdapter1.SetPrivateData(ptr, Name, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter1_SetPrivateDataInterface_Hooked(IDXGIAdapter1 * ptr, _In_  REFGUID Name, _In_  const IUnknown * pUnknown)
{
    calltrace::AutoTrace trace("IDXGIAdapter1::SetPrivateDataInterface");
    return g_D3D11OriginVTables._IDXGIAdapter1.SetPrivateDataInterface(ptr, Name, pUnknown);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter1_GetPrivateData_Hooked(IDXGIAdapter1 * ptr, _In_  REFGUID Name, _Inout_  UINT * pDataSize, _Out_writes_bytes_(*pDataSize)  void * pData)
{
    calltrace::AutoTrace trace("IDXGIAdapter1::GetPrivateData");
    return g_D3D11OriginVTables._IDXGIAdapter1.GetPrivateData(ptr, Name, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter1_GetParent_Hooked(IDXGIAdapter1 * ptr, _In_  REFIID riid, _Out_  void ** ppParent)
{
    calltrace::AutoTrace trace("IDXGIAdapter1::GetParent");
    return g_D3D11OriginVTables._IDXGIAdapter1.GetParent(ptr, riid, ppParent);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter1_EnumOutputs_Hooked(IDXGIAdapter1 * ptr, /* [in] */ UINT Output, _Out_  IDXGIOutput ** ppOutput)
{
    calltrace::AutoTrace trace("IDXGIAdapter1::EnumOutputs");
    return g_D3D11OriginVTables._IDXGIAdapter1.EnumOutputs(ptr, Output, ppOutput);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter1_GetDesc_Hooked(IDXGIAdapter1 * ptr, _Out_  DXGI_ADAPTER_DESC * pDesc)
{
    calltrace::AutoTrace trace("IDXGIAdapter1::GetDesc");
    return g_D3D11OriginVTables._IDXGIAdapter1.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter1_CheckInterfaceSupport_Hooked(IDXGIAdapter1 * ptr, _In_  REFGUID InterfaceName, _Out_  LARGE_INTEGER * pUMDVersion)
{
    calltrace::AutoTrace trace("IDXGIAdapter1::CheckInterfaceSupport");
    return g_D3D11OriginVTables._IDXGIAdapter1.CheckInterfaceSupport(ptr, InterfaceName, pUMDVersion);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter1_GetDesc1_Hooked(IDXGIAdapter1 * ptr, _Out_  DXGI_ADAPTER_DESC1 * pDesc)
{
    calltrace::AutoTrace trace("IDXGIAdapter1::GetDesc1");
    return g_D3D11OriginVTables._IDXGIAdapter1.GetDesc1(ptr, pDesc);
}

// -----------------------------------------------------------------------------
// IDXGIDevice1Hook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_IDXGIDevice1(IDXGIDevice1 * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(IDXGIDevice1Vtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._IDXGIDevice1);
    void** hooked = (void**)&(g_D3D11HookedVTables._IDXGIDevice1);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "IDXGIDevice1");
}
template <> inline void RealToHooked11<IDXGIDevice1>(IDXGIDevice1 * p)
{
    return RealToHooked11_IDXGIDevice1( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice1_QueryInterface_Hooked(IDXGIDevice1 * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("IDXGIDevice1::QueryInterface");
    return g_D3D11OriginVTables._IDXGIDevice1.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIDevice1_AddRef_Hooked(IDXGIDevice1 * ptr)
{
    calltrace::AutoTrace trace("IDXGIDevice1::AddRef");
    return g_D3D11OriginVTables._IDXGIDevice1.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIDevice1_Release_Hooked(IDXGIDevice1 * ptr)
{
    calltrace::AutoTrace trace("IDXGIDevice1::Release");
    return g_D3D11OriginVTables._IDXGIDevice1.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice1_SetPrivateData_Hooked(IDXGIDevice1 * ptr, _In_  REFGUID Name, /* [in] */ UINT DataSize, _In_reads_bytes_(DataSize)  const void * pData)
{
    calltrace::AutoTrace trace("IDXGIDevice1::SetPrivateData");
    return g_D3D11OriginVTables._IDXGIDevice1.SetPrivateData(ptr, Name, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice1_SetPrivateDataInterface_Hooked(IDXGIDevice1 * ptr, _In_  REFGUID Name, _In_  const IUnknown * pUnknown)
{
    calltrace::AutoTrace trace("IDXGIDevice1::SetPrivateDataInterface");
    return g_D3D11OriginVTables._IDXGIDevice1.SetPrivateDataInterface(ptr, Name, pUnknown);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice1_GetPrivateData_Hooked(IDXGIDevice1 * ptr, _In_  REFGUID Name, _Inout_  UINT * pDataSize, _Out_writes_bytes_(*pDataSize)  void * pData)
{
    calltrace::AutoTrace trace("IDXGIDevice1::GetPrivateData");
    return g_D3D11OriginVTables._IDXGIDevice1.GetPrivateData(ptr, Name, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice1_GetParent_Hooked(IDXGIDevice1 * ptr, _In_  REFIID riid, _Out_  void ** ppParent)
{
    calltrace::AutoTrace trace("IDXGIDevice1::GetParent");
    return g_D3D11OriginVTables._IDXGIDevice1.GetParent(ptr, riid, ppParent);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice1_GetAdapter_Hooked(IDXGIDevice1 * ptr, _Out_  IDXGIAdapter ** pAdapter)
{
    calltrace::AutoTrace trace("IDXGIDevice1::GetAdapter");
    return g_D3D11OriginVTables._IDXGIDevice1.GetAdapter(ptr, pAdapter);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice1_CreateSurface_Hooked(IDXGIDevice1 * ptr, _In_  const DXGI_SURFACE_DESC * pDesc, /* [in] */ UINT NumSurfaces, /* [in] */ DXGI_USAGE Usage, _In_opt_  const DXGI_SHARED_RESOURCE * pSharedResource, _Out_  IDXGISurface ** ppSurface)
{
    calltrace::AutoTrace trace("IDXGIDevice1::CreateSurface");
    return g_D3D11OriginVTables._IDXGIDevice1.CreateSurface(ptr, pDesc, NumSurfaces, Usage, pSharedResource, ppSurface);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice1_QueryResourceResidency_Hooked(IDXGIDevice1 * ptr, _In_reads_(NumResources)  IUnknown *const * ppResources, _Out_writes_(NumResources)  DXGI_RESIDENCY * pResidencyStatus, /* [in] */ UINT NumResources)
{
    calltrace::AutoTrace trace("IDXGIDevice1::QueryResourceResidency");
    return g_D3D11OriginVTables._IDXGIDevice1.QueryResourceResidency(ptr, ppResources, pResidencyStatus, NumResources);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice1_SetGPUThreadPriority_Hooked(IDXGIDevice1 * ptr, /* [in] */ INT Priority)
{
    calltrace::AutoTrace trace("IDXGIDevice1::SetGPUThreadPriority");
    return g_D3D11OriginVTables._IDXGIDevice1.SetGPUThreadPriority(ptr, Priority);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice1_GetGPUThreadPriority_Hooked(IDXGIDevice1 * ptr, _Out_  INT * pPriority)
{
    calltrace::AutoTrace trace("IDXGIDevice1::GetGPUThreadPriority");
    return g_D3D11OriginVTables._IDXGIDevice1.GetGPUThreadPriority(ptr, pPriority);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice1_SetMaximumFrameLatency_Hooked(IDXGIDevice1 * ptr, /* [in] */ UINT MaxLatency)
{
    calltrace::AutoTrace trace("IDXGIDevice1::SetMaximumFrameLatency");
    return g_D3D11OriginVTables._IDXGIDevice1.SetMaximumFrameLatency(ptr, MaxLatency);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice1_GetMaximumFrameLatency_Hooked(IDXGIDevice1 * ptr, _Out_  UINT * pMaxLatency)
{
    calltrace::AutoTrace trace("IDXGIDevice1::GetMaximumFrameLatency");
    return g_D3D11OriginVTables._IDXGIDevice1.GetMaximumFrameLatency(ptr, pMaxLatency);
}

// -----------------------------------------------------------------------------
// IDXGIDisplayControlHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_IDXGIDisplayControl(IDXGIDisplayControl * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(IDXGIDisplayControlVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._IDXGIDisplayControl);
    void** hooked = (void**)&(g_D3D11HookedVTables._IDXGIDisplayControl);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "IDXGIDisplayControl");
}
template <> inline void RealToHooked11<IDXGIDisplayControl>(IDXGIDisplayControl * p)
{
    return RealToHooked11_IDXGIDisplayControl( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDisplayControl_QueryInterface_Hooked(IDXGIDisplayControl * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("IDXGIDisplayControl::QueryInterface");
    return g_D3D11OriginVTables._IDXGIDisplayControl.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIDisplayControl_AddRef_Hooked(IDXGIDisplayControl * ptr)
{
    calltrace::AutoTrace trace("IDXGIDisplayControl::AddRef");
    return g_D3D11OriginVTables._IDXGIDisplayControl.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIDisplayControl_Release_Hooked(IDXGIDisplayControl * ptr)
{
    calltrace::AutoTrace trace("IDXGIDisplayControl::Release");
    return g_D3D11OriginVTables._IDXGIDisplayControl.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline BOOL STDMETHODCALLTYPE IDXGIDisplayControl_IsStereoEnabled_Hooked(IDXGIDisplayControl * ptr)
{
    calltrace::AutoTrace trace("IDXGIDisplayControl::IsStereoEnabled");
    return g_D3D11OriginVTables._IDXGIDisplayControl.IsStereoEnabled(ptr);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE IDXGIDisplayControl_SetStereoEnabled_Hooked(IDXGIDisplayControl * ptr, BOOL enabled)
{
    calltrace::AutoTrace trace("IDXGIDisplayControl::SetStereoEnabled");
    return g_D3D11OriginVTables._IDXGIDisplayControl.SetStereoEnabled(ptr, enabled);
}

// -----------------------------------------------------------------------------
// IDXGIOutputDuplicationHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_IDXGIOutputDuplication(IDXGIOutputDuplication * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(IDXGIOutputDuplicationVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._IDXGIOutputDuplication);
    void** hooked = (void**)&(g_D3D11HookedVTables._IDXGIOutputDuplication);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "IDXGIOutputDuplication");
}
template <> inline void RealToHooked11<IDXGIOutputDuplication>(IDXGIOutputDuplication * p)
{
    return RealToHooked11_IDXGIOutputDuplication( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutputDuplication_QueryInterface_Hooked(IDXGIOutputDuplication * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("IDXGIOutputDuplication::QueryInterface");
    return g_D3D11OriginVTables._IDXGIOutputDuplication.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIOutputDuplication_AddRef_Hooked(IDXGIOutputDuplication * ptr)
{
    calltrace::AutoTrace trace("IDXGIOutputDuplication::AddRef");
    return g_D3D11OriginVTables._IDXGIOutputDuplication.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIOutputDuplication_Release_Hooked(IDXGIOutputDuplication * ptr)
{
    calltrace::AutoTrace trace("IDXGIOutputDuplication::Release");
    return g_D3D11OriginVTables._IDXGIOutputDuplication.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutputDuplication_SetPrivateData_Hooked(IDXGIOutputDuplication * ptr, _In_  REFGUID Name, /* [in] */ UINT DataSize, _In_reads_bytes_(DataSize)  const void * pData)
{
    calltrace::AutoTrace trace("IDXGIOutputDuplication::SetPrivateData");
    return g_D3D11OriginVTables._IDXGIOutputDuplication.SetPrivateData(ptr, Name, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutputDuplication_SetPrivateDataInterface_Hooked(IDXGIOutputDuplication * ptr, _In_  REFGUID Name, _In_  const IUnknown * pUnknown)
{
    calltrace::AutoTrace trace("IDXGIOutputDuplication::SetPrivateDataInterface");
    return g_D3D11OriginVTables._IDXGIOutputDuplication.SetPrivateDataInterface(ptr, Name, pUnknown);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutputDuplication_GetPrivateData_Hooked(IDXGIOutputDuplication * ptr, _In_  REFGUID Name, _Inout_  UINT * pDataSize, _Out_writes_bytes_(*pDataSize)  void * pData)
{
    calltrace::AutoTrace trace("IDXGIOutputDuplication::GetPrivateData");
    return g_D3D11OriginVTables._IDXGIOutputDuplication.GetPrivateData(ptr, Name, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutputDuplication_GetParent_Hooked(IDXGIOutputDuplication * ptr, _In_  REFIID riid, _Out_  void ** ppParent)
{
    calltrace::AutoTrace trace("IDXGIOutputDuplication::GetParent");
    return g_D3D11OriginVTables._IDXGIOutputDuplication.GetParent(ptr, riid, ppParent);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE IDXGIOutputDuplication_GetDesc_Hooked(IDXGIOutputDuplication * ptr, _Out_  DXGI_OUTDUPL_DESC * pDesc)
{
    calltrace::AutoTrace trace("IDXGIOutputDuplication::GetDesc");
    return g_D3D11OriginVTables._IDXGIOutputDuplication.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutputDuplication_AcquireNextFrame_Hooked(IDXGIOutputDuplication * ptr, _In_  UINT TimeoutInMilliseconds, _Out_  DXGI_OUTDUPL_FRAME_INFO * pFrameInfo, _Out_  IDXGIResource ** ppDesktopResource)
{
    calltrace::AutoTrace trace("IDXGIOutputDuplication::AcquireNextFrame");
    return g_D3D11OriginVTables._IDXGIOutputDuplication.AcquireNextFrame(ptr, TimeoutInMilliseconds, pFrameInfo, ppDesktopResource);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutputDuplication_GetFrameDirtyRects_Hooked(IDXGIOutputDuplication * ptr, _In_  UINT DirtyRectsBufferSize, _Out_writes_bytes_to_(DirtyRectsBufferSize, *pDirtyRectsBufferSizeRequired)  RECT * pDirtyRectsBuffer, _Out_  UINT * pDirtyRectsBufferSizeRequired)
{
    calltrace::AutoTrace trace("IDXGIOutputDuplication::GetFrameDirtyRects");
    return g_D3D11OriginVTables._IDXGIOutputDuplication.GetFrameDirtyRects(ptr, DirtyRectsBufferSize, pDirtyRectsBuffer, pDirtyRectsBufferSizeRequired);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutputDuplication_GetFrameMoveRects_Hooked(IDXGIOutputDuplication * ptr, _In_  UINT MoveRectsBufferSize, _Out_writes_bytes_to_(MoveRectsBufferSize, *pMoveRectsBufferSizeRequired)  DXGI_OUTDUPL_MOVE_RECT * pMoveRectBuffer, _Out_  UINT * pMoveRectsBufferSizeRequired)
{
    calltrace::AutoTrace trace("IDXGIOutputDuplication::GetFrameMoveRects");
    return g_D3D11OriginVTables._IDXGIOutputDuplication.GetFrameMoveRects(ptr, MoveRectsBufferSize, pMoveRectBuffer, pMoveRectsBufferSizeRequired);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutputDuplication_GetFramePointerShape_Hooked(IDXGIOutputDuplication * ptr, _In_  UINT PointerShapeBufferSize, _Out_writes_bytes_to_(PointerShapeBufferSize, *pPointerShapeBufferSizeRequired)  void * pPointerShapeBuffer, _Out_  UINT * pPointerShapeBufferSizeRequired, _Out_  DXGI_OUTDUPL_POINTER_SHAPE_INFO * pPointerShapeInfo)
{
    calltrace::AutoTrace trace("IDXGIOutputDuplication::GetFramePointerShape");
    return g_D3D11OriginVTables._IDXGIOutputDuplication.GetFramePointerShape(ptr, PointerShapeBufferSize, pPointerShapeBuffer, pPointerShapeBufferSizeRequired, pPointerShapeInfo);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutputDuplication_MapDesktopSurface_Hooked(IDXGIOutputDuplication * ptr, _Out_  DXGI_MAPPED_RECT * pLockedRect)
{
    calltrace::AutoTrace trace("IDXGIOutputDuplication::MapDesktopSurface");
    return g_D3D11OriginVTables._IDXGIOutputDuplication.MapDesktopSurface(ptr, pLockedRect);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutputDuplication_UnMapDesktopSurface_Hooked(IDXGIOutputDuplication * ptr)
{
    calltrace::AutoTrace trace("IDXGIOutputDuplication::UnMapDesktopSurface");
    return g_D3D11OriginVTables._IDXGIOutputDuplication.UnMapDesktopSurface(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutputDuplication_ReleaseFrame_Hooked(IDXGIOutputDuplication * ptr)
{
    calltrace::AutoTrace trace("IDXGIOutputDuplication::ReleaseFrame");
    return g_D3D11OriginVTables._IDXGIOutputDuplication.ReleaseFrame(ptr);
}

// -----------------------------------------------------------------------------
// IDXGISurface2Hook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_IDXGISurface2(IDXGISurface2 * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(IDXGISurface2Vtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._IDXGISurface2);
    void** hooked = (void**)&(g_D3D11HookedVTables._IDXGISurface2);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "IDXGISurface2");
}
template <> inline void RealToHooked11<IDXGISurface2>(IDXGISurface2 * p)
{
    return RealToHooked11_IDXGISurface2( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface2_QueryInterface_Hooked(IDXGISurface2 * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("IDXGISurface2::QueryInterface");
    return g_D3D11OriginVTables._IDXGISurface2.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGISurface2_AddRef_Hooked(IDXGISurface2 * ptr)
{
    calltrace::AutoTrace trace("IDXGISurface2::AddRef");
    return g_D3D11OriginVTables._IDXGISurface2.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGISurface2_Release_Hooked(IDXGISurface2 * ptr)
{
    calltrace::AutoTrace trace("IDXGISurface2::Release");
    return g_D3D11OriginVTables._IDXGISurface2.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface2_SetPrivateData_Hooked(IDXGISurface2 * ptr, _In_  REFGUID Name, /* [in] */ UINT DataSize, _In_reads_bytes_(DataSize)  const void * pData)
{
    calltrace::AutoTrace trace("IDXGISurface2::SetPrivateData");
    return g_D3D11OriginVTables._IDXGISurface2.SetPrivateData(ptr, Name, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface2_SetPrivateDataInterface_Hooked(IDXGISurface2 * ptr, _In_  REFGUID Name, _In_  const IUnknown * pUnknown)
{
    calltrace::AutoTrace trace("IDXGISurface2::SetPrivateDataInterface");
    return g_D3D11OriginVTables._IDXGISurface2.SetPrivateDataInterface(ptr, Name, pUnknown);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface2_GetPrivateData_Hooked(IDXGISurface2 * ptr, _In_  REFGUID Name, _Inout_  UINT * pDataSize, _Out_writes_bytes_(*pDataSize)  void * pData)
{
    calltrace::AutoTrace trace("IDXGISurface2::GetPrivateData");
    return g_D3D11OriginVTables._IDXGISurface2.GetPrivateData(ptr, Name, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface2_GetParent_Hooked(IDXGISurface2 * ptr, _In_  REFIID riid, _Out_  void ** ppParent)
{
    calltrace::AutoTrace trace("IDXGISurface2::GetParent");
    return g_D3D11OriginVTables._IDXGISurface2.GetParent(ptr, riid, ppParent);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface2_GetDevice_Hooked(IDXGISurface2 * ptr, _In_  REFIID riid, _Out_  void ** ppDevice)
{
    calltrace::AutoTrace trace("IDXGISurface2::GetDevice");
    return g_D3D11OriginVTables._IDXGISurface2.GetDevice(ptr, riid, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface2_GetDesc_Hooked(IDXGISurface2 * ptr, _Out_  DXGI_SURFACE_DESC * pDesc)
{
    calltrace::AutoTrace trace("IDXGISurface2::GetDesc");
    return g_D3D11OriginVTables._IDXGISurface2.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface2_Map_Hooked(IDXGISurface2 * ptr, _Out_  DXGI_MAPPED_RECT * pLockedRect, /* [in] */ UINT MapFlags)
{
    calltrace::AutoTrace trace("IDXGISurface2::Map");
    return g_D3D11OriginVTables._IDXGISurface2.Map(ptr, pLockedRect, MapFlags);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface2_Unmap_Hooked(IDXGISurface2 * ptr)
{
    calltrace::AutoTrace trace("IDXGISurface2::Unmap");
    return g_D3D11OriginVTables._IDXGISurface2.Unmap(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface2_GetDC_Hooked(IDXGISurface2 * ptr, /* [in] */ BOOL Discard, _Out_  HDC * phdc)
{
    calltrace::AutoTrace trace("IDXGISurface2::GetDC");
    return g_D3D11OriginVTables._IDXGISurface2.GetDC(ptr, Discard, phdc);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface2_ReleaseDC_Hooked(IDXGISurface2 * ptr, _In_opt_  RECT * pDirtyRect)
{
    calltrace::AutoTrace trace("IDXGISurface2::ReleaseDC");
    return g_D3D11OriginVTables._IDXGISurface2.ReleaseDC(ptr, pDirtyRect);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISurface2_GetResource_Hooked(IDXGISurface2 * ptr, _In_  REFIID riid, _Out_  void ** ppParentResource, _Out_  UINT * pSubresourceIndex)
{
    calltrace::AutoTrace trace("IDXGISurface2::GetResource");
    return g_D3D11OriginVTables._IDXGISurface2.GetResource(ptr, riid, ppParentResource, pSubresourceIndex);
}

// -----------------------------------------------------------------------------
// IDXGIResource1Hook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_IDXGIResource1(IDXGIResource1 * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(IDXGIResource1Vtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._IDXGIResource1);
    void** hooked = (void**)&(g_D3D11HookedVTables._IDXGIResource1);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "IDXGIResource1");
}
template <> inline void RealToHooked11<IDXGIResource1>(IDXGIResource1 * p)
{
    return RealToHooked11_IDXGIResource1( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIResource1_QueryInterface_Hooked(IDXGIResource1 * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("IDXGIResource1::QueryInterface");
    return g_D3D11OriginVTables._IDXGIResource1.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIResource1_AddRef_Hooked(IDXGIResource1 * ptr)
{
    calltrace::AutoTrace trace("IDXGIResource1::AddRef");
    return g_D3D11OriginVTables._IDXGIResource1.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIResource1_Release_Hooked(IDXGIResource1 * ptr)
{
    calltrace::AutoTrace trace("IDXGIResource1::Release");
    return g_D3D11OriginVTables._IDXGIResource1.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIResource1_SetPrivateData_Hooked(IDXGIResource1 * ptr, _In_  REFGUID Name, /* [in] */ UINT DataSize, _In_reads_bytes_(DataSize)  const void * pData)
{
    calltrace::AutoTrace trace("IDXGIResource1::SetPrivateData");
    return g_D3D11OriginVTables._IDXGIResource1.SetPrivateData(ptr, Name, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIResource1_SetPrivateDataInterface_Hooked(IDXGIResource1 * ptr, _In_  REFGUID Name, _In_  const IUnknown * pUnknown)
{
    calltrace::AutoTrace trace("IDXGIResource1::SetPrivateDataInterface");
    return g_D3D11OriginVTables._IDXGIResource1.SetPrivateDataInterface(ptr, Name, pUnknown);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIResource1_GetPrivateData_Hooked(IDXGIResource1 * ptr, _In_  REFGUID Name, _Inout_  UINT * pDataSize, _Out_writes_bytes_(*pDataSize)  void * pData)
{
    calltrace::AutoTrace trace("IDXGIResource1::GetPrivateData");
    return g_D3D11OriginVTables._IDXGIResource1.GetPrivateData(ptr, Name, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIResource1_GetParent_Hooked(IDXGIResource1 * ptr, _In_  REFIID riid, _Out_  void ** ppParent)
{
    calltrace::AutoTrace trace("IDXGIResource1::GetParent");
    return g_D3D11OriginVTables._IDXGIResource1.GetParent(ptr, riid, ppParent);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIResource1_GetDevice_Hooked(IDXGIResource1 * ptr, _In_  REFIID riid, _Out_  void ** ppDevice)
{
    calltrace::AutoTrace trace("IDXGIResource1::GetDevice");
    return g_D3D11OriginVTables._IDXGIResource1.GetDevice(ptr, riid, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIResource1_GetSharedHandle_Hooked(IDXGIResource1 * ptr, _Out_  HANDLE * pSharedHandle)
{
    calltrace::AutoTrace trace("IDXGIResource1::GetSharedHandle");
    return g_D3D11OriginVTables._IDXGIResource1.GetSharedHandle(ptr, pSharedHandle);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIResource1_GetUsage_Hooked(IDXGIResource1 * ptr, _Out_  DXGI_USAGE * pUsage)
{
    calltrace::AutoTrace trace("IDXGIResource1::GetUsage");
    return g_D3D11OriginVTables._IDXGIResource1.GetUsage(ptr, pUsage);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIResource1_SetEvictionPriority_Hooked(IDXGIResource1 * ptr, /* [in] */ UINT EvictionPriority)
{
    calltrace::AutoTrace trace("IDXGIResource1::SetEvictionPriority");
    return g_D3D11OriginVTables._IDXGIResource1.SetEvictionPriority(ptr, EvictionPriority);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIResource1_GetEvictionPriority_Hooked(IDXGIResource1 * ptr, _Out_  UINT * pEvictionPriority)
{
    calltrace::AutoTrace trace("IDXGIResource1::GetEvictionPriority");
    return g_D3D11OriginVTables._IDXGIResource1.GetEvictionPriority(ptr, pEvictionPriority);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIResource1_CreateSubresourceSurface_Hooked(IDXGIResource1 * ptr, UINT index, _Out_  IDXGISurface2 ** ppSurface)
{
    calltrace::AutoTrace trace("IDXGIResource1::CreateSubresourceSurface");
    return g_D3D11OriginVTables._IDXGIResource1.CreateSubresourceSurface(ptr, index, ppSurface);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIResource1_CreateSharedHandle_Hooked(IDXGIResource1 * ptr, _In_opt_  const SECURITY_ATTRIBUTES * pAttributes, _In_  DWORD dwAccess, _In_opt_  LPCWSTR lpName, _Out_  HANDLE * pHandle)
{
    calltrace::AutoTrace trace("IDXGIResource1::CreateSharedHandle");
    return g_D3D11OriginVTables._IDXGIResource1.CreateSharedHandle(ptr, pAttributes, dwAccess, lpName, pHandle);
}

// -----------------------------------------------------------------------------
// IDXGIDevice2Hook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_IDXGIDevice2(IDXGIDevice2 * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(IDXGIDevice2Vtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._IDXGIDevice2);
    void** hooked = (void**)&(g_D3D11HookedVTables._IDXGIDevice2);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "IDXGIDevice2");
}
template <> inline void RealToHooked11<IDXGIDevice2>(IDXGIDevice2 * p)
{
    return RealToHooked11_IDXGIDevice2( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice2_QueryInterface_Hooked(IDXGIDevice2 * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("IDXGIDevice2::QueryInterface");
    return g_D3D11OriginVTables._IDXGIDevice2.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIDevice2_AddRef_Hooked(IDXGIDevice2 * ptr)
{
    calltrace::AutoTrace trace("IDXGIDevice2::AddRef");
    return g_D3D11OriginVTables._IDXGIDevice2.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIDevice2_Release_Hooked(IDXGIDevice2 * ptr)
{
    calltrace::AutoTrace trace("IDXGIDevice2::Release");
    return g_D3D11OriginVTables._IDXGIDevice2.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice2_SetPrivateData_Hooked(IDXGIDevice2 * ptr, _In_  REFGUID Name, /* [in] */ UINT DataSize, _In_reads_bytes_(DataSize)  const void * pData)
{
    calltrace::AutoTrace trace("IDXGIDevice2::SetPrivateData");
    return g_D3D11OriginVTables._IDXGIDevice2.SetPrivateData(ptr, Name, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice2_SetPrivateDataInterface_Hooked(IDXGIDevice2 * ptr, _In_  REFGUID Name, _In_  const IUnknown * pUnknown)
{
    calltrace::AutoTrace trace("IDXGIDevice2::SetPrivateDataInterface");
    return g_D3D11OriginVTables._IDXGIDevice2.SetPrivateDataInterface(ptr, Name, pUnknown);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice2_GetPrivateData_Hooked(IDXGIDevice2 * ptr, _In_  REFGUID Name, _Inout_  UINT * pDataSize, _Out_writes_bytes_(*pDataSize)  void * pData)
{
    calltrace::AutoTrace trace("IDXGIDevice2::GetPrivateData");
    return g_D3D11OriginVTables._IDXGIDevice2.GetPrivateData(ptr, Name, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice2_GetParent_Hooked(IDXGIDevice2 * ptr, _In_  REFIID riid, _Out_  void ** ppParent)
{
    calltrace::AutoTrace trace("IDXGIDevice2::GetParent");
    return g_D3D11OriginVTables._IDXGIDevice2.GetParent(ptr, riid, ppParent);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice2_GetAdapter_Hooked(IDXGIDevice2 * ptr, _Out_  IDXGIAdapter ** pAdapter)
{
    calltrace::AutoTrace trace("IDXGIDevice2::GetAdapter");
    return g_D3D11OriginVTables._IDXGIDevice2.GetAdapter(ptr, pAdapter);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice2_CreateSurface_Hooked(IDXGIDevice2 * ptr, _In_  const DXGI_SURFACE_DESC * pDesc, /* [in] */ UINT NumSurfaces, /* [in] */ DXGI_USAGE Usage, _In_opt_  const DXGI_SHARED_RESOURCE * pSharedResource, _Out_  IDXGISurface ** ppSurface)
{
    calltrace::AutoTrace trace("IDXGIDevice2::CreateSurface");
    return g_D3D11OriginVTables._IDXGIDevice2.CreateSurface(ptr, pDesc, NumSurfaces, Usage, pSharedResource, ppSurface);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice2_QueryResourceResidency_Hooked(IDXGIDevice2 * ptr, _In_reads_(NumResources)  IUnknown *const * ppResources, _Out_writes_(NumResources)  DXGI_RESIDENCY * pResidencyStatus, /* [in] */ UINT NumResources)
{
    calltrace::AutoTrace trace("IDXGIDevice2::QueryResourceResidency");
    return g_D3D11OriginVTables._IDXGIDevice2.QueryResourceResidency(ptr, ppResources, pResidencyStatus, NumResources);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice2_SetGPUThreadPriority_Hooked(IDXGIDevice2 * ptr, /* [in] */ INT Priority)
{
    calltrace::AutoTrace trace("IDXGIDevice2::SetGPUThreadPriority");
    return g_D3D11OriginVTables._IDXGIDevice2.SetGPUThreadPriority(ptr, Priority);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice2_GetGPUThreadPriority_Hooked(IDXGIDevice2 * ptr, _Out_  INT * pPriority)
{
    calltrace::AutoTrace trace("IDXGIDevice2::GetGPUThreadPriority");
    return g_D3D11OriginVTables._IDXGIDevice2.GetGPUThreadPriority(ptr, pPriority);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice2_SetMaximumFrameLatency_Hooked(IDXGIDevice2 * ptr, /* [in] */ UINT MaxLatency)
{
    calltrace::AutoTrace trace("IDXGIDevice2::SetMaximumFrameLatency");
    return g_D3D11OriginVTables._IDXGIDevice2.SetMaximumFrameLatency(ptr, MaxLatency);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice2_GetMaximumFrameLatency_Hooked(IDXGIDevice2 * ptr, _Out_  UINT * pMaxLatency)
{
    calltrace::AutoTrace trace("IDXGIDevice2::GetMaximumFrameLatency");
    return g_D3D11OriginVTables._IDXGIDevice2.GetMaximumFrameLatency(ptr, pMaxLatency);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice2_OfferResources_Hooked(IDXGIDevice2 * ptr, _In_  UINT NumResources, _In_reads_(NumResources)  IDXGIResource *const * ppResources, _In_  DXGI_OFFER_RESOURCE_PRIORITY Priority)
{
    calltrace::AutoTrace trace("IDXGIDevice2::OfferResources");
    return g_D3D11OriginVTables._IDXGIDevice2.OfferResources(ptr, NumResources, ppResources, Priority);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice2_ReclaimResources_Hooked(IDXGIDevice2 * ptr, _In_  UINT NumResources, _In_reads_(NumResources)  IDXGIResource *const * ppResources, _Out_writes_all_opt_(NumResources)  BOOL * pDiscarded)
{
    calltrace::AutoTrace trace("IDXGIDevice2::ReclaimResources");
    return g_D3D11OriginVTables._IDXGIDevice2.ReclaimResources(ptr, NumResources, ppResources, pDiscarded);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDevice2_EnqueueSetEvent_Hooked(IDXGIDevice2 * ptr, _In_  HANDLE hEvent)
{
    calltrace::AutoTrace trace("IDXGIDevice2::EnqueueSetEvent");
    return g_D3D11OriginVTables._IDXGIDevice2.EnqueueSetEvent(ptr, hEvent);
}

// -----------------------------------------------------------------------------
// IDXGISwapChain1Hook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_IDXGISwapChain1(IDXGISwapChain1 * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(IDXGISwapChain1Vtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._IDXGISwapChain1);
    void** hooked = (void**)&(g_D3D11HookedVTables._IDXGISwapChain1);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "IDXGISwapChain1");
}
template <> inline void RealToHooked11<IDXGISwapChain1>(IDXGISwapChain1 * p)
{
    return RealToHooked11_IDXGISwapChain1( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain1_QueryInterface_Hooked(IDXGISwapChain1 * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::QueryInterface");
    return g_D3D11OriginVTables._IDXGISwapChain1.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGISwapChain1_AddRef_Hooked(IDXGISwapChain1 * ptr)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::AddRef");
    return g_D3D11OriginVTables._IDXGISwapChain1.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGISwapChain1_Release_Hooked(IDXGISwapChain1 * ptr)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::Release");
    return g_D3D11OriginVTables._IDXGISwapChain1.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain1_SetPrivateData_Hooked(IDXGISwapChain1 * ptr, _In_  REFGUID Name, /* [in] */ UINT DataSize, _In_reads_bytes_(DataSize)  const void * pData)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::SetPrivateData");
    return g_D3D11OriginVTables._IDXGISwapChain1.SetPrivateData(ptr, Name, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain1_SetPrivateDataInterface_Hooked(IDXGISwapChain1 * ptr, _In_  REFGUID Name, _In_  const IUnknown * pUnknown)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::SetPrivateDataInterface");
    return g_D3D11OriginVTables._IDXGISwapChain1.SetPrivateDataInterface(ptr, Name, pUnknown);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain1_GetPrivateData_Hooked(IDXGISwapChain1 * ptr, _In_  REFGUID Name, _Inout_  UINT * pDataSize, _Out_writes_bytes_(*pDataSize)  void * pData)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::GetPrivateData");
    return g_D3D11OriginVTables._IDXGISwapChain1.GetPrivateData(ptr, Name, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain1_GetParent_Hooked(IDXGISwapChain1 * ptr, _In_  REFIID riid, _Out_  void ** ppParent)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::GetParent");
    return g_D3D11OriginVTables._IDXGISwapChain1.GetParent(ptr, riid, ppParent);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain1_GetDevice_Hooked(IDXGISwapChain1 * ptr, _In_  REFIID riid, _Out_  void ** ppDevice)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::GetDevice");
    return g_D3D11OriginVTables._IDXGISwapChain1.GetDevice(ptr, riid, ppDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain1_Present_Hooked(IDXGISwapChain1 * ptr, /* [in] */ UINT SyncInterval, /* [in] */ UINT Flags)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::Present");
    return g_D3D11OriginVTables._IDXGISwapChain1.Present(ptr, SyncInterval, Flags);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain1_GetBuffer_Hooked(IDXGISwapChain1 * ptr, /* [in] */ UINT Buffer, _In_  REFIID riid, _Out_  void ** ppSurface)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::GetBuffer");
    return g_D3D11OriginVTables._IDXGISwapChain1.GetBuffer(ptr, Buffer, riid, ppSurface);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain1_SetFullscreenState_Hooked(IDXGISwapChain1 * ptr, /* [in] */ BOOL Fullscreen, _In_opt_  IDXGIOutput * pTarget)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::SetFullscreenState");
    return g_D3D11OriginVTables._IDXGISwapChain1.SetFullscreenState(ptr, Fullscreen, pTarget);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain1_GetFullscreenState_Hooked(IDXGISwapChain1 * ptr, _Out_opt_  BOOL * pFullscreen, _Out_opt_  IDXGIOutput ** ppTarget)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::GetFullscreenState");
    return g_D3D11OriginVTables._IDXGISwapChain1.GetFullscreenState(ptr, pFullscreen, ppTarget);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain1_GetDesc_Hooked(IDXGISwapChain1 * ptr, _Out_  DXGI_SWAP_CHAIN_DESC * pDesc)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::GetDesc");
    return g_D3D11OriginVTables._IDXGISwapChain1.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain1_ResizeBuffers_Hooked(IDXGISwapChain1 * ptr, /* [in] */ UINT BufferCount, /* [in] */ UINT Width, /* [in] */ UINT Height, /* [in] */ DXGI_FORMAT NewFormat, /* [in] */ UINT SwapChainFlags)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::ResizeBuffers");
    return g_D3D11OriginVTables._IDXGISwapChain1.ResizeBuffers(ptr, BufferCount, Width, Height, NewFormat, SwapChainFlags);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain1_ResizeTarget_Hooked(IDXGISwapChain1 * ptr, _In_  const DXGI_MODE_DESC * pNewTargetParameters)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::ResizeTarget");
    return g_D3D11OriginVTables._IDXGISwapChain1.ResizeTarget(ptr, pNewTargetParameters);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain1_GetContainingOutput_Hooked(IDXGISwapChain1 * ptr, _Out_  IDXGIOutput ** ppOutput)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::GetContainingOutput");
    return g_D3D11OriginVTables._IDXGISwapChain1.GetContainingOutput(ptr, ppOutput);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain1_GetFrameStatistics_Hooked(IDXGISwapChain1 * ptr, _Out_  DXGI_FRAME_STATISTICS * pStats)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::GetFrameStatistics");
    return g_D3D11OriginVTables._IDXGISwapChain1.GetFrameStatistics(ptr, pStats);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain1_GetLastPresentCount_Hooked(IDXGISwapChain1 * ptr, _Out_  UINT * pLastPresentCount)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::GetLastPresentCount");
    return g_D3D11OriginVTables._IDXGISwapChain1.GetLastPresentCount(ptr, pLastPresentCount);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain1_GetDesc1_Hooked(IDXGISwapChain1 * ptr, _Out_  DXGI_SWAP_CHAIN_DESC1 * pDesc)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::GetDesc1");
    return g_D3D11OriginVTables._IDXGISwapChain1.GetDesc1(ptr, pDesc);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain1_GetFullscreenDesc_Hooked(IDXGISwapChain1 * ptr, _Out_  DXGI_SWAP_CHAIN_FULLSCREEN_DESC * pDesc)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::GetFullscreenDesc");
    return g_D3D11OriginVTables._IDXGISwapChain1.GetFullscreenDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain1_GetHwnd_Hooked(IDXGISwapChain1 * ptr, _Out_  HWND * pHwnd)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::GetHwnd");
    return g_D3D11OriginVTables._IDXGISwapChain1.GetHwnd(ptr, pHwnd);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain1_GetCoreWindow_Hooked(IDXGISwapChain1 * ptr, _In_  REFIID refiid, _Out_  void ** ppUnk)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::GetCoreWindow");
    return g_D3D11OriginVTables._IDXGISwapChain1.GetCoreWindow(ptr, refiid, ppUnk);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain1_Present1_Hooked(IDXGISwapChain1 * ptr, /* [in] */ UINT SyncInterval, /* [in] */ UINT PresentFlags, _In_  const DXGI_PRESENT_PARAMETERS * pPresentParameters)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::Present1");
    return g_D3D11OriginVTables._IDXGISwapChain1.Present1(ptr, SyncInterval, PresentFlags, pPresentParameters);
}

// -----------------------------------------------------------------------------
static inline BOOL STDMETHODCALLTYPE IDXGISwapChain1_IsTemporaryMonoSupported_Hooked(IDXGISwapChain1 * ptr)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::IsTemporaryMonoSupported");
    return g_D3D11OriginVTables._IDXGISwapChain1.IsTemporaryMonoSupported(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain1_GetRestrictToOutput_Hooked(IDXGISwapChain1 * ptr, _Out_  IDXGIOutput ** ppRestrictToOutput)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::GetRestrictToOutput");
    return g_D3D11OriginVTables._IDXGISwapChain1.GetRestrictToOutput(ptr, ppRestrictToOutput);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain1_SetBackgroundColor_Hooked(IDXGISwapChain1 * ptr, _In_  const DXGI_RGBA * pColor)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::SetBackgroundColor");
    return g_D3D11OriginVTables._IDXGISwapChain1.SetBackgroundColor(ptr, pColor);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain1_GetBackgroundColor_Hooked(IDXGISwapChain1 * ptr, _Out_  DXGI_RGBA * pColor)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::GetBackgroundColor");
    return g_D3D11OriginVTables._IDXGISwapChain1.GetBackgroundColor(ptr, pColor);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain1_SetRotation_Hooked(IDXGISwapChain1 * ptr, _In_  DXGI_MODE_ROTATION Rotation)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::SetRotation");
    return g_D3D11OriginVTables._IDXGISwapChain1.SetRotation(ptr, Rotation);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGISwapChain1_GetRotation_Hooked(IDXGISwapChain1 * ptr, _Out_  DXGI_MODE_ROTATION * pRotation)
{
    calltrace::AutoTrace trace("IDXGISwapChain1::GetRotation");
    return g_D3D11OriginVTables._IDXGISwapChain1.GetRotation(ptr, pRotation);
}

// -----------------------------------------------------------------------------
// IDXGIFactory2Hook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_IDXGIFactory2(IDXGIFactory2 * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(IDXGIFactory2Vtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._IDXGIFactory2);
    void** hooked = (void**)&(g_D3D11HookedVTables._IDXGIFactory2);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "IDXGIFactory2");
}
template <> inline void RealToHooked11<IDXGIFactory2>(IDXGIFactory2 * p)
{
    return RealToHooked11_IDXGIFactory2( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory2_QueryInterface_Hooked(IDXGIFactory2 * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("IDXGIFactory2::QueryInterface");
    return g_D3D11OriginVTables._IDXGIFactory2.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIFactory2_AddRef_Hooked(IDXGIFactory2 * ptr)
{
    calltrace::AutoTrace trace("IDXGIFactory2::AddRef");
    return g_D3D11OriginVTables._IDXGIFactory2.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIFactory2_Release_Hooked(IDXGIFactory2 * ptr)
{
    calltrace::AutoTrace trace("IDXGIFactory2::Release");
    return g_D3D11OriginVTables._IDXGIFactory2.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory2_SetPrivateData_Hooked(IDXGIFactory2 * ptr, _In_  REFGUID Name, /* [in] */ UINT DataSize, _In_reads_bytes_(DataSize)  const void * pData)
{
    calltrace::AutoTrace trace("IDXGIFactory2::SetPrivateData");
    return g_D3D11OriginVTables._IDXGIFactory2.SetPrivateData(ptr, Name, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory2_SetPrivateDataInterface_Hooked(IDXGIFactory2 * ptr, _In_  REFGUID Name, _In_  const IUnknown * pUnknown)
{
    calltrace::AutoTrace trace("IDXGIFactory2::SetPrivateDataInterface");
    return g_D3D11OriginVTables._IDXGIFactory2.SetPrivateDataInterface(ptr, Name, pUnknown);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory2_GetPrivateData_Hooked(IDXGIFactory2 * ptr, _In_  REFGUID Name, _Inout_  UINT * pDataSize, _Out_writes_bytes_(*pDataSize)  void * pData)
{
    calltrace::AutoTrace trace("IDXGIFactory2::GetPrivateData");
    return g_D3D11OriginVTables._IDXGIFactory2.GetPrivateData(ptr, Name, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory2_GetParent_Hooked(IDXGIFactory2 * ptr, _In_  REFIID riid, _Out_  void ** ppParent)
{
    calltrace::AutoTrace trace("IDXGIFactory2::GetParent");
    return g_D3D11OriginVTables._IDXGIFactory2.GetParent(ptr, riid, ppParent);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory2_EnumAdapters_Hooked(IDXGIFactory2 * ptr, /* [in] */ UINT Adapter, _Out_  IDXGIAdapter ** ppAdapter)
{
    calltrace::AutoTrace trace("IDXGIFactory2::EnumAdapters");
    return g_D3D11OriginVTables._IDXGIFactory2.EnumAdapters(ptr, Adapter, ppAdapter);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory2_MakeWindowAssociation_Hooked(IDXGIFactory2 * ptr, HWND WindowHandle, UINT Flags)
{
    calltrace::AutoTrace trace("IDXGIFactory2::MakeWindowAssociation");
    return g_D3D11OriginVTables._IDXGIFactory2.MakeWindowAssociation(ptr, WindowHandle, Flags);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory2_GetWindowAssociation_Hooked(IDXGIFactory2 * ptr, _Out_  HWND * pWindowHandle)
{
    calltrace::AutoTrace trace("IDXGIFactory2::GetWindowAssociation");
    return g_D3D11OriginVTables._IDXGIFactory2.GetWindowAssociation(ptr, pWindowHandle);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory2_CreateSwapChain_Hooked(IDXGIFactory2 * ptr, _In_  IUnknown * pDevice, _In_  DXGI_SWAP_CHAIN_DESC * pDesc, _Out_  IDXGISwapChain ** ppSwapChain)
{
    calltrace::AutoTrace trace("IDXGIFactory2::CreateSwapChain");
    return g_D3D11OriginVTables._IDXGIFactory2.CreateSwapChain(ptr, pDevice, pDesc, ppSwapChain);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory2_CreateSoftwareAdapter_Hooked(IDXGIFactory2 * ptr, /* [in] */ HMODULE Module, _Out_  IDXGIAdapter ** ppAdapter)
{
    calltrace::AutoTrace trace("IDXGIFactory2::CreateSoftwareAdapter");
    return g_D3D11OriginVTables._IDXGIFactory2.CreateSoftwareAdapter(ptr, Module, ppAdapter);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory2_EnumAdapters1_Hooked(IDXGIFactory2 * ptr, /* [in] */ UINT Adapter, _Out_  IDXGIAdapter1 ** ppAdapter)
{
    calltrace::AutoTrace trace("IDXGIFactory2::EnumAdapters1");
    return g_D3D11OriginVTables._IDXGIFactory2.EnumAdapters1(ptr, Adapter, ppAdapter);
}

// -----------------------------------------------------------------------------
static inline BOOL STDMETHODCALLTYPE IDXGIFactory2_IsCurrent_Hooked(IDXGIFactory2 * ptr)
{
    calltrace::AutoTrace trace("IDXGIFactory2::IsCurrent");
    return g_D3D11OriginVTables._IDXGIFactory2.IsCurrent(ptr);
}

// -----------------------------------------------------------------------------
static inline BOOL STDMETHODCALLTYPE IDXGIFactory2_IsWindowedStereoEnabled_Hooked(IDXGIFactory2 * ptr)
{
    calltrace::AutoTrace trace("IDXGIFactory2::IsWindowedStereoEnabled");
    return g_D3D11OriginVTables._IDXGIFactory2.IsWindowedStereoEnabled(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory2_CreateSwapChainForHwnd_Hooked(IDXGIFactory2 * ptr, _In_  IUnknown * pDevice, _In_  HWND hWnd, _In_  const DXGI_SWAP_CHAIN_DESC1 * pDesc, _In_opt_  const DXGI_SWAP_CHAIN_FULLSCREEN_DESC * pFullscreenDesc, _In_opt_  IDXGIOutput * pRestrictToOutput, _Out_  IDXGISwapChain1 ** ppSwapChain)
{
    calltrace::AutoTrace trace("IDXGIFactory2::CreateSwapChainForHwnd");
    return g_D3D11OriginVTables._IDXGIFactory2.CreateSwapChainForHwnd(ptr, pDevice, hWnd, pDesc, pFullscreenDesc, pRestrictToOutput, ppSwapChain);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory2_CreateSwapChainForCoreWindow_Hooked(IDXGIFactory2 * ptr, _In_  IUnknown * pDevice, _In_  IUnknown * pWindow, _In_  const DXGI_SWAP_CHAIN_DESC1 * pDesc, _In_opt_  IDXGIOutput * pRestrictToOutput, _Out_  IDXGISwapChain1 ** ppSwapChain)
{
    calltrace::AutoTrace trace("IDXGIFactory2::CreateSwapChainForCoreWindow");
    return g_D3D11OriginVTables._IDXGIFactory2.CreateSwapChainForCoreWindow(ptr, pDevice, pWindow, pDesc, pRestrictToOutput, ppSwapChain);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory2_GetSharedResourceAdapterLuid_Hooked(IDXGIFactory2 * ptr, _In_  HANDLE hResource, _Out_  LUID * pLuid)
{
    calltrace::AutoTrace trace("IDXGIFactory2::GetSharedResourceAdapterLuid");
    return g_D3D11OriginVTables._IDXGIFactory2.GetSharedResourceAdapterLuid(ptr, hResource, pLuid);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory2_RegisterStereoStatusWindow_Hooked(IDXGIFactory2 * ptr, _In_  HWND WindowHandle, _In_  UINT wMsg, _Out_  DWORD * pdwCookie)
{
    calltrace::AutoTrace trace("IDXGIFactory2::RegisterStereoStatusWindow");
    return g_D3D11OriginVTables._IDXGIFactory2.RegisterStereoStatusWindow(ptr, WindowHandle, wMsg, pdwCookie);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory2_RegisterStereoStatusEvent_Hooked(IDXGIFactory2 * ptr, _In_  HANDLE hEvent, _Out_  DWORD * pdwCookie)
{
    calltrace::AutoTrace trace("IDXGIFactory2::RegisterStereoStatusEvent");
    return g_D3D11OriginVTables._IDXGIFactory2.RegisterStereoStatusEvent(ptr, hEvent, pdwCookie);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE IDXGIFactory2_UnregisterStereoStatus_Hooked(IDXGIFactory2 * ptr, _In_  DWORD dwCookie)
{
    calltrace::AutoTrace trace("IDXGIFactory2::UnregisterStereoStatus");
    return g_D3D11OriginVTables._IDXGIFactory2.UnregisterStereoStatus(ptr, dwCookie);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory2_RegisterOcclusionStatusWindow_Hooked(IDXGIFactory2 * ptr, _In_  HWND WindowHandle, _In_  UINT wMsg, _Out_  DWORD * pdwCookie)
{
    calltrace::AutoTrace trace("IDXGIFactory2::RegisterOcclusionStatusWindow");
    return g_D3D11OriginVTables._IDXGIFactory2.RegisterOcclusionStatusWindow(ptr, WindowHandle, wMsg, pdwCookie);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory2_RegisterOcclusionStatusEvent_Hooked(IDXGIFactory2 * ptr, _In_  HANDLE hEvent, _Out_  DWORD * pdwCookie)
{
    calltrace::AutoTrace trace("IDXGIFactory2::RegisterOcclusionStatusEvent");
    return g_D3D11OriginVTables._IDXGIFactory2.RegisterOcclusionStatusEvent(ptr, hEvent, pdwCookie);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE IDXGIFactory2_UnregisterOcclusionStatus_Hooked(IDXGIFactory2 * ptr, _In_  DWORD dwCookie)
{
    calltrace::AutoTrace trace("IDXGIFactory2::UnregisterOcclusionStatus");
    return g_D3D11OriginVTables._IDXGIFactory2.UnregisterOcclusionStatus(ptr, dwCookie);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIFactory2_CreateSwapChainForComposition_Hooked(IDXGIFactory2 * ptr, _In_  IUnknown * pDevice, _In_  const DXGI_SWAP_CHAIN_DESC1 * pDesc, _In_opt_  IDXGIOutput * pRestrictToOutput, _Outptr_  IDXGISwapChain1 ** ppSwapChain)
{
    calltrace::AutoTrace trace("IDXGIFactory2::CreateSwapChainForComposition");
    return g_D3D11OriginVTables._IDXGIFactory2.CreateSwapChainForComposition(ptr, pDevice, pDesc, pRestrictToOutput, ppSwapChain);
}

// -----------------------------------------------------------------------------
// IDXGIAdapter2Hook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_IDXGIAdapter2(IDXGIAdapter2 * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(IDXGIAdapter2Vtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._IDXGIAdapter2);
    void** hooked = (void**)&(g_D3D11HookedVTables._IDXGIAdapter2);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "IDXGIAdapter2");
}
template <> inline void RealToHooked11<IDXGIAdapter2>(IDXGIAdapter2 * p)
{
    return RealToHooked11_IDXGIAdapter2( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter2_QueryInterface_Hooked(IDXGIAdapter2 * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("IDXGIAdapter2::QueryInterface");
    return g_D3D11OriginVTables._IDXGIAdapter2.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIAdapter2_AddRef_Hooked(IDXGIAdapter2 * ptr)
{
    calltrace::AutoTrace trace("IDXGIAdapter2::AddRef");
    return g_D3D11OriginVTables._IDXGIAdapter2.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIAdapter2_Release_Hooked(IDXGIAdapter2 * ptr)
{
    calltrace::AutoTrace trace("IDXGIAdapter2::Release");
    return g_D3D11OriginVTables._IDXGIAdapter2.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter2_SetPrivateData_Hooked(IDXGIAdapter2 * ptr, _In_  REFGUID Name, /* [in] */ UINT DataSize, _In_reads_bytes_(DataSize)  const void * pData)
{
    calltrace::AutoTrace trace("IDXGIAdapter2::SetPrivateData");
    return g_D3D11OriginVTables._IDXGIAdapter2.SetPrivateData(ptr, Name, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter2_SetPrivateDataInterface_Hooked(IDXGIAdapter2 * ptr, _In_  REFGUID Name, _In_  const IUnknown * pUnknown)
{
    calltrace::AutoTrace trace("IDXGIAdapter2::SetPrivateDataInterface");
    return g_D3D11OriginVTables._IDXGIAdapter2.SetPrivateDataInterface(ptr, Name, pUnknown);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter2_GetPrivateData_Hooked(IDXGIAdapter2 * ptr, _In_  REFGUID Name, _Inout_  UINT * pDataSize, _Out_writes_bytes_(*pDataSize)  void * pData)
{
    calltrace::AutoTrace trace("IDXGIAdapter2::GetPrivateData");
    return g_D3D11OriginVTables._IDXGIAdapter2.GetPrivateData(ptr, Name, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter2_GetParent_Hooked(IDXGIAdapter2 * ptr, _In_  REFIID riid, _Out_  void ** ppParent)
{
    calltrace::AutoTrace trace("IDXGIAdapter2::GetParent");
    return g_D3D11OriginVTables._IDXGIAdapter2.GetParent(ptr, riid, ppParent);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter2_EnumOutputs_Hooked(IDXGIAdapter2 * ptr, /* [in] */ UINT Output, _Out_  IDXGIOutput ** ppOutput)
{
    calltrace::AutoTrace trace("IDXGIAdapter2::EnumOutputs");
    return g_D3D11OriginVTables._IDXGIAdapter2.EnumOutputs(ptr, Output, ppOutput);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter2_GetDesc_Hooked(IDXGIAdapter2 * ptr, _Out_  DXGI_ADAPTER_DESC * pDesc)
{
    calltrace::AutoTrace trace("IDXGIAdapter2::GetDesc");
    return g_D3D11OriginVTables._IDXGIAdapter2.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter2_CheckInterfaceSupport_Hooked(IDXGIAdapter2 * ptr, _In_  REFGUID InterfaceName, _Out_  LARGE_INTEGER * pUMDVersion)
{
    calltrace::AutoTrace trace("IDXGIAdapter2::CheckInterfaceSupport");
    return g_D3D11OriginVTables._IDXGIAdapter2.CheckInterfaceSupport(ptr, InterfaceName, pUMDVersion);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter2_GetDesc1_Hooked(IDXGIAdapter2 * ptr, _Out_  DXGI_ADAPTER_DESC1 * pDesc)
{
    calltrace::AutoTrace trace("IDXGIAdapter2::GetDesc1");
    return g_D3D11OriginVTables._IDXGIAdapter2.GetDesc1(ptr, pDesc);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIAdapter2_GetDesc2_Hooked(IDXGIAdapter2 * ptr, _Out_  DXGI_ADAPTER_DESC2 * pDesc)
{
    calltrace::AutoTrace trace("IDXGIAdapter2::GetDesc2");
    return g_D3D11OriginVTables._IDXGIAdapter2.GetDesc2(ptr, pDesc);
}

// -----------------------------------------------------------------------------
// IDXGIOutput1Hook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_IDXGIOutput1(IDXGIOutput1 * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(IDXGIOutput1Vtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._IDXGIOutput1);
    void** hooked = (void**)&(g_D3D11HookedVTables._IDXGIOutput1);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "IDXGIOutput1");
}
template <> inline void RealToHooked11<IDXGIOutput1>(IDXGIOutput1 * p)
{
    return RealToHooked11_IDXGIOutput1( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput1_QueryInterface_Hooked(IDXGIOutput1 * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("IDXGIOutput1::QueryInterface");
    return g_D3D11OriginVTables._IDXGIOutput1.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIOutput1_AddRef_Hooked(IDXGIOutput1 * ptr)
{
    calltrace::AutoTrace trace("IDXGIOutput1::AddRef");
    return g_D3D11OriginVTables._IDXGIOutput1.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIOutput1_Release_Hooked(IDXGIOutput1 * ptr)
{
    calltrace::AutoTrace trace("IDXGIOutput1::Release");
    return g_D3D11OriginVTables._IDXGIOutput1.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput1_SetPrivateData_Hooked(IDXGIOutput1 * ptr, _In_  REFGUID Name, /* [in] */ UINT DataSize, _In_reads_bytes_(DataSize)  const void * pData)
{
    calltrace::AutoTrace trace("IDXGIOutput1::SetPrivateData");
    return g_D3D11OriginVTables._IDXGIOutput1.SetPrivateData(ptr, Name, DataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput1_SetPrivateDataInterface_Hooked(IDXGIOutput1 * ptr, _In_  REFGUID Name, _In_  const IUnknown * pUnknown)
{
    calltrace::AutoTrace trace("IDXGIOutput1::SetPrivateDataInterface");
    return g_D3D11OriginVTables._IDXGIOutput1.SetPrivateDataInterface(ptr, Name, pUnknown);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput1_GetPrivateData_Hooked(IDXGIOutput1 * ptr, _In_  REFGUID Name, _Inout_  UINT * pDataSize, _Out_writes_bytes_(*pDataSize)  void * pData)
{
    calltrace::AutoTrace trace("IDXGIOutput1::GetPrivateData");
    return g_D3D11OriginVTables._IDXGIOutput1.GetPrivateData(ptr, Name, pDataSize, pData);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput1_GetParent_Hooked(IDXGIOutput1 * ptr, _In_  REFIID riid, _Out_  void ** ppParent)
{
    calltrace::AutoTrace trace("IDXGIOutput1::GetParent");
    return g_D3D11OriginVTables._IDXGIOutput1.GetParent(ptr, riid, ppParent);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput1_GetDesc_Hooked(IDXGIOutput1 * ptr, _Out_  DXGI_OUTPUT_DESC * pDesc)
{
    calltrace::AutoTrace trace("IDXGIOutput1::GetDesc");
    return g_D3D11OriginVTables._IDXGIOutput1.GetDesc(ptr, pDesc);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput1_GetDisplayModeList_Hooked(IDXGIOutput1 * ptr, /* [in] */ DXGI_FORMAT EnumFormat, /* [in] */ UINT Flags, _Inout_  UINT * pNumModes, _Out_writes_to_opt_(*pNumModes,*pNumModes)  DXGI_MODE_DESC * pDesc)
{
    calltrace::AutoTrace trace("IDXGIOutput1::GetDisplayModeList");
    return g_D3D11OriginVTables._IDXGIOutput1.GetDisplayModeList(ptr, EnumFormat, Flags, pNumModes, pDesc);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput1_FindClosestMatchingMode_Hooked(IDXGIOutput1 * ptr, _In_  const DXGI_MODE_DESC * pModeToMatch, _Out_  DXGI_MODE_DESC * pClosestMatch, _In_opt_  IUnknown * pConcernedDevice)
{
    calltrace::AutoTrace trace("IDXGIOutput1::FindClosestMatchingMode");
    return g_D3D11OriginVTables._IDXGIOutput1.FindClosestMatchingMode(ptr, pModeToMatch, pClosestMatch, pConcernedDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput1_WaitForVBlank_Hooked(IDXGIOutput1 * ptr)
{
    calltrace::AutoTrace trace("IDXGIOutput1::WaitForVBlank");
    return g_D3D11OriginVTables._IDXGIOutput1.WaitForVBlank(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput1_TakeOwnership_Hooked(IDXGIOutput1 * ptr, _In_  IUnknown * pDevice, BOOL Exclusive)
{
    calltrace::AutoTrace trace("IDXGIOutput1::TakeOwnership");
    return g_D3D11OriginVTables._IDXGIOutput1.TakeOwnership(ptr, pDevice, Exclusive);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE IDXGIOutput1_ReleaseOwnership_Hooked(IDXGIOutput1 * ptr)
{
    calltrace::AutoTrace trace("IDXGIOutput1::ReleaseOwnership");
    return g_D3D11OriginVTables._IDXGIOutput1.ReleaseOwnership(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput1_GetGammaControlCapabilities_Hooked(IDXGIOutput1 * ptr, _Out_  DXGI_GAMMA_CONTROL_CAPABILITIES * pGammaCaps)
{
    calltrace::AutoTrace trace("IDXGIOutput1::GetGammaControlCapabilities");
    return g_D3D11OriginVTables._IDXGIOutput1.GetGammaControlCapabilities(ptr, pGammaCaps);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput1_SetGammaControl_Hooked(IDXGIOutput1 * ptr, _In_  const DXGI_GAMMA_CONTROL * pArray)
{
    calltrace::AutoTrace trace("IDXGIOutput1::SetGammaControl");
    return g_D3D11OriginVTables._IDXGIOutput1.SetGammaControl(ptr, pArray);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput1_GetGammaControl_Hooked(IDXGIOutput1 * ptr, _Out_  DXGI_GAMMA_CONTROL * pArray)
{
    calltrace::AutoTrace trace("IDXGIOutput1::GetGammaControl");
    return g_D3D11OriginVTables._IDXGIOutput1.GetGammaControl(ptr, pArray);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput1_SetDisplaySurface_Hooked(IDXGIOutput1 * ptr, _In_  IDXGISurface * pScanoutSurface)
{
    calltrace::AutoTrace trace("IDXGIOutput1::SetDisplaySurface");
    return g_D3D11OriginVTables._IDXGIOutput1.SetDisplaySurface(ptr, pScanoutSurface);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput1_GetDisplaySurfaceData_Hooked(IDXGIOutput1 * ptr, _In_  IDXGISurface * pDestination)
{
    calltrace::AutoTrace trace("IDXGIOutput1::GetDisplaySurfaceData");
    return g_D3D11OriginVTables._IDXGIOutput1.GetDisplaySurfaceData(ptr, pDestination);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput1_GetFrameStatistics_Hooked(IDXGIOutput1 * ptr, _Out_  DXGI_FRAME_STATISTICS * pStats)
{
    calltrace::AutoTrace trace("IDXGIOutput1::GetFrameStatistics");
    return g_D3D11OriginVTables._IDXGIOutput1.GetFrameStatistics(ptr, pStats);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput1_GetDisplayModeList1_Hooked(IDXGIOutput1 * ptr, /* [in] */ DXGI_FORMAT EnumFormat, /* [in] */ UINT Flags, _Inout_  UINT * pNumModes, _Out_writes_to_opt_(*pNumModes,*pNumModes)  DXGI_MODE_DESC1 * pDesc)
{
    calltrace::AutoTrace trace("IDXGIOutput1::GetDisplayModeList1");
    return g_D3D11OriginVTables._IDXGIOutput1.GetDisplayModeList1(ptr, EnumFormat, Flags, pNumModes, pDesc);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput1_FindClosestMatchingMode1_Hooked(IDXGIOutput1 * ptr, _In_  const DXGI_MODE_DESC1 * pModeToMatch, _Out_  DXGI_MODE_DESC1 * pClosestMatch, _In_opt_  IUnknown * pConcernedDevice)
{
    calltrace::AutoTrace trace("IDXGIOutput1::FindClosestMatchingMode1");
    return g_D3D11OriginVTables._IDXGIOutput1.FindClosestMatchingMode1(ptr, pModeToMatch, pClosestMatch, pConcernedDevice);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput1_GetDisplaySurfaceData1_Hooked(IDXGIOutput1 * ptr, _In_  IDXGIResource * pDestination)
{
    calltrace::AutoTrace trace("IDXGIOutput1::GetDisplaySurfaceData1");
    return g_D3D11OriginVTables._IDXGIOutput1.GetDisplaySurfaceData1(ptr, pDestination);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIOutput1_DuplicateOutput_Hooked(IDXGIOutput1 * ptr, _In_  IUnknown * pDevice, _Out_  IDXGIOutputDuplication ** ppOutputDuplication)
{
    calltrace::AutoTrace trace("IDXGIOutput1::DuplicateOutput");
    return g_D3D11OriginVTables._IDXGIOutput1.DuplicateOutput(ptr, pDevice, ppOutputDuplication);
}

// -----------------------------------------------------------------------------
// IDXGIInfoQueueHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_IDXGIInfoQueue(IDXGIInfoQueue * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(IDXGIInfoQueueVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._IDXGIInfoQueue);
    void** hooked = (void**)&(g_D3D11HookedVTables._IDXGIInfoQueue);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "IDXGIInfoQueue");
}
template <> inline void RealToHooked11<IDXGIInfoQueue>(IDXGIInfoQueue * p)
{
    return RealToHooked11_IDXGIInfoQueue( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIInfoQueue_QueryInterface_Hooked(IDXGIInfoQueue * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::QueryInterface");
    return g_D3D11OriginVTables._IDXGIInfoQueue.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIInfoQueue_AddRef_Hooked(IDXGIInfoQueue * ptr)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::AddRef");
    return g_D3D11OriginVTables._IDXGIInfoQueue.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIInfoQueue_Release_Hooked(IDXGIInfoQueue * ptr)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::Release");
    return g_D3D11OriginVTables._IDXGIInfoQueue.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIInfoQueue_SetMessageCountLimit_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer, _In_  UINT64 MessageCountLimit)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::SetMessageCountLimit");
    return g_D3D11OriginVTables._IDXGIInfoQueue.SetMessageCountLimit(ptr, Producer, MessageCountLimit);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE IDXGIInfoQueue_ClearStoredMessages_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::ClearStoredMessages");
    return g_D3D11OriginVTables._IDXGIInfoQueue.ClearStoredMessages(ptr, Producer);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIInfoQueue_GetMessage_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer, _In_  UINT64 MessageIndex, _Out_writes_bytes_opt_(*pMessageByteLength)  DXGI_INFO_QUEUE_MESSAGE * pMessage, _Inout_  SIZE_T * pMessageByteLength)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::GetMessage");
    return g_D3D11OriginVTables._IDXGIInfoQueue.GetMessage(ptr, Producer, MessageIndex, pMessage, pMessageByteLength);
}

// -----------------------------------------------------------------------------
static inline UINT64 STDMETHODCALLTYPE IDXGIInfoQueue_GetNumStoredMessagesAllowedByRetrievalFilters_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::GetNumStoredMessagesAllowedByRetrievalFilters");
    return g_D3D11OriginVTables._IDXGIInfoQueue.GetNumStoredMessagesAllowedByRetrievalFilters(ptr, Producer);
}

// -----------------------------------------------------------------------------
static inline UINT64 STDMETHODCALLTYPE IDXGIInfoQueue_GetNumStoredMessages_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::GetNumStoredMessages");
    return g_D3D11OriginVTables._IDXGIInfoQueue.GetNumStoredMessages(ptr, Producer);
}

// -----------------------------------------------------------------------------
static inline UINT64 STDMETHODCALLTYPE IDXGIInfoQueue_GetNumMessagesDiscardedByMessageCountLimit_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::GetNumMessagesDiscardedByMessageCountLimit");
    return g_D3D11OriginVTables._IDXGIInfoQueue.GetNumMessagesDiscardedByMessageCountLimit(ptr, Producer);
}

// -----------------------------------------------------------------------------
static inline UINT64 STDMETHODCALLTYPE IDXGIInfoQueue_GetMessageCountLimit_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::GetMessageCountLimit");
    return g_D3D11OriginVTables._IDXGIInfoQueue.GetMessageCountLimit(ptr, Producer);
}

// -----------------------------------------------------------------------------
static inline UINT64 STDMETHODCALLTYPE IDXGIInfoQueue_GetNumMessagesAllowedByStorageFilter_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::GetNumMessagesAllowedByStorageFilter");
    return g_D3D11OriginVTables._IDXGIInfoQueue.GetNumMessagesAllowedByStorageFilter(ptr, Producer);
}

// -----------------------------------------------------------------------------
static inline UINT64 STDMETHODCALLTYPE IDXGIInfoQueue_GetNumMessagesDeniedByStorageFilter_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::GetNumMessagesDeniedByStorageFilter");
    return g_D3D11OriginVTables._IDXGIInfoQueue.GetNumMessagesDeniedByStorageFilter(ptr, Producer);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIInfoQueue_AddStorageFilterEntries_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer, _In_  DXGI_INFO_QUEUE_FILTER * pFilter)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::AddStorageFilterEntries");
    return g_D3D11OriginVTables._IDXGIInfoQueue.AddStorageFilterEntries(ptr, Producer, pFilter);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIInfoQueue_GetStorageFilter_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer, _Out_writes_bytes_opt_(*pFilterByteLength)  DXGI_INFO_QUEUE_FILTER * pFilter, _Inout_  SIZE_T * pFilterByteLength)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::GetStorageFilter");
    return g_D3D11OriginVTables._IDXGIInfoQueue.GetStorageFilter(ptr, Producer, pFilter, pFilterByteLength);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE IDXGIInfoQueue_ClearStorageFilter_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::ClearStorageFilter");
    return g_D3D11OriginVTables._IDXGIInfoQueue.ClearStorageFilter(ptr, Producer);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIInfoQueue_PushEmptyStorageFilter_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::PushEmptyStorageFilter");
    return g_D3D11OriginVTables._IDXGIInfoQueue.PushEmptyStorageFilter(ptr, Producer);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIInfoQueue_PushDenyAllStorageFilter_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::PushDenyAllStorageFilter");
    return g_D3D11OriginVTables._IDXGIInfoQueue.PushDenyAllStorageFilter(ptr, Producer);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIInfoQueue_PushCopyOfStorageFilter_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::PushCopyOfStorageFilter");
    return g_D3D11OriginVTables._IDXGIInfoQueue.PushCopyOfStorageFilter(ptr, Producer);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIInfoQueue_PushStorageFilter_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer, _In_  DXGI_INFO_QUEUE_FILTER * pFilter)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::PushStorageFilter");
    return g_D3D11OriginVTables._IDXGIInfoQueue.PushStorageFilter(ptr, Producer, pFilter);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE IDXGIInfoQueue_PopStorageFilter_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::PopStorageFilter");
    return g_D3D11OriginVTables._IDXGIInfoQueue.PopStorageFilter(ptr, Producer);
}

// -----------------------------------------------------------------------------
static inline UINT STDMETHODCALLTYPE IDXGIInfoQueue_GetStorageFilterStackSize_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::GetStorageFilterStackSize");
    return g_D3D11OriginVTables._IDXGIInfoQueue.GetStorageFilterStackSize(ptr, Producer);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIInfoQueue_AddRetrievalFilterEntries_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer, _In_  DXGI_INFO_QUEUE_FILTER * pFilter)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::AddRetrievalFilterEntries");
    return g_D3D11OriginVTables._IDXGIInfoQueue.AddRetrievalFilterEntries(ptr, Producer, pFilter);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIInfoQueue_GetRetrievalFilter_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer, _Out_writes_bytes_opt_(*pFilterByteLength)  DXGI_INFO_QUEUE_FILTER * pFilter, _Inout_  SIZE_T * pFilterByteLength)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::GetRetrievalFilter");
    return g_D3D11OriginVTables._IDXGIInfoQueue.GetRetrievalFilter(ptr, Producer, pFilter, pFilterByteLength);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE IDXGIInfoQueue_ClearRetrievalFilter_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::ClearRetrievalFilter");
    return g_D3D11OriginVTables._IDXGIInfoQueue.ClearRetrievalFilter(ptr, Producer);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIInfoQueue_PushEmptyRetrievalFilter_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::PushEmptyRetrievalFilter");
    return g_D3D11OriginVTables._IDXGIInfoQueue.PushEmptyRetrievalFilter(ptr, Producer);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIInfoQueue_PushDenyAllRetrievalFilter_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::PushDenyAllRetrievalFilter");
    return g_D3D11OriginVTables._IDXGIInfoQueue.PushDenyAllRetrievalFilter(ptr, Producer);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIInfoQueue_PushCopyOfRetrievalFilter_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::PushCopyOfRetrievalFilter");
    return g_D3D11OriginVTables._IDXGIInfoQueue.PushCopyOfRetrievalFilter(ptr, Producer);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIInfoQueue_PushRetrievalFilter_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer, _In_  DXGI_INFO_QUEUE_FILTER * pFilter)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::PushRetrievalFilter");
    return g_D3D11OriginVTables._IDXGIInfoQueue.PushRetrievalFilter(ptr, Producer, pFilter);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE IDXGIInfoQueue_PopRetrievalFilter_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::PopRetrievalFilter");
    return g_D3D11OriginVTables._IDXGIInfoQueue.PopRetrievalFilter(ptr, Producer);
}

// -----------------------------------------------------------------------------
static inline UINT STDMETHODCALLTYPE IDXGIInfoQueue_GetRetrievalFilterStackSize_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::GetRetrievalFilterStackSize");
    return g_D3D11OriginVTables._IDXGIInfoQueue.GetRetrievalFilterStackSize(ptr, Producer);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIInfoQueue_AddMessage_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer, _In_  DXGI_INFO_QUEUE_MESSAGE_CATEGORY Category, _In_  DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity, _In_  DXGI_INFO_QUEUE_MESSAGE_ID ID, _In_  LPCSTR pDescription)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::AddMessage");
    return g_D3D11OriginVTables._IDXGIInfoQueue.AddMessage(ptr, Producer, Category, Severity, ID, pDescription);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIInfoQueue_AddApplicationMessage_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity, _In_  LPCSTR pDescription)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::AddApplicationMessage");
    return g_D3D11OriginVTables._IDXGIInfoQueue.AddApplicationMessage(ptr, Severity, pDescription);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIInfoQueue_SetBreakOnCategory_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer, _In_  DXGI_INFO_QUEUE_MESSAGE_CATEGORY Category, _In_  BOOL bEnable)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::SetBreakOnCategory");
    return g_D3D11OriginVTables._IDXGIInfoQueue.SetBreakOnCategory(ptr, Producer, Category, bEnable);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIInfoQueue_SetBreakOnSeverity_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer, _In_  DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity, _In_  BOOL bEnable)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::SetBreakOnSeverity");
    return g_D3D11OriginVTables._IDXGIInfoQueue.SetBreakOnSeverity(ptr, Producer, Severity, bEnable);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIInfoQueue_SetBreakOnID_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer, _In_  DXGI_INFO_QUEUE_MESSAGE_ID ID, _In_  BOOL bEnable)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::SetBreakOnID");
    return g_D3D11OriginVTables._IDXGIInfoQueue.SetBreakOnID(ptr, Producer, ID, bEnable);
}

// -----------------------------------------------------------------------------
static inline BOOL STDMETHODCALLTYPE IDXGIInfoQueue_GetBreakOnCategory_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer, _In_  DXGI_INFO_QUEUE_MESSAGE_CATEGORY Category)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::GetBreakOnCategory");
    return g_D3D11OriginVTables._IDXGIInfoQueue.GetBreakOnCategory(ptr, Producer, Category);
}

// -----------------------------------------------------------------------------
static inline BOOL STDMETHODCALLTYPE IDXGIInfoQueue_GetBreakOnSeverity_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer, _In_  DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::GetBreakOnSeverity");
    return g_D3D11OriginVTables._IDXGIInfoQueue.GetBreakOnSeverity(ptr, Producer, Severity);
}

// -----------------------------------------------------------------------------
static inline BOOL STDMETHODCALLTYPE IDXGIInfoQueue_GetBreakOnID_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer, _In_  DXGI_INFO_QUEUE_MESSAGE_ID ID)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::GetBreakOnID");
    return g_D3D11OriginVTables._IDXGIInfoQueue.GetBreakOnID(ptr, Producer, ID);
}

// -----------------------------------------------------------------------------
static inline void STDMETHODCALLTYPE IDXGIInfoQueue_SetMuteDebugOutput_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer, _In_  BOOL bMute)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::SetMuteDebugOutput");
    return g_D3D11OriginVTables._IDXGIInfoQueue.SetMuteDebugOutput(ptr, Producer, bMute);
}

// -----------------------------------------------------------------------------
static inline BOOL STDMETHODCALLTYPE IDXGIInfoQueue_GetMuteDebugOutput_Hooked(IDXGIInfoQueue * ptr, _In_  DXGI_DEBUG_ID Producer)
{
    calltrace::AutoTrace trace("IDXGIInfoQueue::GetMuteDebugOutput");
    return g_D3D11OriginVTables._IDXGIInfoQueue.GetMuteDebugOutput(ptr, Producer);
}

// -----------------------------------------------------------------------------
// IDXGIDebugHook Functions
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
inline void RealToHooked11_IDXGIDebug(IDXGIDebug * p)
{
    if (!p) return;
    const size_t COUNT = sizeof(IDXGIDebugVtbl) / sizeof(void*);
    void** vtable = *(void***)p;
    void** origin = (void**)&(g_D3D11OriginVTables._IDXGIDebug);
    void** hooked = (void**)&(g_D3D11HookedVTables._IDXGIDebug);
    return RealToHooked11_General<COUNT>(vtable, origin, hooked, "IDXGIDebug");
}
template <> inline void RealToHooked11<IDXGIDebug>(IDXGIDebug * p)
{
    return RealToHooked11_IDXGIDebug( p );
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDebug_QueryInterface_Hooked(IDXGIDebug * ptr, const IID & iid, void ** pp)
{
    calltrace::AutoTrace trace("IDXGIDebug::QueryInterface");
    return g_D3D11OriginVTables._IDXGIDebug.QueryInterface(ptr, iid, pp);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIDebug_AddRef_Hooked(IDXGIDebug * ptr)
{
    calltrace::AutoTrace trace("IDXGIDebug::AddRef");
    return g_D3D11OriginVTables._IDXGIDebug.AddRef(ptr);
}

// -----------------------------------------------------------------------------
static inline ULONG STDMETHODCALLTYPE IDXGIDebug_Release_Hooked(IDXGIDebug * ptr)
{
    calltrace::AutoTrace trace("IDXGIDebug::Release");
    return g_D3D11OriginVTables._IDXGIDebug.Release(ptr);
}

// -----------------------------------------------------------------------------
static inline HRESULT STDMETHODCALLTYPE IDXGIDebug_ReportLiveObjects_Hooked(IDXGIDebug * ptr, GUID apiid, DXGI_DEBUG_RLO_FLAGS flags)
{
    calltrace::AutoTrace trace("IDXGIDebug::ReportLiveObjects");
    return g_D3D11OriginVTables._IDXGIDebug.ReportLiveObjects(ptr, apiid, flags);
}

// -----------------------------------------------------------------------------
inline void SetupD3D11HookedVTables()
{
    g_D3D11HookedVTables._ID3D11DeviceChild.QueryInterface = ID3D11DeviceChild_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceChild.AddRef = ID3D11DeviceChild_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceChild.Release = ID3D11DeviceChild_Release_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceChild.GetDevice = ID3D11DeviceChild_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceChild.GetPrivateData = ID3D11DeviceChild_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceChild.SetPrivateData = ID3D11DeviceChild_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceChild.SetPrivateDataInterface = ID3D11DeviceChild_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11DepthStencilState.QueryInterface = ID3D11DepthStencilState_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11DepthStencilState.AddRef = ID3D11DepthStencilState_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11DepthStencilState.Release = ID3D11DepthStencilState_Release_Hooked;
    g_D3D11HookedVTables._ID3D11DepthStencilState.GetDevice = ID3D11DepthStencilState_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11DepthStencilState.GetPrivateData = ID3D11DepthStencilState_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11DepthStencilState.SetPrivateData = ID3D11DepthStencilState_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11DepthStencilState.SetPrivateDataInterface = ID3D11DepthStencilState_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11DepthStencilState.GetDesc = ID3D11DepthStencilState_GetDesc_Hooked;
    g_D3D11HookedVTables._ID3D11BlendState.QueryInterface = ID3D11BlendState_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11BlendState.AddRef = ID3D11BlendState_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11BlendState.Release = ID3D11BlendState_Release_Hooked;
    g_D3D11HookedVTables._ID3D11BlendState.GetDevice = ID3D11BlendState_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11BlendState.GetPrivateData = ID3D11BlendState_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11BlendState.SetPrivateData = ID3D11BlendState_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11BlendState.SetPrivateDataInterface = ID3D11BlendState_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11BlendState.GetDesc = ID3D11BlendState_GetDesc_Hooked;
    g_D3D11HookedVTables._ID3D11RasterizerState.QueryInterface = ID3D11RasterizerState_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11RasterizerState.AddRef = ID3D11RasterizerState_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11RasterizerState.Release = ID3D11RasterizerState_Release_Hooked;
    g_D3D11HookedVTables._ID3D11RasterizerState.GetDevice = ID3D11RasterizerState_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11RasterizerState.GetPrivateData = ID3D11RasterizerState_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11RasterizerState.SetPrivateData = ID3D11RasterizerState_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11RasterizerState.SetPrivateDataInterface = ID3D11RasterizerState_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11RasterizerState.GetDesc = ID3D11RasterizerState_GetDesc_Hooked;
    g_D3D11HookedVTables._ID3D11Resource.QueryInterface = ID3D11Resource_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11Resource.AddRef = ID3D11Resource_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11Resource.Release = ID3D11Resource_Release_Hooked;
    g_D3D11HookedVTables._ID3D11Resource.GetDevice = ID3D11Resource_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11Resource.GetPrivateData = ID3D11Resource_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11Resource.SetPrivateData = ID3D11Resource_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11Resource.SetPrivateDataInterface = ID3D11Resource_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11Resource.GetType = ID3D11Resource_GetType_Hooked;
    g_D3D11HookedVTables._ID3D11Resource.SetEvictionPriority = ID3D11Resource_SetEvictionPriority_Hooked;
    g_D3D11HookedVTables._ID3D11Resource.GetEvictionPriority = ID3D11Resource_GetEvictionPriority_Hooked;
    g_D3D11HookedVTables._ID3D11Buffer.QueryInterface = ID3D11Buffer_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11Buffer.AddRef = ID3D11Buffer_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11Buffer.Release = ID3D11Buffer_Release_Hooked;
    g_D3D11HookedVTables._ID3D11Buffer.GetDevice = ID3D11Buffer_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11Buffer.GetPrivateData = ID3D11Buffer_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11Buffer.SetPrivateData = ID3D11Buffer_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11Buffer.SetPrivateDataInterface = ID3D11Buffer_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11Buffer.GetType = ID3D11Buffer_GetType_Hooked;
    g_D3D11HookedVTables._ID3D11Buffer.SetEvictionPriority = ID3D11Buffer_SetEvictionPriority_Hooked;
    g_D3D11HookedVTables._ID3D11Buffer.GetEvictionPriority = ID3D11Buffer_GetEvictionPriority_Hooked;
    g_D3D11HookedVTables._ID3D11Buffer.GetDesc = ID3D11Buffer_GetDesc_Hooked;
    g_D3D11HookedVTables._ID3D11Texture1D.QueryInterface = ID3D11Texture1D_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11Texture1D.AddRef = ID3D11Texture1D_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11Texture1D.Release = ID3D11Texture1D_Release_Hooked;
    g_D3D11HookedVTables._ID3D11Texture1D.GetDevice = ID3D11Texture1D_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11Texture1D.GetPrivateData = ID3D11Texture1D_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11Texture1D.SetPrivateData = ID3D11Texture1D_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11Texture1D.SetPrivateDataInterface = ID3D11Texture1D_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11Texture1D.GetType = ID3D11Texture1D_GetType_Hooked;
    g_D3D11HookedVTables._ID3D11Texture1D.SetEvictionPriority = ID3D11Texture1D_SetEvictionPriority_Hooked;
    g_D3D11HookedVTables._ID3D11Texture1D.GetEvictionPriority = ID3D11Texture1D_GetEvictionPriority_Hooked;
    g_D3D11HookedVTables._ID3D11Texture1D.GetDesc = ID3D11Texture1D_GetDesc_Hooked;
    g_D3D11HookedVTables._ID3D11Texture2D.QueryInterface = ID3D11Texture2D_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11Texture2D.AddRef = ID3D11Texture2D_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11Texture2D.Release = ID3D11Texture2D_Release_Hooked;
    g_D3D11HookedVTables._ID3D11Texture2D.GetDevice = ID3D11Texture2D_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11Texture2D.GetPrivateData = ID3D11Texture2D_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11Texture2D.SetPrivateData = ID3D11Texture2D_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11Texture2D.SetPrivateDataInterface = ID3D11Texture2D_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11Texture2D.GetType = ID3D11Texture2D_GetType_Hooked;
    g_D3D11HookedVTables._ID3D11Texture2D.SetEvictionPriority = ID3D11Texture2D_SetEvictionPriority_Hooked;
    g_D3D11HookedVTables._ID3D11Texture2D.GetEvictionPriority = ID3D11Texture2D_GetEvictionPriority_Hooked;
    g_D3D11HookedVTables._ID3D11Texture2D.GetDesc = ID3D11Texture2D_GetDesc_Hooked;
    g_D3D11HookedVTables._ID3D11Texture3D.QueryInterface = ID3D11Texture3D_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11Texture3D.AddRef = ID3D11Texture3D_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11Texture3D.Release = ID3D11Texture3D_Release_Hooked;
    g_D3D11HookedVTables._ID3D11Texture3D.GetDevice = ID3D11Texture3D_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11Texture3D.GetPrivateData = ID3D11Texture3D_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11Texture3D.SetPrivateData = ID3D11Texture3D_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11Texture3D.SetPrivateDataInterface = ID3D11Texture3D_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11Texture3D.GetType = ID3D11Texture3D_GetType_Hooked;
    g_D3D11HookedVTables._ID3D11Texture3D.SetEvictionPriority = ID3D11Texture3D_SetEvictionPriority_Hooked;
    g_D3D11HookedVTables._ID3D11Texture3D.GetEvictionPriority = ID3D11Texture3D_GetEvictionPriority_Hooked;
    g_D3D11HookedVTables._ID3D11Texture3D.GetDesc = ID3D11Texture3D_GetDesc_Hooked;
    g_D3D11HookedVTables._ID3D11View.QueryInterface = ID3D11View_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11View.AddRef = ID3D11View_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11View.Release = ID3D11View_Release_Hooked;
    g_D3D11HookedVTables._ID3D11View.GetDevice = ID3D11View_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11View.GetPrivateData = ID3D11View_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11View.SetPrivateData = ID3D11View_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11View.SetPrivateDataInterface = ID3D11View_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11View.GetResource = ID3D11View_GetResource_Hooked;
    g_D3D11HookedVTables._ID3D11ShaderResourceView.QueryInterface = ID3D11ShaderResourceView_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11ShaderResourceView.AddRef = ID3D11ShaderResourceView_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11ShaderResourceView.Release = ID3D11ShaderResourceView_Release_Hooked;
    g_D3D11HookedVTables._ID3D11ShaderResourceView.GetDevice = ID3D11ShaderResourceView_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11ShaderResourceView.GetPrivateData = ID3D11ShaderResourceView_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11ShaderResourceView.SetPrivateData = ID3D11ShaderResourceView_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11ShaderResourceView.SetPrivateDataInterface = ID3D11ShaderResourceView_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11ShaderResourceView.GetResource = ID3D11ShaderResourceView_GetResource_Hooked;
    g_D3D11HookedVTables._ID3D11ShaderResourceView.GetDesc = ID3D11ShaderResourceView_GetDesc_Hooked;
    g_D3D11HookedVTables._ID3D11RenderTargetView.QueryInterface = ID3D11RenderTargetView_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11RenderTargetView.AddRef = ID3D11RenderTargetView_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11RenderTargetView.Release = ID3D11RenderTargetView_Release_Hooked;
    g_D3D11HookedVTables._ID3D11RenderTargetView.GetDevice = ID3D11RenderTargetView_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11RenderTargetView.GetPrivateData = ID3D11RenderTargetView_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11RenderTargetView.SetPrivateData = ID3D11RenderTargetView_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11RenderTargetView.SetPrivateDataInterface = ID3D11RenderTargetView_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11RenderTargetView.GetResource = ID3D11RenderTargetView_GetResource_Hooked;
    g_D3D11HookedVTables._ID3D11RenderTargetView.GetDesc = ID3D11RenderTargetView_GetDesc_Hooked;
    g_D3D11HookedVTables._ID3D11DepthStencilView.QueryInterface = ID3D11DepthStencilView_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11DepthStencilView.AddRef = ID3D11DepthStencilView_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11DepthStencilView.Release = ID3D11DepthStencilView_Release_Hooked;
    g_D3D11HookedVTables._ID3D11DepthStencilView.GetDevice = ID3D11DepthStencilView_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11DepthStencilView.GetPrivateData = ID3D11DepthStencilView_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11DepthStencilView.SetPrivateData = ID3D11DepthStencilView_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11DepthStencilView.SetPrivateDataInterface = ID3D11DepthStencilView_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11DepthStencilView.GetResource = ID3D11DepthStencilView_GetResource_Hooked;
    g_D3D11HookedVTables._ID3D11DepthStencilView.GetDesc = ID3D11DepthStencilView_GetDesc_Hooked;
    g_D3D11HookedVTables._ID3D11UnorderedAccessView.QueryInterface = ID3D11UnorderedAccessView_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11UnorderedAccessView.AddRef = ID3D11UnorderedAccessView_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11UnorderedAccessView.Release = ID3D11UnorderedAccessView_Release_Hooked;
    g_D3D11HookedVTables._ID3D11UnorderedAccessView.GetDevice = ID3D11UnorderedAccessView_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11UnorderedAccessView.GetPrivateData = ID3D11UnorderedAccessView_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11UnorderedAccessView.SetPrivateData = ID3D11UnorderedAccessView_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11UnorderedAccessView.SetPrivateDataInterface = ID3D11UnorderedAccessView_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11UnorderedAccessView.GetResource = ID3D11UnorderedAccessView_GetResource_Hooked;
    g_D3D11HookedVTables._ID3D11UnorderedAccessView.GetDesc = ID3D11UnorderedAccessView_GetDesc_Hooked;
    g_D3D11HookedVTables._ID3D11VertexShader.QueryInterface = ID3D11VertexShader_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11VertexShader.AddRef = ID3D11VertexShader_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11VertexShader.Release = ID3D11VertexShader_Release_Hooked;
    g_D3D11HookedVTables._ID3D11VertexShader.GetDevice = ID3D11VertexShader_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11VertexShader.GetPrivateData = ID3D11VertexShader_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11VertexShader.SetPrivateData = ID3D11VertexShader_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11VertexShader.SetPrivateDataInterface = ID3D11VertexShader_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11HullShader.QueryInterface = ID3D11HullShader_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11HullShader.AddRef = ID3D11HullShader_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11HullShader.Release = ID3D11HullShader_Release_Hooked;
    g_D3D11HookedVTables._ID3D11HullShader.GetDevice = ID3D11HullShader_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11HullShader.GetPrivateData = ID3D11HullShader_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11HullShader.SetPrivateData = ID3D11HullShader_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11HullShader.SetPrivateDataInterface = ID3D11HullShader_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11DomainShader.QueryInterface = ID3D11DomainShader_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11DomainShader.AddRef = ID3D11DomainShader_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11DomainShader.Release = ID3D11DomainShader_Release_Hooked;
    g_D3D11HookedVTables._ID3D11DomainShader.GetDevice = ID3D11DomainShader_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11DomainShader.GetPrivateData = ID3D11DomainShader_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11DomainShader.SetPrivateData = ID3D11DomainShader_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11DomainShader.SetPrivateDataInterface = ID3D11DomainShader_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11GeometryShader.QueryInterface = ID3D11GeometryShader_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11GeometryShader.AddRef = ID3D11GeometryShader_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11GeometryShader.Release = ID3D11GeometryShader_Release_Hooked;
    g_D3D11HookedVTables._ID3D11GeometryShader.GetDevice = ID3D11GeometryShader_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11GeometryShader.GetPrivateData = ID3D11GeometryShader_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11GeometryShader.SetPrivateData = ID3D11GeometryShader_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11GeometryShader.SetPrivateDataInterface = ID3D11GeometryShader_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11PixelShader.QueryInterface = ID3D11PixelShader_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11PixelShader.AddRef = ID3D11PixelShader_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11PixelShader.Release = ID3D11PixelShader_Release_Hooked;
    g_D3D11HookedVTables._ID3D11PixelShader.GetDevice = ID3D11PixelShader_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11PixelShader.GetPrivateData = ID3D11PixelShader_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11PixelShader.SetPrivateData = ID3D11PixelShader_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11PixelShader.SetPrivateDataInterface = ID3D11PixelShader_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11ComputeShader.QueryInterface = ID3D11ComputeShader_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11ComputeShader.AddRef = ID3D11ComputeShader_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11ComputeShader.Release = ID3D11ComputeShader_Release_Hooked;
    g_D3D11HookedVTables._ID3D11ComputeShader.GetDevice = ID3D11ComputeShader_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11ComputeShader.GetPrivateData = ID3D11ComputeShader_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11ComputeShader.SetPrivateData = ID3D11ComputeShader_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11ComputeShader.SetPrivateDataInterface = ID3D11ComputeShader_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11InputLayout.QueryInterface = ID3D11InputLayout_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11InputLayout.AddRef = ID3D11InputLayout_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11InputLayout.Release = ID3D11InputLayout_Release_Hooked;
    g_D3D11HookedVTables._ID3D11InputLayout.GetDevice = ID3D11InputLayout_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11InputLayout.GetPrivateData = ID3D11InputLayout_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11InputLayout.SetPrivateData = ID3D11InputLayout_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11InputLayout.SetPrivateDataInterface = ID3D11InputLayout_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11SamplerState.QueryInterface = ID3D11SamplerState_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11SamplerState.AddRef = ID3D11SamplerState_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11SamplerState.Release = ID3D11SamplerState_Release_Hooked;
    g_D3D11HookedVTables._ID3D11SamplerState.GetDevice = ID3D11SamplerState_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11SamplerState.GetPrivateData = ID3D11SamplerState_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11SamplerState.SetPrivateData = ID3D11SamplerState_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11SamplerState.SetPrivateDataInterface = ID3D11SamplerState_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11SamplerState.GetDesc = ID3D11SamplerState_GetDesc_Hooked;
    g_D3D11HookedVTables._ID3D11Asynchronous.QueryInterface = ID3D11Asynchronous_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11Asynchronous.AddRef = ID3D11Asynchronous_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11Asynchronous.Release = ID3D11Asynchronous_Release_Hooked;
    g_D3D11HookedVTables._ID3D11Asynchronous.GetDevice = ID3D11Asynchronous_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11Asynchronous.GetPrivateData = ID3D11Asynchronous_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11Asynchronous.SetPrivateData = ID3D11Asynchronous_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11Asynchronous.SetPrivateDataInterface = ID3D11Asynchronous_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11Asynchronous.GetDataSize = ID3D11Asynchronous_GetDataSize_Hooked;
    g_D3D11HookedVTables._ID3D11Query.QueryInterface = ID3D11Query_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11Query.AddRef = ID3D11Query_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11Query.Release = ID3D11Query_Release_Hooked;
    g_D3D11HookedVTables._ID3D11Query.GetDevice = ID3D11Query_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11Query.GetPrivateData = ID3D11Query_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11Query.SetPrivateData = ID3D11Query_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11Query.SetPrivateDataInterface = ID3D11Query_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11Query.GetDataSize = ID3D11Query_GetDataSize_Hooked;
    g_D3D11HookedVTables._ID3D11Query.GetDesc = ID3D11Query_GetDesc_Hooked;
    g_D3D11HookedVTables._ID3D11Predicate.QueryInterface = ID3D11Predicate_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11Predicate.AddRef = ID3D11Predicate_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11Predicate.Release = ID3D11Predicate_Release_Hooked;
    g_D3D11HookedVTables._ID3D11Predicate.GetDevice = ID3D11Predicate_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11Predicate.GetPrivateData = ID3D11Predicate_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11Predicate.SetPrivateData = ID3D11Predicate_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11Predicate.SetPrivateDataInterface = ID3D11Predicate_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11Predicate.GetDataSize = ID3D11Predicate_GetDataSize_Hooked;
    g_D3D11HookedVTables._ID3D11Predicate.GetDesc = ID3D11Predicate_GetDesc_Hooked;
    g_D3D11HookedVTables._ID3D11Counter.QueryInterface = ID3D11Counter_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11Counter.AddRef = ID3D11Counter_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11Counter.Release = ID3D11Counter_Release_Hooked;
    g_D3D11HookedVTables._ID3D11Counter.GetDevice = ID3D11Counter_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11Counter.GetPrivateData = ID3D11Counter_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11Counter.SetPrivateData = ID3D11Counter_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11Counter.SetPrivateDataInterface = ID3D11Counter_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11Counter.GetDataSize = ID3D11Counter_GetDataSize_Hooked;
    g_D3D11HookedVTables._ID3D11Counter.GetDesc = ID3D11Counter_GetDesc_Hooked;
    g_D3D11HookedVTables._ID3D11ClassInstance.QueryInterface = ID3D11ClassInstance_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11ClassInstance.AddRef = ID3D11ClassInstance_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11ClassInstance.Release = ID3D11ClassInstance_Release_Hooked;
    g_D3D11HookedVTables._ID3D11ClassInstance.GetDevice = ID3D11ClassInstance_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11ClassInstance.GetPrivateData = ID3D11ClassInstance_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11ClassInstance.SetPrivateData = ID3D11ClassInstance_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11ClassInstance.SetPrivateDataInterface = ID3D11ClassInstance_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11ClassInstance.GetClassLinkage = ID3D11ClassInstance_GetClassLinkage_Hooked;
    g_D3D11HookedVTables._ID3D11ClassInstance.GetDesc = ID3D11ClassInstance_GetDesc_Hooked;
    g_D3D11HookedVTables._ID3D11ClassInstance.GetInstanceName = ID3D11ClassInstance_GetInstanceName_Hooked;
    g_D3D11HookedVTables._ID3D11ClassInstance.GetTypeName = ID3D11ClassInstance_GetTypeName_Hooked;
    g_D3D11HookedVTables._ID3D11ClassLinkage.QueryInterface = ID3D11ClassLinkage_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11ClassLinkage.AddRef = ID3D11ClassLinkage_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11ClassLinkage.Release = ID3D11ClassLinkage_Release_Hooked;
    g_D3D11HookedVTables._ID3D11ClassLinkage.GetDevice = ID3D11ClassLinkage_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11ClassLinkage.GetPrivateData = ID3D11ClassLinkage_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11ClassLinkage.SetPrivateData = ID3D11ClassLinkage_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11ClassLinkage.SetPrivateDataInterface = ID3D11ClassLinkage_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11ClassLinkage.GetClassInstance = ID3D11ClassLinkage_GetClassInstance_Hooked;
    g_D3D11HookedVTables._ID3D11ClassLinkage.CreateClassInstance = ID3D11ClassLinkage_CreateClassInstance_Hooked;
    g_D3D11HookedVTables._ID3D11CommandList.QueryInterface = ID3D11CommandList_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11CommandList.AddRef = ID3D11CommandList_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11CommandList.Release = ID3D11CommandList_Release_Hooked;
    g_D3D11HookedVTables._ID3D11CommandList.GetDevice = ID3D11CommandList_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11CommandList.GetPrivateData = ID3D11CommandList_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11CommandList.SetPrivateData = ID3D11CommandList_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11CommandList.SetPrivateDataInterface = ID3D11CommandList_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11CommandList.GetContextFlags = ID3D11CommandList_GetContextFlags_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.QueryInterface = ID3D11DeviceContext_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.AddRef = ID3D11DeviceContext_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.Release = ID3D11DeviceContext_Release_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.GetDevice = ID3D11DeviceContext_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.GetPrivateData = ID3D11DeviceContext_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.SetPrivateData = ID3D11DeviceContext_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.SetPrivateDataInterface = ID3D11DeviceContext_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.VSSetConstantBuffers = ID3D11DeviceContext_VSSetConstantBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.PSSetShaderResources = ID3D11DeviceContext_PSSetShaderResources_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.PSSetShader = ID3D11DeviceContext_PSSetShader_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.PSSetSamplers = ID3D11DeviceContext_PSSetSamplers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.VSSetShader = ID3D11DeviceContext_VSSetShader_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.DrawIndexed = ID3D11DeviceContext_DrawIndexed_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.Draw = ID3D11DeviceContext_Draw_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.Map = ID3D11DeviceContext_Map_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.Unmap = ID3D11DeviceContext_Unmap_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.PSSetConstantBuffers = ID3D11DeviceContext_PSSetConstantBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.IASetInputLayout = ID3D11DeviceContext_IASetInputLayout_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.IASetVertexBuffers = ID3D11DeviceContext_IASetVertexBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.IASetIndexBuffer = ID3D11DeviceContext_IASetIndexBuffer_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.DrawIndexedInstanced = ID3D11DeviceContext_DrawIndexedInstanced_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.DrawInstanced = ID3D11DeviceContext_DrawInstanced_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.GSSetConstantBuffers = ID3D11DeviceContext_GSSetConstantBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.GSSetShader = ID3D11DeviceContext_GSSetShader_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.IASetPrimitiveTopology = ID3D11DeviceContext_IASetPrimitiveTopology_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.VSSetShaderResources = ID3D11DeviceContext_VSSetShaderResources_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.VSSetSamplers = ID3D11DeviceContext_VSSetSamplers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.Begin = ID3D11DeviceContext_Begin_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.End = ID3D11DeviceContext_End_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.GetData = ID3D11DeviceContext_GetData_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.SetPredication = ID3D11DeviceContext_SetPredication_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.GSSetShaderResources = ID3D11DeviceContext_GSSetShaderResources_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.GSSetSamplers = ID3D11DeviceContext_GSSetSamplers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.OMSetRenderTargets = ID3D11DeviceContext_OMSetRenderTargets_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.OMSetRenderTargetsAndUnorderedAccessViews = ID3D11DeviceContext_OMSetRenderTargetsAndUnorderedAccessViews_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.OMSetBlendState = ID3D11DeviceContext_OMSetBlendState_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.OMSetDepthStencilState = ID3D11DeviceContext_OMSetDepthStencilState_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.SOSetTargets = ID3D11DeviceContext_SOSetTargets_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.DrawAuto = ID3D11DeviceContext_DrawAuto_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.DrawIndexedInstancedIndirect = ID3D11DeviceContext_DrawIndexedInstancedIndirect_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.DrawInstancedIndirect = ID3D11DeviceContext_DrawInstancedIndirect_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.Dispatch = ID3D11DeviceContext_Dispatch_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.DispatchIndirect = ID3D11DeviceContext_DispatchIndirect_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.RSSetState = ID3D11DeviceContext_RSSetState_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.RSSetViewports = ID3D11DeviceContext_RSSetViewports_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.RSSetScissorRects = ID3D11DeviceContext_RSSetScissorRects_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.CopySubresourceRegion = ID3D11DeviceContext_CopySubresourceRegion_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.CopyResource = ID3D11DeviceContext_CopyResource_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.UpdateSubresource = ID3D11DeviceContext_UpdateSubresource_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.CopyStructureCount = ID3D11DeviceContext_CopyStructureCount_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.ClearRenderTargetView = ID3D11DeviceContext_ClearRenderTargetView_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.ClearUnorderedAccessViewUint = ID3D11DeviceContext_ClearUnorderedAccessViewUint_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.ClearUnorderedAccessViewFloat = ID3D11DeviceContext_ClearUnorderedAccessViewFloat_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.ClearDepthStencilView = ID3D11DeviceContext_ClearDepthStencilView_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.GenerateMips = ID3D11DeviceContext_GenerateMips_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.SetResourceMinLOD = ID3D11DeviceContext_SetResourceMinLOD_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.GetResourceMinLOD = ID3D11DeviceContext_GetResourceMinLOD_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.ResolveSubresource = ID3D11DeviceContext_ResolveSubresource_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.ExecuteCommandList = ID3D11DeviceContext_ExecuteCommandList_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.HSSetShaderResources = ID3D11DeviceContext_HSSetShaderResources_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.HSSetShader = ID3D11DeviceContext_HSSetShader_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.HSSetSamplers = ID3D11DeviceContext_HSSetSamplers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.HSSetConstantBuffers = ID3D11DeviceContext_HSSetConstantBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.DSSetShaderResources = ID3D11DeviceContext_DSSetShaderResources_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.DSSetShader = ID3D11DeviceContext_DSSetShader_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.DSSetSamplers = ID3D11DeviceContext_DSSetSamplers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.DSSetConstantBuffers = ID3D11DeviceContext_DSSetConstantBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.CSSetShaderResources = ID3D11DeviceContext_CSSetShaderResources_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.CSSetUnorderedAccessViews = ID3D11DeviceContext_CSSetUnorderedAccessViews_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.CSSetShader = ID3D11DeviceContext_CSSetShader_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.CSSetSamplers = ID3D11DeviceContext_CSSetSamplers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.CSSetConstantBuffers = ID3D11DeviceContext_CSSetConstantBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.VSGetConstantBuffers = ID3D11DeviceContext_VSGetConstantBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.PSGetShaderResources = ID3D11DeviceContext_PSGetShaderResources_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.PSGetShader = ID3D11DeviceContext_PSGetShader_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.PSGetSamplers = ID3D11DeviceContext_PSGetSamplers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.VSGetShader = ID3D11DeviceContext_VSGetShader_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.PSGetConstantBuffers = ID3D11DeviceContext_PSGetConstantBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.IAGetInputLayout = ID3D11DeviceContext_IAGetInputLayout_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.IAGetVertexBuffers = ID3D11DeviceContext_IAGetVertexBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.IAGetIndexBuffer = ID3D11DeviceContext_IAGetIndexBuffer_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.GSGetConstantBuffers = ID3D11DeviceContext_GSGetConstantBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.GSGetShader = ID3D11DeviceContext_GSGetShader_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.IAGetPrimitiveTopology = ID3D11DeviceContext_IAGetPrimitiveTopology_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.VSGetShaderResources = ID3D11DeviceContext_VSGetShaderResources_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.VSGetSamplers = ID3D11DeviceContext_VSGetSamplers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.GetPredication = ID3D11DeviceContext_GetPredication_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.GSGetShaderResources = ID3D11DeviceContext_GSGetShaderResources_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.GSGetSamplers = ID3D11DeviceContext_GSGetSamplers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.OMGetRenderTargets = ID3D11DeviceContext_OMGetRenderTargets_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.OMGetRenderTargetsAndUnorderedAccessViews = ID3D11DeviceContext_OMGetRenderTargetsAndUnorderedAccessViews_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.OMGetBlendState = ID3D11DeviceContext_OMGetBlendState_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.OMGetDepthStencilState = ID3D11DeviceContext_OMGetDepthStencilState_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.SOGetTargets = ID3D11DeviceContext_SOGetTargets_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.RSGetState = ID3D11DeviceContext_RSGetState_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.RSGetViewports = ID3D11DeviceContext_RSGetViewports_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.RSGetScissorRects = ID3D11DeviceContext_RSGetScissorRects_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.HSGetShaderResources = ID3D11DeviceContext_HSGetShaderResources_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.HSGetShader = ID3D11DeviceContext_HSGetShader_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.HSGetSamplers = ID3D11DeviceContext_HSGetSamplers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.HSGetConstantBuffers = ID3D11DeviceContext_HSGetConstantBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.DSGetShaderResources = ID3D11DeviceContext_DSGetShaderResources_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.DSGetShader = ID3D11DeviceContext_DSGetShader_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.DSGetSamplers = ID3D11DeviceContext_DSGetSamplers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.DSGetConstantBuffers = ID3D11DeviceContext_DSGetConstantBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.CSGetShaderResources = ID3D11DeviceContext_CSGetShaderResources_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.CSGetUnorderedAccessViews = ID3D11DeviceContext_CSGetUnorderedAccessViews_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.CSGetShader = ID3D11DeviceContext_CSGetShader_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.CSGetSamplers = ID3D11DeviceContext_CSGetSamplers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.CSGetConstantBuffers = ID3D11DeviceContext_CSGetConstantBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.ClearState = ID3D11DeviceContext_ClearState_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.Flush = ID3D11DeviceContext_Flush_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.GetType = ID3D11DeviceContext_GetType_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.GetContextFlags = ID3D11DeviceContext_GetContextFlags_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext.FinishCommandList = ID3D11DeviceContext_FinishCommandList_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDecoder.QueryInterface = ID3D11VideoDecoder_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDecoder.AddRef = ID3D11VideoDecoder_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDecoder.Release = ID3D11VideoDecoder_Release_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDecoder.GetDevice = ID3D11VideoDecoder_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDecoder.GetPrivateData = ID3D11VideoDecoder_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDecoder.SetPrivateData = ID3D11VideoDecoder_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDecoder.SetPrivateDataInterface = ID3D11VideoDecoder_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDecoder.GetCreationParameters = ID3D11VideoDecoder_GetCreationParameters_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDecoder.GetDriverHandle = ID3D11VideoDecoder_GetDriverHandle_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorEnumerator.QueryInterface = ID3D11VideoProcessorEnumerator_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorEnumerator.AddRef = ID3D11VideoProcessorEnumerator_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorEnumerator.Release = ID3D11VideoProcessorEnumerator_Release_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorEnumerator.GetDevice = ID3D11VideoProcessorEnumerator_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorEnumerator.GetPrivateData = ID3D11VideoProcessorEnumerator_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorEnumerator.SetPrivateData = ID3D11VideoProcessorEnumerator_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorEnumerator.SetPrivateDataInterface = ID3D11VideoProcessorEnumerator_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorEnumerator.GetVideoProcessorContentDesc = ID3D11VideoProcessorEnumerator_GetVideoProcessorContentDesc_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorEnumerator.CheckVideoProcessorFormat = ID3D11VideoProcessorEnumerator_CheckVideoProcessorFormat_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorEnumerator.GetVideoProcessorCaps = ID3D11VideoProcessorEnumerator_GetVideoProcessorCaps_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorEnumerator.GetVideoProcessorRateConversionCaps = ID3D11VideoProcessorEnumerator_GetVideoProcessorRateConversionCaps_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorEnumerator.GetVideoProcessorCustomRate = ID3D11VideoProcessorEnumerator_GetVideoProcessorCustomRate_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorEnumerator.GetVideoProcessorFilterRange = ID3D11VideoProcessorEnumerator_GetVideoProcessorFilterRange_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessor.QueryInterface = ID3D11VideoProcessor_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessor.AddRef = ID3D11VideoProcessor_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessor.Release = ID3D11VideoProcessor_Release_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessor.GetDevice = ID3D11VideoProcessor_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessor.GetPrivateData = ID3D11VideoProcessor_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessor.SetPrivateData = ID3D11VideoProcessor_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessor.SetPrivateDataInterface = ID3D11VideoProcessor_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessor.GetContentDesc = ID3D11VideoProcessor_GetContentDesc_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessor.GetRateConversionCaps = ID3D11VideoProcessor_GetRateConversionCaps_Hooked;
    g_D3D11HookedVTables._ID3D11AuthenticatedChannel.QueryInterface = ID3D11AuthenticatedChannel_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11AuthenticatedChannel.AddRef = ID3D11AuthenticatedChannel_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11AuthenticatedChannel.Release = ID3D11AuthenticatedChannel_Release_Hooked;
    g_D3D11HookedVTables._ID3D11AuthenticatedChannel.GetDevice = ID3D11AuthenticatedChannel_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11AuthenticatedChannel.GetPrivateData = ID3D11AuthenticatedChannel_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11AuthenticatedChannel.SetPrivateData = ID3D11AuthenticatedChannel_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11AuthenticatedChannel.SetPrivateDataInterface = ID3D11AuthenticatedChannel_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11AuthenticatedChannel.GetCertificateSize = ID3D11AuthenticatedChannel_GetCertificateSize_Hooked;
    g_D3D11HookedVTables._ID3D11AuthenticatedChannel.GetCertificate = ID3D11AuthenticatedChannel_GetCertificate_Hooked;
    g_D3D11HookedVTables._ID3D11AuthenticatedChannel.GetChannelHandle = ID3D11AuthenticatedChannel_GetChannelHandle_Hooked;
    g_D3D11HookedVTables._ID3D11CryptoSession.QueryInterface = ID3D11CryptoSession_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11CryptoSession.AddRef = ID3D11CryptoSession_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11CryptoSession.Release = ID3D11CryptoSession_Release_Hooked;
    g_D3D11HookedVTables._ID3D11CryptoSession.GetDevice = ID3D11CryptoSession_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11CryptoSession.GetPrivateData = ID3D11CryptoSession_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11CryptoSession.SetPrivateData = ID3D11CryptoSession_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11CryptoSession.SetPrivateDataInterface = ID3D11CryptoSession_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11CryptoSession.GetCryptoType = ID3D11CryptoSession_GetCryptoType_Hooked;
    g_D3D11HookedVTables._ID3D11CryptoSession.GetDecoderProfile = ID3D11CryptoSession_GetDecoderProfile_Hooked;
    g_D3D11HookedVTables._ID3D11CryptoSession.GetCertificateSize = ID3D11CryptoSession_GetCertificateSize_Hooked;
    g_D3D11HookedVTables._ID3D11CryptoSession.GetCertificate = ID3D11CryptoSession_GetCertificate_Hooked;
    g_D3D11HookedVTables._ID3D11CryptoSession.GetCryptoSessionHandle = ID3D11CryptoSession_GetCryptoSessionHandle_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDecoderOutputView.QueryInterface = ID3D11VideoDecoderOutputView_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDecoderOutputView.AddRef = ID3D11VideoDecoderOutputView_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDecoderOutputView.Release = ID3D11VideoDecoderOutputView_Release_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDecoderOutputView.GetDevice = ID3D11VideoDecoderOutputView_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDecoderOutputView.GetPrivateData = ID3D11VideoDecoderOutputView_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDecoderOutputView.SetPrivateData = ID3D11VideoDecoderOutputView_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDecoderOutputView.SetPrivateDataInterface = ID3D11VideoDecoderOutputView_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDecoderOutputView.GetResource = ID3D11VideoDecoderOutputView_GetResource_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDecoderOutputView.GetDesc = ID3D11VideoDecoderOutputView_GetDesc_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorInputView.QueryInterface = ID3D11VideoProcessorInputView_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorInputView.AddRef = ID3D11VideoProcessorInputView_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorInputView.Release = ID3D11VideoProcessorInputView_Release_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorInputView.GetDevice = ID3D11VideoProcessorInputView_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorInputView.GetPrivateData = ID3D11VideoProcessorInputView_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorInputView.SetPrivateData = ID3D11VideoProcessorInputView_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorInputView.SetPrivateDataInterface = ID3D11VideoProcessorInputView_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorInputView.GetResource = ID3D11VideoProcessorInputView_GetResource_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorInputView.GetDesc = ID3D11VideoProcessorInputView_GetDesc_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorOutputView.QueryInterface = ID3D11VideoProcessorOutputView_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorOutputView.AddRef = ID3D11VideoProcessorOutputView_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorOutputView.Release = ID3D11VideoProcessorOutputView_Release_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorOutputView.GetDevice = ID3D11VideoProcessorOutputView_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorOutputView.GetPrivateData = ID3D11VideoProcessorOutputView_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorOutputView.SetPrivateData = ID3D11VideoProcessorOutputView_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorOutputView.SetPrivateDataInterface = ID3D11VideoProcessorOutputView_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorOutputView.GetResource = ID3D11VideoProcessorOutputView_GetResource_Hooked;
    g_D3D11HookedVTables._ID3D11VideoProcessorOutputView.GetDesc = ID3D11VideoProcessorOutputView_GetDesc_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.QueryInterface = ID3D11VideoContext_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.AddRef = ID3D11VideoContext_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.Release = ID3D11VideoContext_Release_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.GetDevice = ID3D11VideoContext_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.GetPrivateData = ID3D11VideoContext_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.SetPrivateData = ID3D11VideoContext_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.SetPrivateDataInterface = ID3D11VideoContext_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.GetDecoderBuffer = ID3D11VideoContext_GetDecoderBuffer_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.ReleaseDecoderBuffer = ID3D11VideoContext_ReleaseDecoderBuffer_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.DecoderBeginFrame = ID3D11VideoContext_DecoderBeginFrame_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.DecoderEndFrame = ID3D11VideoContext_DecoderEndFrame_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.SubmitDecoderBuffers = ID3D11VideoContext_SubmitDecoderBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.DecoderExtension = ID3D11VideoContext_DecoderExtension_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorSetOutputTargetRect = ID3D11VideoContext_VideoProcessorSetOutputTargetRect_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorSetOutputBackgroundColor = ID3D11VideoContext_VideoProcessorSetOutputBackgroundColor_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorSetOutputColorSpace = ID3D11VideoContext_VideoProcessorSetOutputColorSpace_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorSetOutputAlphaFillMode = ID3D11VideoContext_VideoProcessorSetOutputAlphaFillMode_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorSetOutputConstriction = ID3D11VideoContext_VideoProcessorSetOutputConstriction_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorSetOutputStereoMode = ID3D11VideoContext_VideoProcessorSetOutputStereoMode_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorSetOutputExtension = ID3D11VideoContext_VideoProcessorSetOutputExtension_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorGetOutputTargetRect = ID3D11VideoContext_VideoProcessorGetOutputTargetRect_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorGetOutputBackgroundColor = ID3D11VideoContext_VideoProcessorGetOutputBackgroundColor_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorGetOutputColorSpace = ID3D11VideoContext_VideoProcessorGetOutputColorSpace_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorGetOutputAlphaFillMode = ID3D11VideoContext_VideoProcessorGetOutputAlphaFillMode_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorGetOutputConstriction = ID3D11VideoContext_VideoProcessorGetOutputConstriction_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorGetOutputStereoMode = ID3D11VideoContext_VideoProcessorGetOutputStereoMode_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorGetOutputExtension = ID3D11VideoContext_VideoProcessorGetOutputExtension_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorSetStreamFrameFormat = ID3D11VideoContext_VideoProcessorSetStreamFrameFormat_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorSetStreamColorSpace = ID3D11VideoContext_VideoProcessorSetStreamColorSpace_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorSetStreamOutputRate = ID3D11VideoContext_VideoProcessorSetStreamOutputRate_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorSetStreamSourceRect = ID3D11VideoContext_VideoProcessorSetStreamSourceRect_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorSetStreamDestRect = ID3D11VideoContext_VideoProcessorSetStreamDestRect_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorSetStreamAlpha = ID3D11VideoContext_VideoProcessorSetStreamAlpha_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorSetStreamPalette = ID3D11VideoContext_VideoProcessorSetStreamPalette_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorSetStreamPixelAspectRatio = ID3D11VideoContext_VideoProcessorSetStreamPixelAspectRatio_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorSetStreamLumaKey = ID3D11VideoContext_VideoProcessorSetStreamLumaKey_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorSetStreamStereoFormat = ID3D11VideoContext_VideoProcessorSetStreamStereoFormat_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorSetStreamAutoProcessingMode = ID3D11VideoContext_VideoProcessorSetStreamAutoProcessingMode_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorSetStreamFilter = ID3D11VideoContext_VideoProcessorSetStreamFilter_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorSetStreamExtension = ID3D11VideoContext_VideoProcessorSetStreamExtension_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorGetStreamFrameFormat = ID3D11VideoContext_VideoProcessorGetStreamFrameFormat_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorGetStreamColorSpace = ID3D11VideoContext_VideoProcessorGetStreamColorSpace_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorGetStreamOutputRate = ID3D11VideoContext_VideoProcessorGetStreamOutputRate_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorGetStreamSourceRect = ID3D11VideoContext_VideoProcessorGetStreamSourceRect_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorGetStreamDestRect = ID3D11VideoContext_VideoProcessorGetStreamDestRect_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorGetStreamAlpha = ID3D11VideoContext_VideoProcessorGetStreamAlpha_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorGetStreamPalette = ID3D11VideoContext_VideoProcessorGetStreamPalette_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorGetStreamPixelAspectRatio = ID3D11VideoContext_VideoProcessorGetStreamPixelAspectRatio_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorGetStreamLumaKey = ID3D11VideoContext_VideoProcessorGetStreamLumaKey_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorGetStreamStereoFormat = ID3D11VideoContext_VideoProcessorGetStreamStereoFormat_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorGetStreamAutoProcessingMode = ID3D11VideoContext_VideoProcessorGetStreamAutoProcessingMode_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorGetStreamFilter = ID3D11VideoContext_VideoProcessorGetStreamFilter_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorGetStreamExtension = ID3D11VideoContext_VideoProcessorGetStreamExtension_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorBlt = ID3D11VideoContext_VideoProcessorBlt_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.NegotiateCryptoSessionKeyExchange = ID3D11VideoContext_NegotiateCryptoSessionKeyExchange_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.EncryptionBlt = ID3D11VideoContext_EncryptionBlt_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.DecryptionBlt = ID3D11VideoContext_DecryptionBlt_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.StartSessionKeyRefresh = ID3D11VideoContext_StartSessionKeyRefresh_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.FinishSessionKeyRefresh = ID3D11VideoContext_FinishSessionKeyRefresh_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.GetEncryptionBltKey = ID3D11VideoContext_GetEncryptionBltKey_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.NegotiateAuthenticatedChannelKeyExchange = ID3D11VideoContext_NegotiateAuthenticatedChannelKeyExchange_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.QueryAuthenticatedChannel = ID3D11VideoContext_QueryAuthenticatedChannel_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.ConfigureAuthenticatedChannel = ID3D11VideoContext_ConfigureAuthenticatedChannel_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorSetStreamRotation = ID3D11VideoContext_VideoProcessorSetStreamRotation_Hooked;
    g_D3D11HookedVTables._ID3D11VideoContext.VideoProcessorGetStreamRotation = ID3D11VideoContext_VideoProcessorGetStreamRotation_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDevice.QueryInterface = ID3D11VideoDevice_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDevice.AddRef = ID3D11VideoDevice_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDevice.Release = ID3D11VideoDevice_Release_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDevice.CreateVideoDecoder = ID3D11VideoDevice_CreateVideoDecoder_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDevice.CreateVideoProcessor = ID3D11VideoDevice_CreateVideoProcessor_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDevice.CreateAuthenticatedChannel = ID3D11VideoDevice_CreateAuthenticatedChannel_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDevice.CreateCryptoSession = ID3D11VideoDevice_CreateCryptoSession_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDevice.CreateVideoDecoderOutputView = ID3D11VideoDevice_CreateVideoDecoderOutputView_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDevice.CreateVideoProcessorInputView = ID3D11VideoDevice_CreateVideoProcessorInputView_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDevice.CreateVideoProcessorOutputView = ID3D11VideoDevice_CreateVideoProcessorOutputView_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDevice.CreateVideoProcessorEnumerator = ID3D11VideoDevice_CreateVideoProcessorEnumerator_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDevice.GetVideoDecoderProfileCount = ID3D11VideoDevice_GetVideoDecoderProfileCount_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDevice.GetVideoDecoderProfile = ID3D11VideoDevice_GetVideoDecoderProfile_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDevice.CheckVideoDecoderFormat = ID3D11VideoDevice_CheckVideoDecoderFormat_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDevice.GetVideoDecoderConfigCount = ID3D11VideoDevice_GetVideoDecoderConfigCount_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDevice.GetVideoDecoderConfig = ID3D11VideoDevice_GetVideoDecoderConfig_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDevice.GetContentProtectionCaps = ID3D11VideoDevice_GetContentProtectionCaps_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDevice.CheckCryptoKeyExchange = ID3D11VideoDevice_CheckCryptoKeyExchange_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDevice.SetPrivateData = ID3D11VideoDevice_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11VideoDevice.SetPrivateDataInterface = ID3D11VideoDevice_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11Device.QueryInterface = ID3D11Device_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11Device.AddRef = ID3D11Device_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11Device.Release = ID3D11Device_Release_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CreateBuffer = ID3D11Device_CreateBuffer_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CreateTexture1D = ID3D11Device_CreateTexture1D_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CreateTexture2D = ID3D11Device_CreateTexture2D_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CreateTexture3D = ID3D11Device_CreateTexture3D_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CreateShaderResourceView = ID3D11Device_CreateShaderResourceView_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CreateUnorderedAccessView = ID3D11Device_CreateUnorderedAccessView_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CreateRenderTargetView = ID3D11Device_CreateRenderTargetView_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CreateDepthStencilView = ID3D11Device_CreateDepthStencilView_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CreateInputLayout = ID3D11Device_CreateInputLayout_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CreateVertexShader = ID3D11Device_CreateVertexShader_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CreateGeometryShader = ID3D11Device_CreateGeometryShader_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CreateGeometryShaderWithStreamOutput = ID3D11Device_CreateGeometryShaderWithStreamOutput_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CreatePixelShader = ID3D11Device_CreatePixelShader_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CreateHullShader = ID3D11Device_CreateHullShader_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CreateDomainShader = ID3D11Device_CreateDomainShader_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CreateComputeShader = ID3D11Device_CreateComputeShader_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CreateClassLinkage = ID3D11Device_CreateClassLinkage_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CreateBlendState = ID3D11Device_CreateBlendState_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CreateDepthStencilState = ID3D11Device_CreateDepthStencilState_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CreateRasterizerState = ID3D11Device_CreateRasterizerState_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CreateSamplerState = ID3D11Device_CreateSamplerState_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CreateQuery = ID3D11Device_CreateQuery_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CreatePredicate = ID3D11Device_CreatePredicate_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CreateCounter = ID3D11Device_CreateCounter_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CreateDeferredContext = ID3D11Device_CreateDeferredContext_Hooked;
    g_D3D11HookedVTables._ID3D11Device.OpenSharedResource = ID3D11Device_OpenSharedResource_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CheckFormatSupport = ID3D11Device_CheckFormatSupport_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CheckMultisampleQualityLevels = ID3D11Device_CheckMultisampleQualityLevels_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CheckCounterInfo = ID3D11Device_CheckCounterInfo_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CheckCounter = ID3D11Device_CheckCounter_Hooked;
    g_D3D11HookedVTables._ID3D11Device.CheckFeatureSupport = ID3D11Device_CheckFeatureSupport_Hooked;
    g_D3D11HookedVTables._ID3D11Device.GetPrivateData = ID3D11Device_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11Device.SetPrivateData = ID3D11Device_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11Device.SetPrivateDataInterface = ID3D11Device_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11Device.GetFeatureLevel = ID3D11Device_GetFeatureLevel_Hooked;
    g_D3D11HookedVTables._ID3D11Device.GetCreationFlags = ID3D11Device_GetCreationFlags_Hooked;
    g_D3D11HookedVTables._ID3D11Device.GetDeviceRemovedReason = ID3D11Device_GetDeviceRemovedReason_Hooked;
    g_D3D11HookedVTables._ID3D11Device.GetImmediateContext = ID3D11Device_GetImmediateContext_Hooked;
    g_D3D11HookedVTables._ID3D11Device.SetExceptionMode = ID3D11Device_SetExceptionMode_Hooked;
    g_D3D11HookedVTables._ID3D11Device.GetExceptionMode = ID3D11Device_GetExceptionMode_Hooked;
    g_D3D11HookedVTables._ID3D11BlendState1.QueryInterface = ID3D11BlendState1_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11BlendState1.AddRef = ID3D11BlendState1_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11BlendState1.Release = ID3D11BlendState1_Release_Hooked;
    g_D3D11HookedVTables._ID3D11BlendState1.GetDevice = ID3D11BlendState1_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11BlendState1.GetPrivateData = ID3D11BlendState1_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11BlendState1.SetPrivateData = ID3D11BlendState1_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11BlendState1.SetPrivateDataInterface = ID3D11BlendState1_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11BlendState1.GetDesc = ID3D11BlendState1_GetDesc_Hooked;
    g_D3D11HookedVTables._ID3D11BlendState1.GetDesc1 = ID3D11BlendState1_GetDesc1_Hooked;
    g_D3D11HookedVTables._ID3D11RasterizerState1.QueryInterface = ID3D11RasterizerState1_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11RasterizerState1.AddRef = ID3D11RasterizerState1_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11RasterizerState1.Release = ID3D11RasterizerState1_Release_Hooked;
    g_D3D11HookedVTables._ID3D11RasterizerState1.GetDevice = ID3D11RasterizerState1_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11RasterizerState1.GetPrivateData = ID3D11RasterizerState1_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11RasterizerState1.SetPrivateData = ID3D11RasterizerState1_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11RasterizerState1.SetPrivateDataInterface = ID3D11RasterizerState1_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11RasterizerState1.GetDesc = ID3D11RasterizerState1_GetDesc_Hooked;
    g_D3D11HookedVTables._ID3D11RasterizerState1.GetDesc1 = ID3D11RasterizerState1_GetDesc1_Hooked;
    g_D3D11HookedVTables._ID3DDeviceContextState.QueryInterface = ID3DDeviceContextState_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3DDeviceContextState.AddRef = ID3DDeviceContextState_AddRef_Hooked;
    g_D3D11HookedVTables._ID3DDeviceContextState.Release = ID3DDeviceContextState_Release_Hooked;
    g_D3D11HookedVTables._ID3DDeviceContextState.GetDevice = ID3DDeviceContextState_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3DDeviceContextState.GetPrivateData = ID3DDeviceContextState_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3DDeviceContextState.SetPrivateData = ID3DDeviceContextState_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3DDeviceContextState.SetPrivateDataInterface = ID3DDeviceContextState_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.QueryInterface = ID3D11DeviceContext1_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.AddRef = ID3D11DeviceContext1_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.Release = ID3D11DeviceContext1_Release_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.GetDevice = ID3D11DeviceContext1_GetDevice_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.GetPrivateData = ID3D11DeviceContext1_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.SetPrivateData = ID3D11DeviceContext1_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.SetPrivateDataInterface = ID3D11DeviceContext1_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.VSSetConstantBuffers = ID3D11DeviceContext1_VSSetConstantBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.PSSetShaderResources = ID3D11DeviceContext1_PSSetShaderResources_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.PSSetShader = ID3D11DeviceContext1_PSSetShader_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.PSSetSamplers = ID3D11DeviceContext1_PSSetSamplers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.VSSetShader = ID3D11DeviceContext1_VSSetShader_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.DrawIndexed = ID3D11DeviceContext1_DrawIndexed_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.Draw = ID3D11DeviceContext1_Draw_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.Map = ID3D11DeviceContext1_Map_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.Unmap = ID3D11DeviceContext1_Unmap_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.PSSetConstantBuffers = ID3D11DeviceContext1_PSSetConstantBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.IASetInputLayout = ID3D11DeviceContext1_IASetInputLayout_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.IASetVertexBuffers = ID3D11DeviceContext1_IASetVertexBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.IASetIndexBuffer = ID3D11DeviceContext1_IASetIndexBuffer_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.DrawIndexedInstanced = ID3D11DeviceContext1_DrawIndexedInstanced_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.DrawInstanced = ID3D11DeviceContext1_DrawInstanced_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.GSSetConstantBuffers = ID3D11DeviceContext1_GSSetConstantBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.GSSetShader = ID3D11DeviceContext1_GSSetShader_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.IASetPrimitiveTopology = ID3D11DeviceContext1_IASetPrimitiveTopology_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.VSSetShaderResources = ID3D11DeviceContext1_VSSetShaderResources_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.VSSetSamplers = ID3D11DeviceContext1_VSSetSamplers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.Begin = ID3D11DeviceContext1_Begin_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.End = ID3D11DeviceContext1_End_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.GetData = ID3D11DeviceContext1_GetData_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.SetPredication = ID3D11DeviceContext1_SetPredication_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.GSSetShaderResources = ID3D11DeviceContext1_GSSetShaderResources_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.GSSetSamplers = ID3D11DeviceContext1_GSSetSamplers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.OMSetRenderTargets = ID3D11DeviceContext1_OMSetRenderTargets_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.OMSetRenderTargetsAndUnorderedAccessViews = ID3D11DeviceContext1_OMSetRenderTargetsAndUnorderedAccessViews_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.OMSetBlendState = ID3D11DeviceContext1_OMSetBlendState_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.OMSetDepthStencilState = ID3D11DeviceContext1_OMSetDepthStencilState_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.SOSetTargets = ID3D11DeviceContext1_SOSetTargets_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.DrawAuto = ID3D11DeviceContext1_DrawAuto_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.DrawIndexedInstancedIndirect = ID3D11DeviceContext1_DrawIndexedInstancedIndirect_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.DrawInstancedIndirect = ID3D11DeviceContext1_DrawInstancedIndirect_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.Dispatch = ID3D11DeviceContext1_Dispatch_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.DispatchIndirect = ID3D11DeviceContext1_DispatchIndirect_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.RSSetState = ID3D11DeviceContext1_RSSetState_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.RSSetViewports = ID3D11DeviceContext1_RSSetViewports_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.RSSetScissorRects = ID3D11DeviceContext1_RSSetScissorRects_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.CopySubresourceRegion = ID3D11DeviceContext1_CopySubresourceRegion_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.CopyResource = ID3D11DeviceContext1_CopyResource_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.UpdateSubresource = ID3D11DeviceContext1_UpdateSubresource_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.CopyStructureCount = ID3D11DeviceContext1_CopyStructureCount_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.ClearRenderTargetView = ID3D11DeviceContext1_ClearRenderTargetView_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.ClearUnorderedAccessViewUint = ID3D11DeviceContext1_ClearUnorderedAccessViewUint_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.ClearUnorderedAccessViewFloat = ID3D11DeviceContext1_ClearUnorderedAccessViewFloat_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.ClearDepthStencilView = ID3D11DeviceContext1_ClearDepthStencilView_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.GenerateMips = ID3D11DeviceContext1_GenerateMips_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.SetResourceMinLOD = ID3D11DeviceContext1_SetResourceMinLOD_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.GetResourceMinLOD = ID3D11DeviceContext1_GetResourceMinLOD_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.ResolveSubresource = ID3D11DeviceContext1_ResolveSubresource_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.ExecuteCommandList = ID3D11DeviceContext1_ExecuteCommandList_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.HSSetShaderResources = ID3D11DeviceContext1_HSSetShaderResources_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.HSSetShader = ID3D11DeviceContext1_HSSetShader_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.HSSetSamplers = ID3D11DeviceContext1_HSSetSamplers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.HSSetConstantBuffers = ID3D11DeviceContext1_HSSetConstantBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.DSSetShaderResources = ID3D11DeviceContext1_DSSetShaderResources_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.DSSetShader = ID3D11DeviceContext1_DSSetShader_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.DSSetSamplers = ID3D11DeviceContext1_DSSetSamplers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.DSSetConstantBuffers = ID3D11DeviceContext1_DSSetConstantBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.CSSetShaderResources = ID3D11DeviceContext1_CSSetShaderResources_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.CSSetUnorderedAccessViews = ID3D11DeviceContext1_CSSetUnorderedAccessViews_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.CSSetShader = ID3D11DeviceContext1_CSSetShader_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.CSSetSamplers = ID3D11DeviceContext1_CSSetSamplers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.CSSetConstantBuffers = ID3D11DeviceContext1_CSSetConstantBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.VSGetConstantBuffers = ID3D11DeviceContext1_VSGetConstantBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.PSGetShaderResources = ID3D11DeviceContext1_PSGetShaderResources_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.PSGetShader = ID3D11DeviceContext1_PSGetShader_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.PSGetSamplers = ID3D11DeviceContext1_PSGetSamplers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.VSGetShader = ID3D11DeviceContext1_VSGetShader_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.PSGetConstantBuffers = ID3D11DeviceContext1_PSGetConstantBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.IAGetInputLayout = ID3D11DeviceContext1_IAGetInputLayout_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.IAGetVertexBuffers = ID3D11DeviceContext1_IAGetVertexBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.IAGetIndexBuffer = ID3D11DeviceContext1_IAGetIndexBuffer_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.GSGetConstantBuffers = ID3D11DeviceContext1_GSGetConstantBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.GSGetShader = ID3D11DeviceContext1_GSGetShader_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.IAGetPrimitiveTopology = ID3D11DeviceContext1_IAGetPrimitiveTopology_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.VSGetShaderResources = ID3D11DeviceContext1_VSGetShaderResources_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.VSGetSamplers = ID3D11DeviceContext1_VSGetSamplers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.GetPredication = ID3D11DeviceContext1_GetPredication_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.GSGetShaderResources = ID3D11DeviceContext1_GSGetShaderResources_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.GSGetSamplers = ID3D11DeviceContext1_GSGetSamplers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.OMGetRenderTargets = ID3D11DeviceContext1_OMGetRenderTargets_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.OMGetRenderTargetsAndUnorderedAccessViews = ID3D11DeviceContext1_OMGetRenderTargetsAndUnorderedAccessViews_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.OMGetBlendState = ID3D11DeviceContext1_OMGetBlendState_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.OMGetDepthStencilState = ID3D11DeviceContext1_OMGetDepthStencilState_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.SOGetTargets = ID3D11DeviceContext1_SOGetTargets_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.RSGetState = ID3D11DeviceContext1_RSGetState_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.RSGetViewports = ID3D11DeviceContext1_RSGetViewports_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.RSGetScissorRects = ID3D11DeviceContext1_RSGetScissorRects_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.HSGetShaderResources = ID3D11DeviceContext1_HSGetShaderResources_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.HSGetShader = ID3D11DeviceContext1_HSGetShader_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.HSGetSamplers = ID3D11DeviceContext1_HSGetSamplers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.HSGetConstantBuffers = ID3D11DeviceContext1_HSGetConstantBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.DSGetShaderResources = ID3D11DeviceContext1_DSGetShaderResources_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.DSGetShader = ID3D11DeviceContext1_DSGetShader_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.DSGetSamplers = ID3D11DeviceContext1_DSGetSamplers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.DSGetConstantBuffers = ID3D11DeviceContext1_DSGetConstantBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.CSGetShaderResources = ID3D11DeviceContext1_CSGetShaderResources_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.CSGetUnorderedAccessViews = ID3D11DeviceContext1_CSGetUnorderedAccessViews_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.CSGetShader = ID3D11DeviceContext1_CSGetShader_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.CSGetSamplers = ID3D11DeviceContext1_CSGetSamplers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.CSGetConstantBuffers = ID3D11DeviceContext1_CSGetConstantBuffers_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.ClearState = ID3D11DeviceContext1_ClearState_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.Flush = ID3D11DeviceContext1_Flush_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.GetType = ID3D11DeviceContext1_GetType_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.GetContextFlags = ID3D11DeviceContext1_GetContextFlags_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.FinishCommandList = ID3D11DeviceContext1_FinishCommandList_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.CopySubresourceRegion1 = ID3D11DeviceContext1_CopySubresourceRegion1_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.UpdateSubresource1 = ID3D11DeviceContext1_UpdateSubresource1_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.DiscardResource = ID3D11DeviceContext1_DiscardResource_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.DiscardView = ID3D11DeviceContext1_DiscardView_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.VSSetConstantBuffers1 = ID3D11DeviceContext1_VSSetConstantBuffers1_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.HSSetConstantBuffers1 = ID3D11DeviceContext1_HSSetConstantBuffers1_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.DSSetConstantBuffers1 = ID3D11DeviceContext1_DSSetConstantBuffers1_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.GSSetConstantBuffers1 = ID3D11DeviceContext1_GSSetConstantBuffers1_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.PSSetConstantBuffers1 = ID3D11DeviceContext1_PSSetConstantBuffers1_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.CSSetConstantBuffers1 = ID3D11DeviceContext1_CSSetConstantBuffers1_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.VSGetConstantBuffers1 = ID3D11DeviceContext1_VSGetConstantBuffers1_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.HSGetConstantBuffers1 = ID3D11DeviceContext1_HSGetConstantBuffers1_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.DSGetConstantBuffers1 = ID3D11DeviceContext1_DSGetConstantBuffers1_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.GSGetConstantBuffers1 = ID3D11DeviceContext1_GSGetConstantBuffers1_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.PSGetConstantBuffers1 = ID3D11DeviceContext1_PSGetConstantBuffers1_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.CSGetConstantBuffers1 = ID3D11DeviceContext1_CSGetConstantBuffers1_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.SwapDeviceContextState = ID3D11DeviceContext1_SwapDeviceContextState_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.ClearView = ID3D11DeviceContext1_ClearView_Hooked;
    g_D3D11HookedVTables._ID3D11DeviceContext1.DiscardView1 = ID3D11DeviceContext1_DiscardView1_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.QueryInterface = ID3D11Device1_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.AddRef = ID3D11Device1_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.Release = ID3D11Device1_Release_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateBuffer = ID3D11Device1_CreateBuffer_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateTexture1D = ID3D11Device1_CreateTexture1D_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateTexture2D = ID3D11Device1_CreateTexture2D_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateTexture3D = ID3D11Device1_CreateTexture3D_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateShaderResourceView = ID3D11Device1_CreateShaderResourceView_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateUnorderedAccessView = ID3D11Device1_CreateUnorderedAccessView_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateRenderTargetView = ID3D11Device1_CreateRenderTargetView_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateDepthStencilView = ID3D11Device1_CreateDepthStencilView_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateInputLayout = ID3D11Device1_CreateInputLayout_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateVertexShader = ID3D11Device1_CreateVertexShader_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateGeometryShader = ID3D11Device1_CreateGeometryShader_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateGeometryShaderWithStreamOutput = ID3D11Device1_CreateGeometryShaderWithStreamOutput_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreatePixelShader = ID3D11Device1_CreatePixelShader_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateHullShader = ID3D11Device1_CreateHullShader_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateDomainShader = ID3D11Device1_CreateDomainShader_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateComputeShader = ID3D11Device1_CreateComputeShader_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateClassLinkage = ID3D11Device1_CreateClassLinkage_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateBlendState = ID3D11Device1_CreateBlendState_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateDepthStencilState = ID3D11Device1_CreateDepthStencilState_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateRasterizerState = ID3D11Device1_CreateRasterizerState_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateSamplerState = ID3D11Device1_CreateSamplerState_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateQuery = ID3D11Device1_CreateQuery_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreatePredicate = ID3D11Device1_CreatePredicate_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateCounter = ID3D11Device1_CreateCounter_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateDeferredContext = ID3D11Device1_CreateDeferredContext_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.OpenSharedResource = ID3D11Device1_OpenSharedResource_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CheckFormatSupport = ID3D11Device1_CheckFormatSupport_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CheckMultisampleQualityLevels = ID3D11Device1_CheckMultisampleQualityLevels_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CheckCounterInfo = ID3D11Device1_CheckCounterInfo_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CheckCounter = ID3D11Device1_CheckCounter_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CheckFeatureSupport = ID3D11Device1_CheckFeatureSupport_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.GetPrivateData = ID3D11Device1_GetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.SetPrivateData = ID3D11Device1_SetPrivateData_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.SetPrivateDataInterface = ID3D11Device1_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.GetFeatureLevel = ID3D11Device1_GetFeatureLevel_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.GetCreationFlags = ID3D11Device1_GetCreationFlags_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.GetDeviceRemovedReason = ID3D11Device1_GetDeviceRemovedReason_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.GetImmediateContext = ID3D11Device1_GetImmediateContext_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.SetExceptionMode = ID3D11Device1_SetExceptionMode_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.GetExceptionMode = ID3D11Device1_GetExceptionMode_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.GetImmediateContext1 = ID3D11Device1_GetImmediateContext1_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateDeferredContext1 = ID3D11Device1_CreateDeferredContext1_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateBlendState1 = ID3D11Device1_CreateBlendState1_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateRasterizerState1 = ID3D11Device1_CreateRasterizerState1_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.CreateDeviceContextState = ID3D11Device1_CreateDeviceContextState_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.OpenSharedResource1 = ID3D11Device1_OpenSharedResource1_Hooked;
    g_D3D11HookedVTables._ID3D11Device1.OpenSharedResourceByName = ID3D11Device1_OpenSharedResourceByName_Hooked;
    g_D3D11HookedVTables._ID3DUserDefinedAnnotation.QueryInterface = ID3DUserDefinedAnnotation_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3DUserDefinedAnnotation.AddRef = ID3DUserDefinedAnnotation_AddRef_Hooked;
    g_D3D11HookedVTables._ID3DUserDefinedAnnotation.Release = ID3DUserDefinedAnnotation_Release_Hooked;
    g_D3D11HookedVTables._ID3DUserDefinedAnnotation.BeginEvent = ID3DUserDefinedAnnotation_BeginEvent_Hooked;
    g_D3D11HookedVTables._ID3DUserDefinedAnnotation.EndEvent = ID3DUserDefinedAnnotation_EndEvent_Hooked;
    g_D3D11HookedVTables._ID3DUserDefinedAnnotation.SetMarker = ID3DUserDefinedAnnotation_SetMarker_Hooked;
    g_D3D11HookedVTables._ID3DUserDefinedAnnotation.GetStatus = ID3DUserDefinedAnnotation_GetStatus_Hooked;
    g_D3D11HookedVTables._ID3D11Debug.QueryInterface = ID3D11Debug_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11Debug.AddRef = ID3D11Debug_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11Debug.Release = ID3D11Debug_Release_Hooked;
    g_D3D11HookedVTables._ID3D11Debug.SetFeatureMask = ID3D11Debug_SetFeatureMask_Hooked;
    g_D3D11HookedVTables._ID3D11Debug.GetFeatureMask = ID3D11Debug_GetFeatureMask_Hooked;
    g_D3D11HookedVTables._ID3D11Debug.SetPresentPerRenderOpDelay = ID3D11Debug_SetPresentPerRenderOpDelay_Hooked;
    g_D3D11HookedVTables._ID3D11Debug.GetPresentPerRenderOpDelay = ID3D11Debug_GetPresentPerRenderOpDelay_Hooked;
    g_D3D11HookedVTables._ID3D11Debug.SetSwapChain = ID3D11Debug_SetSwapChain_Hooked;
    g_D3D11HookedVTables._ID3D11Debug.GetSwapChain = ID3D11Debug_GetSwapChain_Hooked;
    g_D3D11HookedVTables._ID3D11Debug.ValidateContext = ID3D11Debug_ValidateContext_Hooked;
    g_D3D11HookedVTables._ID3D11Debug.ReportLiveDeviceObjects = ID3D11Debug_ReportLiveDeviceObjects_Hooked;
    g_D3D11HookedVTables._ID3D11Debug.ValidateContextForDispatch = ID3D11Debug_ValidateContextForDispatch_Hooked;
    g_D3D11HookedVTables._ID3D11SwitchToRef.QueryInterface = ID3D11SwitchToRef_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11SwitchToRef.AddRef = ID3D11SwitchToRef_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11SwitchToRef.Release = ID3D11SwitchToRef_Release_Hooked;
    g_D3D11HookedVTables._ID3D11SwitchToRef.SetUseRef = ID3D11SwitchToRef_SetUseRef_Hooked;
    g_D3D11HookedVTables._ID3D11SwitchToRef.GetUseRef = ID3D11SwitchToRef_GetUseRef_Hooked;
    g_D3D11HookedVTables._ID3D11TracingDevice.QueryInterface = ID3D11TracingDevice_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11TracingDevice.AddRef = ID3D11TracingDevice_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11TracingDevice.Release = ID3D11TracingDevice_Release_Hooked;
    g_D3D11HookedVTables._ID3D11TracingDevice.SetShaderTrackingOptionsByType = ID3D11TracingDevice_SetShaderTrackingOptionsByType_Hooked;
    g_D3D11HookedVTables._ID3D11TracingDevice.SetShaderTrackingOptions = ID3D11TracingDevice_SetShaderTrackingOptions_Hooked;
    g_D3D11HookedVTables._ID3D11RefTrackingOptions.QueryInterface = ID3D11RefTrackingOptions_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11RefTrackingOptions.AddRef = ID3D11RefTrackingOptions_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11RefTrackingOptions.Release = ID3D11RefTrackingOptions_Release_Hooked;
    g_D3D11HookedVTables._ID3D11RefTrackingOptions.SetTrackingOptions = ID3D11RefTrackingOptions_SetTrackingOptions_Hooked;
    g_D3D11HookedVTables._ID3D11RefDefaultTrackingOptions.QueryInterface = ID3D11RefDefaultTrackingOptions_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11RefDefaultTrackingOptions.AddRef = ID3D11RefDefaultTrackingOptions_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11RefDefaultTrackingOptions.Release = ID3D11RefDefaultTrackingOptions_Release_Hooked;
    g_D3D11HookedVTables._ID3D11RefDefaultTrackingOptions.SetTrackingOptions = ID3D11RefDefaultTrackingOptions_SetTrackingOptions_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.QueryInterface = ID3D11InfoQueue_QueryInterface_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.AddRef = ID3D11InfoQueue_AddRef_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.Release = ID3D11InfoQueue_Release_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.SetMessageCountLimit = ID3D11InfoQueue_SetMessageCountLimit_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.ClearStoredMessages = ID3D11InfoQueue_ClearStoredMessages_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.GetMessage = ID3D11InfoQueue_GetMessage_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.GetNumMessagesAllowedByStorageFilter = ID3D11InfoQueue_GetNumMessagesAllowedByStorageFilter_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.GetNumMessagesDeniedByStorageFilter = ID3D11InfoQueue_GetNumMessagesDeniedByStorageFilter_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.GetNumStoredMessages = ID3D11InfoQueue_GetNumStoredMessages_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.GetNumStoredMessagesAllowedByRetrievalFilter = ID3D11InfoQueue_GetNumStoredMessagesAllowedByRetrievalFilter_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.GetNumMessagesDiscardedByMessageCountLimit = ID3D11InfoQueue_GetNumMessagesDiscardedByMessageCountLimit_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.GetMessageCountLimit = ID3D11InfoQueue_GetMessageCountLimit_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.AddStorageFilterEntries = ID3D11InfoQueue_AddStorageFilterEntries_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.GetStorageFilter = ID3D11InfoQueue_GetStorageFilter_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.ClearStorageFilter = ID3D11InfoQueue_ClearStorageFilter_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.PushEmptyStorageFilter = ID3D11InfoQueue_PushEmptyStorageFilter_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.PushCopyOfStorageFilter = ID3D11InfoQueue_PushCopyOfStorageFilter_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.PushStorageFilter = ID3D11InfoQueue_PushStorageFilter_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.PopStorageFilter = ID3D11InfoQueue_PopStorageFilter_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.GetStorageFilterStackSize = ID3D11InfoQueue_GetStorageFilterStackSize_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.AddRetrievalFilterEntries = ID3D11InfoQueue_AddRetrievalFilterEntries_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.GetRetrievalFilter = ID3D11InfoQueue_GetRetrievalFilter_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.ClearRetrievalFilter = ID3D11InfoQueue_ClearRetrievalFilter_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.PushEmptyRetrievalFilter = ID3D11InfoQueue_PushEmptyRetrievalFilter_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.PushCopyOfRetrievalFilter = ID3D11InfoQueue_PushCopyOfRetrievalFilter_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.PushRetrievalFilter = ID3D11InfoQueue_PushRetrievalFilter_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.PopRetrievalFilter = ID3D11InfoQueue_PopRetrievalFilter_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.GetRetrievalFilterStackSize = ID3D11InfoQueue_GetRetrievalFilterStackSize_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.AddMessage = ID3D11InfoQueue_AddMessage_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.AddApplicationMessage = ID3D11InfoQueue_AddApplicationMessage_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.SetBreakOnCategory = ID3D11InfoQueue_SetBreakOnCategory_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.SetBreakOnSeverity = ID3D11InfoQueue_SetBreakOnSeverity_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.SetBreakOnID = ID3D11InfoQueue_SetBreakOnID_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.GetBreakOnCategory = ID3D11InfoQueue_GetBreakOnCategory_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.GetBreakOnSeverity = ID3D11InfoQueue_GetBreakOnSeverity_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.GetBreakOnID = ID3D11InfoQueue_GetBreakOnID_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.SetMuteDebugOutput = ID3D11InfoQueue_SetMuteDebugOutput_Hooked;
    g_D3D11HookedVTables._ID3D11InfoQueue.GetMuteDebugOutput = ID3D11InfoQueue_GetMuteDebugOutput_Hooked;
    g_D3D11HookedVTables._IDXGIObject.QueryInterface = IDXGIObject_QueryInterface_Hooked;
    g_D3D11HookedVTables._IDXGIObject.AddRef = IDXGIObject_AddRef_Hooked;
    g_D3D11HookedVTables._IDXGIObject.Release = IDXGIObject_Release_Hooked;
    g_D3D11HookedVTables._IDXGIObject.SetPrivateData = IDXGIObject_SetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIObject.SetPrivateDataInterface = IDXGIObject_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._IDXGIObject.GetPrivateData = IDXGIObject_GetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIObject.GetParent = IDXGIObject_GetParent_Hooked;
    g_D3D11HookedVTables._IDXGIDeviceSubObject.QueryInterface = IDXGIDeviceSubObject_QueryInterface_Hooked;
    g_D3D11HookedVTables._IDXGIDeviceSubObject.AddRef = IDXGIDeviceSubObject_AddRef_Hooked;
    g_D3D11HookedVTables._IDXGIDeviceSubObject.Release = IDXGIDeviceSubObject_Release_Hooked;
    g_D3D11HookedVTables._IDXGIDeviceSubObject.SetPrivateData = IDXGIDeviceSubObject_SetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIDeviceSubObject.SetPrivateDataInterface = IDXGIDeviceSubObject_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._IDXGIDeviceSubObject.GetPrivateData = IDXGIDeviceSubObject_GetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIDeviceSubObject.GetParent = IDXGIDeviceSubObject_GetParent_Hooked;
    g_D3D11HookedVTables._IDXGIDeviceSubObject.GetDevice = IDXGIDeviceSubObject_GetDevice_Hooked;
    g_D3D11HookedVTables._IDXGIResource.QueryInterface = IDXGIResource_QueryInterface_Hooked;
    g_D3D11HookedVTables._IDXGIResource.AddRef = IDXGIResource_AddRef_Hooked;
    g_D3D11HookedVTables._IDXGIResource.Release = IDXGIResource_Release_Hooked;
    g_D3D11HookedVTables._IDXGIResource.SetPrivateData = IDXGIResource_SetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIResource.SetPrivateDataInterface = IDXGIResource_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._IDXGIResource.GetPrivateData = IDXGIResource_GetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIResource.GetParent = IDXGIResource_GetParent_Hooked;
    g_D3D11HookedVTables._IDXGIResource.GetDevice = IDXGIResource_GetDevice_Hooked;
    g_D3D11HookedVTables._IDXGIResource.GetSharedHandle = IDXGIResource_GetSharedHandle_Hooked;
    g_D3D11HookedVTables._IDXGIResource.GetUsage = IDXGIResource_GetUsage_Hooked;
    g_D3D11HookedVTables._IDXGIResource.SetEvictionPriority = IDXGIResource_SetEvictionPriority_Hooked;
    g_D3D11HookedVTables._IDXGIResource.GetEvictionPriority = IDXGIResource_GetEvictionPriority_Hooked;
    g_D3D11HookedVTables._IDXGIKeyedMutex.QueryInterface = IDXGIKeyedMutex_QueryInterface_Hooked;
    g_D3D11HookedVTables._IDXGIKeyedMutex.AddRef = IDXGIKeyedMutex_AddRef_Hooked;
    g_D3D11HookedVTables._IDXGIKeyedMutex.Release = IDXGIKeyedMutex_Release_Hooked;
    g_D3D11HookedVTables._IDXGIKeyedMutex.SetPrivateData = IDXGIKeyedMutex_SetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIKeyedMutex.SetPrivateDataInterface = IDXGIKeyedMutex_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._IDXGIKeyedMutex.GetPrivateData = IDXGIKeyedMutex_GetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIKeyedMutex.GetParent = IDXGIKeyedMutex_GetParent_Hooked;
    g_D3D11HookedVTables._IDXGIKeyedMutex.GetDevice = IDXGIKeyedMutex_GetDevice_Hooked;
    g_D3D11HookedVTables._IDXGIKeyedMutex.AcquireSync = IDXGIKeyedMutex_AcquireSync_Hooked;
    g_D3D11HookedVTables._IDXGIKeyedMutex.ReleaseSync = IDXGIKeyedMutex_ReleaseSync_Hooked;
    g_D3D11HookedVTables._IDXGISurface.QueryInterface = IDXGISurface_QueryInterface_Hooked;
    g_D3D11HookedVTables._IDXGISurface.AddRef = IDXGISurface_AddRef_Hooked;
    g_D3D11HookedVTables._IDXGISurface.Release = IDXGISurface_Release_Hooked;
    g_D3D11HookedVTables._IDXGISurface.SetPrivateData = IDXGISurface_SetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGISurface.SetPrivateDataInterface = IDXGISurface_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._IDXGISurface.GetPrivateData = IDXGISurface_GetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGISurface.GetParent = IDXGISurface_GetParent_Hooked;
    g_D3D11HookedVTables._IDXGISurface.GetDevice = IDXGISurface_GetDevice_Hooked;
    g_D3D11HookedVTables._IDXGISurface.GetDesc = IDXGISurface_GetDesc_Hooked;
    g_D3D11HookedVTables._IDXGISurface.Map = IDXGISurface_Map_Hooked;
    g_D3D11HookedVTables._IDXGISurface.Unmap = IDXGISurface_Unmap_Hooked;
    g_D3D11HookedVTables._IDXGISurface1.QueryInterface = IDXGISurface1_QueryInterface_Hooked;
    g_D3D11HookedVTables._IDXGISurface1.AddRef = IDXGISurface1_AddRef_Hooked;
    g_D3D11HookedVTables._IDXGISurface1.Release = IDXGISurface1_Release_Hooked;
    g_D3D11HookedVTables._IDXGISurface1.SetPrivateData = IDXGISurface1_SetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGISurface1.SetPrivateDataInterface = IDXGISurface1_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._IDXGISurface1.GetPrivateData = IDXGISurface1_GetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGISurface1.GetParent = IDXGISurface1_GetParent_Hooked;
    g_D3D11HookedVTables._IDXGISurface1.GetDevice = IDXGISurface1_GetDevice_Hooked;
    g_D3D11HookedVTables._IDXGISurface1.GetDesc = IDXGISurface1_GetDesc_Hooked;
    g_D3D11HookedVTables._IDXGISurface1.Map = IDXGISurface1_Map_Hooked;
    g_D3D11HookedVTables._IDXGISurface1.Unmap = IDXGISurface1_Unmap_Hooked;
    g_D3D11HookedVTables._IDXGISurface1.GetDC = IDXGISurface1_GetDC_Hooked;
    g_D3D11HookedVTables._IDXGISurface1.ReleaseDC = IDXGISurface1_ReleaseDC_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter.QueryInterface = IDXGIAdapter_QueryInterface_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter.AddRef = IDXGIAdapter_AddRef_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter.Release = IDXGIAdapter_Release_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter.SetPrivateData = IDXGIAdapter_SetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter.SetPrivateDataInterface = IDXGIAdapter_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter.GetPrivateData = IDXGIAdapter_GetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter.GetParent = IDXGIAdapter_GetParent_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter.EnumOutputs = IDXGIAdapter_EnumOutputs_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter.GetDesc = IDXGIAdapter_GetDesc_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter.CheckInterfaceSupport = IDXGIAdapter_CheckInterfaceSupport_Hooked;
    g_D3D11HookedVTables._IDXGIOutput.QueryInterface = IDXGIOutput_QueryInterface_Hooked;
    g_D3D11HookedVTables._IDXGIOutput.AddRef = IDXGIOutput_AddRef_Hooked;
    g_D3D11HookedVTables._IDXGIOutput.Release = IDXGIOutput_Release_Hooked;
    g_D3D11HookedVTables._IDXGIOutput.SetPrivateData = IDXGIOutput_SetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIOutput.SetPrivateDataInterface = IDXGIOutput_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._IDXGIOutput.GetPrivateData = IDXGIOutput_GetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIOutput.GetParent = IDXGIOutput_GetParent_Hooked;
    g_D3D11HookedVTables._IDXGIOutput.GetDesc = IDXGIOutput_GetDesc_Hooked;
    g_D3D11HookedVTables._IDXGIOutput.GetDisplayModeList = IDXGIOutput_GetDisplayModeList_Hooked;
    g_D3D11HookedVTables._IDXGIOutput.FindClosestMatchingMode = IDXGIOutput_FindClosestMatchingMode_Hooked;
    g_D3D11HookedVTables._IDXGIOutput.WaitForVBlank = IDXGIOutput_WaitForVBlank_Hooked;
    g_D3D11HookedVTables._IDXGIOutput.TakeOwnership = IDXGIOutput_TakeOwnership_Hooked;
    g_D3D11HookedVTables._IDXGIOutput.ReleaseOwnership = IDXGIOutput_ReleaseOwnership_Hooked;
    g_D3D11HookedVTables._IDXGIOutput.GetGammaControlCapabilities = IDXGIOutput_GetGammaControlCapabilities_Hooked;
    g_D3D11HookedVTables._IDXGIOutput.SetGammaControl = IDXGIOutput_SetGammaControl_Hooked;
    g_D3D11HookedVTables._IDXGIOutput.GetGammaControl = IDXGIOutput_GetGammaControl_Hooked;
    g_D3D11HookedVTables._IDXGIOutput.SetDisplaySurface = IDXGIOutput_SetDisplaySurface_Hooked;
    g_D3D11HookedVTables._IDXGIOutput.GetDisplaySurfaceData = IDXGIOutput_GetDisplaySurfaceData_Hooked;
    g_D3D11HookedVTables._IDXGIOutput.GetFrameStatistics = IDXGIOutput_GetFrameStatistics_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain.QueryInterface = IDXGISwapChain_QueryInterface_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain.AddRef = IDXGISwapChain_AddRef_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain.Release = IDXGISwapChain_Release_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain.SetPrivateData = IDXGISwapChain_SetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain.SetPrivateDataInterface = IDXGISwapChain_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain.GetPrivateData = IDXGISwapChain_GetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain.GetParent = IDXGISwapChain_GetParent_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain.GetDevice = IDXGISwapChain_GetDevice_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain.Present = IDXGISwapChain_Present_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain.GetBuffer = IDXGISwapChain_GetBuffer_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain.SetFullscreenState = IDXGISwapChain_SetFullscreenState_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain.GetFullscreenState = IDXGISwapChain_GetFullscreenState_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain.GetDesc = IDXGISwapChain_GetDesc_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain.ResizeBuffers = IDXGISwapChain_ResizeBuffers_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain.ResizeTarget = IDXGISwapChain_ResizeTarget_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain.GetContainingOutput = IDXGISwapChain_GetContainingOutput_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain.GetFrameStatistics = IDXGISwapChain_GetFrameStatistics_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain.GetLastPresentCount = IDXGISwapChain_GetLastPresentCount_Hooked;
    g_D3D11HookedVTables._IDXGIFactory.QueryInterface = IDXGIFactory_QueryInterface_Hooked;
    g_D3D11HookedVTables._IDXGIFactory.AddRef = IDXGIFactory_AddRef_Hooked;
    g_D3D11HookedVTables._IDXGIFactory.Release = IDXGIFactory_Release_Hooked;
    g_D3D11HookedVTables._IDXGIFactory.SetPrivateData = IDXGIFactory_SetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIFactory.SetPrivateDataInterface = IDXGIFactory_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._IDXGIFactory.GetPrivateData = IDXGIFactory_GetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIFactory.GetParent = IDXGIFactory_GetParent_Hooked;
    g_D3D11HookedVTables._IDXGIFactory.EnumAdapters = IDXGIFactory_EnumAdapters_Hooked;
    g_D3D11HookedVTables._IDXGIFactory.MakeWindowAssociation = IDXGIFactory_MakeWindowAssociation_Hooked;
    g_D3D11HookedVTables._IDXGIFactory.GetWindowAssociation = IDXGIFactory_GetWindowAssociation_Hooked;
    g_D3D11HookedVTables._IDXGIFactory.CreateSwapChain = IDXGIFactory_CreateSwapChain_Hooked;
    g_D3D11HookedVTables._IDXGIFactory.CreateSoftwareAdapter = IDXGIFactory_CreateSoftwareAdapter_Hooked;
    g_D3D11HookedVTables._IDXGIDevice.QueryInterface = IDXGIDevice_QueryInterface_Hooked;
    g_D3D11HookedVTables._IDXGIDevice.AddRef = IDXGIDevice_AddRef_Hooked;
    g_D3D11HookedVTables._IDXGIDevice.Release = IDXGIDevice_Release_Hooked;
    g_D3D11HookedVTables._IDXGIDevice.SetPrivateData = IDXGIDevice_SetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIDevice.SetPrivateDataInterface = IDXGIDevice_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._IDXGIDevice.GetPrivateData = IDXGIDevice_GetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIDevice.GetParent = IDXGIDevice_GetParent_Hooked;
    g_D3D11HookedVTables._IDXGIDevice.GetAdapter = IDXGIDevice_GetAdapter_Hooked;
    g_D3D11HookedVTables._IDXGIDevice.CreateSurface = IDXGIDevice_CreateSurface_Hooked;
    g_D3D11HookedVTables._IDXGIDevice.QueryResourceResidency = IDXGIDevice_QueryResourceResidency_Hooked;
    g_D3D11HookedVTables._IDXGIDevice.SetGPUThreadPriority = IDXGIDevice_SetGPUThreadPriority_Hooked;
    g_D3D11HookedVTables._IDXGIDevice.GetGPUThreadPriority = IDXGIDevice_GetGPUThreadPriority_Hooked;
    g_D3D11HookedVTables._IDXGIFactory1.QueryInterface = IDXGIFactory1_QueryInterface_Hooked;
    g_D3D11HookedVTables._IDXGIFactory1.AddRef = IDXGIFactory1_AddRef_Hooked;
    g_D3D11HookedVTables._IDXGIFactory1.Release = IDXGIFactory1_Release_Hooked;
    g_D3D11HookedVTables._IDXGIFactory1.SetPrivateData = IDXGIFactory1_SetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIFactory1.SetPrivateDataInterface = IDXGIFactory1_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._IDXGIFactory1.GetPrivateData = IDXGIFactory1_GetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIFactory1.GetParent = IDXGIFactory1_GetParent_Hooked;
    g_D3D11HookedVTables._IDXGIFactory1.EnumAdapters = IDXGIFactory1_EnumAdapters_Hooked;
    g_D3D11HookedVTables._IDXGIFactory1.MakeWindowAssociation = IDXGIFactory1_MakeWindowAssociation_Hooked;
    g_D3D11HookedVTables._IDXGIFactory1.GetWindowAssociation = IDXGIFactory1_GetWindowAssociation_Hooked;
    g_D3D11HookedVTables._IDXGIFactory1.CreateSwapChain = IDXGIFactory1_CreateSwapChain_Hooked;
    g_D3D11HookedVTables._IDXGIFactory1.CreateSoftwareAdapter = IDXGIFactory1_CreateSoftwareAdapter_Hooked;
    g_D3D11HookedVTables._IDXGIFactory1.EnumAdapters1 = IDXGIFactory1_EnumAdapters1_Hooked;
    g_D3D11HookedVTables._IDXGIFactory1.IsCurrent = IDXGIFactory1_IsCurrent_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter1.QueryInterface = IDXGIAdapter1_QueryInterface_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter1.AddRef = IDXGIAdapter1_AddRef_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter1.Release = IDXGIAdapter1_Release_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter1.SetPrivateData = IDXGIAdapter1_SetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter1.SetPrivateDataInterface = IDXGIAdapter1_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter1.GetPrivateData = IDXGIAdapter1_GetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter1.GetParent = IDXGIAdapter1_GetParent_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter1.EnumOutputs = IDXGIAdapter1_EnumOutputs_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter1.GetDesc = IDXGIAdapter1_GetDesc_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter1.CheckInterfaceSupport = IDXGIAdapter1_CheckInterfaceSupport_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter1.GetDesc1 = IDXGIAdapter1_GetDesc1_Hooked;
    g_D3D11HookedVTables._IDXGIDevice1.QueryInterface = IDXGIDevice1_QueryInterface_Hooked;
    g_D3D11HookedVTables._IDXGIDevice1.AddRef = IDXGIDevice1_AddRef_Hooked;
    g_D3D11HookedVTables._IDXGIDevice1.Release = IDXGIDevice1_Release_Hooked;
    g_D3D11HookedVTables._IDXGIDevice1.SetPrivateData = IDXGIDevice1_SetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIDevice1.SetPrivateDataInterface = IDXGIDevice1_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._IDXGIDevice1.GetPrivateData = IDXGIDevice1_GetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIDevice1.GetParent = IDXGIDevice1_GetParent_Hooked;
    g_D3D11HookedVTables._IDXGIDevice1.GetAdapter = IDXGIDevice1_GetAdapter_Hooked;
    g_D3D11HookedVTables._IDXGIDevice1.CreateSurface = IDXGIDevice1_CreateSurface_Hooked;
    g_D3D11HookedVTables._IDXGIDevice1.QueryResourceResidency = IDXGIDevice1_QueryResourceResidency_Hooked;
    g_D3D11HookedVTables._IDXGIDevice1.SetGPUThreadPriority = IDXGIDevice1_SetGPUThreadPriority_Hooked;
    g_D3D11HookedVTables._IDXGIDevice1.GetGPUThreadPriority = IDXGIDevice1_GetGPUThreadPriority_Hooked;
    g_D3D11HookedVTables._IDXGIDevice1.SetMaximumFrameLatency = IDXGIDevice1_SetMaximumFrameLatency_Hooked;
    g_D3D11HookedVTables._IDXGIDevice1.GetMaximumFrameLatency = IDXGIDevice1_GetMaximumFrameLatency_Hooked;
    g_D3D11HookedVTables._IDXGIDisplayControl.QueryInterface = IDXGIDisplayControl_QueryInterface_Hooked;
    g_D3D11HookedVTables._IDXGIDisplayControl.AddRef = IDXGIDisplayControl_AddRef_Hooked;
    g_D3D11HookedVTables._IDXGIDisplayControl.Release = IDXGIDisplayControl_Release_Hooked;
    g_D3D11HookedVTables._IDXGIDisplayControl.IsStereoEnabled = IDXGIDisplayControl_IsStereoEnabled_Hooked;
    g_D3D11HookedVTables._IDXGIDisplayControl.SetStereoEnabled = IDXGIDisplayControl_SetStereoEnabled_Hooked;
    g_D3D11HookedVTables._IDXGIOutputDuplication.QueryInterface = IDXGIOutputDuplication_QueryInterface_Hooked;
    g_D3D11HookedVTables._IDXGIOutputDuplication.AddRef = IDXGIOutputDuplication_AddRef_Hooked;
    g_D3D11HookedVTables._IDXGIOutputDuplication.Release = IDXGIOutputDuplication_Release_Hooked;
    g_D3D11HookedVTables._IDXGIOutputDuplication.SetPrivateData = IDXGIOutputDuplication_SetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIOutputDuplication.SetPrivateDataInterface = IDXGIOutputDuplication_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._IDXGIOutputDuplication.GetPrivateData = IDXGIOutputDuplication_GetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIOutputDuplication.GetParent = IDXGIOutputDuplication_GetParent_Hooked;
    g_D3D11HookedVTables._IDXGIOutputDuplication.GetDesc = IDXGIOutputDuplication_GetDesc_Hooked;
    g_D3D11HookedVTables._IDXGIOutputDuplication.AcquireNextFrame = IDXGIOutputDuplication_AcquireNextFrame_Hooked;
    g_D3D11HookedVTables._IDXGIOutputDuplication.GetFrameDirtyRects = IDXGIOutputDuplication_GetFrameDirtyRects_Hooked;
    g_D3D11HookedVTables._IDXGIOutputDuplication.GetFrameMoveRects = IDXGIOutputDuplication_GetFrameMoveRects_Hooked;
    g_D3D11HookedVTables._IDXGIOutputDuplication.GetFramePointerShape = IDXGIOutputDuplication_GetFramePointerShape_Hooked;
    g_D3D11HookedVTables._IDXGIOutputDuplication.MapDesktopSurface = IDXGIOutputDuplication_MapDesktopSurface_Hooked;
    g_D3D11HookedVTables._IDXGIOutputDuplication.UnMapDesktopSurface = IDXGIOutputDuplication_UnMapDesktopSurface_Hooked;
    g_D3D11HookedVTables._IDXGIOutputDuplication.ReleaseFrame = IDXGIOutputDuplication_ReleaseFrame_Hooked;
    g_D3D11HookedVTables._IDXGISurface2.QueryInterface = IDXGISurface2_QueryInterface_Hooked;
    g_D3D11HookedVTables._IDXGISurface2.AddRef = IDXGISurface2_AddRef_Hooked;
    g_D3D11HookedVTables._IDXGISurface2.Release = IDXGISurface2_Release_Hooked;
    g_D3D11HookedVTables._IDXGISurface2.SetPrivateData = IDXGISurface2_SetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGISurface2.SetPrivateDataInterface = IDXGISurface2_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._IDXGISurface2.GetPrivateData = IDXGISurface2_GetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGISurface2.GetParent = IDXGISurface2_GetParent_Hooked;
    g_D3D11HookedVTables._IDXGISurface2.GetDevice = IDXGISurface2_GetDevice_Hooked;
    g_D3D11HookedVTables._IDXGISurface2.GetDesc = IDXGISurface2_GetDesc_Hooked;
    g_D3D11HookedVTables._IDXGISurface2.Map = IDXGISurface2_Map_Hooked;
    g_D3D11HookedVTables._IDXGISurface2.Unmap = IDXGISurface2_Unmap_Hooked;
    g_D3D11HookedVTables._IDXGISurface2.GetDC = IDXGISurface2_GetDC_Hooked;
    g_D3D11HookedVTables._IDXGISurface2.ReleaseDC = IDXGISurface2_ReleaseDC_Hooked;
    g_D3D11HookedVTables._IDXGISurface2.GetResource = IDXGISurface2_GetResource_Hooked;
    g_D3D11HookedVTables._IDXGIResource1.QueryInterface = IDXGIResource1_QueryInterface_Hooked;
    g_D3D11HookedVTables._IDXGIResource1.AddRef = IDXGIResource1_AddRef_Hooked;
    g_D3D11HookedVTables._IDXGIResource1.Release = IDXGIResource1_Release_Hooked;
    g_D3D11HookedVTables._IDXGIResource1.SetPrivateData = IDXGIResource1_SetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIResource1.SetPrivateDataInterface = IDXGIResource1_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._IDXGIResource1.GetPrivateData = IDXGIResource1_GetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIResource1.GetParent = IDXGIResource1_GetParent_Hooked;
    g_D3D11HookedVTables._IDXGIResource1.GetDevice = IDXGIResource1_GetDevice_Hooked;
    g_D3D11HookedVTables._IDXGIResource1.GetSharedHandle = IDXGIResource1_GetSharedHandle_Hooked;
    g_D3D11HookedVTables._IDXGIResource1.GetUsage = IDXGIResource1_GetUsage_Hooked;
    g_D3D11HookedVTables._IDXGIResource1.SetEvictionPriority = IDXGIResource1_SetEvictionPriority_Hooked;
    g_D3D11HookedVTables._IDXGIResource1.GetEvictionPriority = IDXGIResource1_GetEvictionPriority_Hooked;
    g_D3D11HookedVTables._IDXGIResource1.CreateSubresourceSurface = IDXGIResource1_CreateSubresourceSurface_Hooked;
    g_D3D11HookedVTables._IDXGIResource1.CreateSharedHandle = IDXGIResource1_CreateSharedHandle_Hooked;
    g_D3D11HookedVTables._IDXGIDevice2.QueryInterface = IDXGIDevice2_QueryInterface_Hooked;
    g_D3D11HookedVTables._IDXGIDevice2.AddRef = IDXGIDevice2_AddRef_Hooked;
    g_D3D11HookedVTables._IDXGIDevice2.Release = IDXGIDevice2_Release_Hooked;
    g_D3D11HookedVTables._IDXGIDevice2.SetPrivateData = IDXGIDevice2_SetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIDevice2.SetPrivateDataInterface = IDXGIDevice2_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._IDXGIDevice2.GetPrivateData = IDXGIDevice2_GetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIDevice2.GetParent = IDXGIDevice2_GetParent_Hooked;
    g_D3D11HookedVTables._IDXGIDevice2.GetAdapter = IDXGIDevice2_GetAdapter_Hooked;
    g_D3D11HookedVTables._IDXGIDevice2.CreateSurface = IDXGIDevice2_CreateSurface_Hooked;
    g_D3D11HookedVTables._IDXGIDevice2.QueryResourceResidency = IDXGIDevice2_QueryResourceResidency_Hooked;
    g_D3D11HookedVTables._IDXGIDevice2.SetGPUThreadPriority = IDXGIDevice2_SetGPUThreadPriority_Hooked;
    g_D3D11HookedVTables._IDXGIDevice2.GetGPUThreadPriority = IDXGIDevice2_GetGPUThreadPriority_Hooked;
    g_D3D11HookedVTables._IDXGIDevice2.SetMaximumFrameLatency = IDXGIDevice2_SetMaximumFrameLatency_Hooked;
    g_D3D11HookedVTables._IDXGIDevice2.GetMaximumFrameLatency = IDXGIDevice2_GetMaximumFrameLatency_Hooked;
    g_D3D11HookedVTables._IDXGIDevice2.OfferResources = IDXGIDevice2_OfferResources_Hooked;
    g_D3D11HookedVTables._IDXGIDevice2.ReclaimResources = IDXGIDevice2_ReclaimResources_Hooked;
    g_D3D11HookedVTables._IDXGIDevice2.EnqueueSetEvent = IDXGIDevice2_EnqueueSetEvent_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.QueryInterface = IDXGISwapChain1_QueryInterface_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.AddRef = IDXGISwapChain1_AddRef_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.Release = IDXGISwapChain1_Release_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.SetPrivateData = IDXGISwapChain1_SetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.SetPrivateDataInterface = IDXGISwapChain1_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.GetPrivateData = IDXGISwapChain1_GetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.GetParent = IDXGISwapChain1_GetParent_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.GetDevice = IDXGISwapChain1_GetDevice_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.Present = IDXGISwapChain1_Present_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.GetBuffer = IDXGISwapChain1_GetBuffer_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.SetFullscreenState = IDXGISwapChain1_SetFullscreenState_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.GetFullscreenState = IDXGISwapChain1_GetFullscreenState_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.GetDesc = IDXGISwapChain1_GetDesc_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.ResizeBuffers = IDXGISwapChain1_ResizeBuffers_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.ResizeTarget = IDXGISwapChain1_ResizeTarget_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.GetContainingOutput = IDXGISwapChain1_GetContainingOutput_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.GetFrameStatistics = IDXGISwapChain1_GetFrameStatistics_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.GetLastPresentCount = IDXGISwapChain1_GetLastPresentCount_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.GetDesc1 = IDXGISwapChain1_GetDesc1_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.GetFullscreenDesc = IDXGISwapChain1_GetFullscreenDesc_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.GetHwnd = IDXGISwapChain1_GetHwnd_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.GetCoreWindow = IDXGISwapChain1_GetCoreWindow_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.Present1 = IDXGISwapChain1_Present1_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.IsTemporaryMonoSupported = IDXGISwapChain1_IsTemporaryMonoSupported_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.GetRestrictToOutput = IDXGISwapChain1_GetRestrictToOutput_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.SetBackgroundColor = IDXGISwapChain1_SetBackgroundColor_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.GetBackgroundColor = IDXGISwapChain1_GetBackgroundColor_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.SetRotation = IDXGISwapChain1_SetRotation_Hooked;
    g_D3D11HookedVTables._IDXGISwapChain1.GetRotation = IDXGISwapChain1_GetRotation_Hooked;
    g_D3D11HookedVTables._IDXGIFactory2.QueryInterface = IDXGIFactory2_QueryInterface_Hooked;
    g_D3D11HookedVTables._IDXGIFactory2.AddRef = IDXGIFactory2_AddRef_Hooked;
    g_D3D11HookedVTables._IDXGIFactory2.Release = IDXGIFactory2_Release_Hooked;
    g_D3D11HookedVTables._IDXGIFactory2.SetPrivateData = IDXGIFactory2_SetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIFactory2.SetPrivateDataInterface = IDXGIFactory2_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._IDXGIFactory2.GetPrivateData = IDXGIFactory2_GetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIFactory2.GetParent = IDXGIFactory2_GetParent_Hooked;
    g_D3D11HookedVTables._IDXGIFactory2.EnumAdapters = IDXGIFactory2_EnumAdapters_Hooked;
    g_D3D11HookedVTables._IDXGIFactory2.MakeWindowAssociation = IDXGIFactory2_MakeWindowAssociation_Hooked;
    g_D3D11HookedVTables._IDXGIFactory2.GetWindowAssociation = IDXGIFactory2_GetWindowAssociation_Hooked;
    g_D3D11HookedVTables._IDXGIFactory2.CreateSwapChain = IDXGIFactory2_CreateSwapChain_Hooked;
    g_D3D11HookedVTables._IDXGIFactory2.CreateSoftwareAdapter = IDXGIFactory2_CreateSoftwareAdapter_Hooked;
    g_D3D11HookedVTables._IDXGIFactory2.EnumAdapters1 = IDXGIFactory2_EnumAdapters1_Hooked;
    g_D3D11HookedVTables._IDXGIFactory2.IsCurrent = IDXGIFactory2_IsCurrent_Hooked;
    g_D3D11HookedVTables._IDXGIFactory2.IsWindowedStereoEnabled = IDXGIFactory2_IsWindowedStereoEnabled_Hooked;
    g_D3D11HookedVTables._IDXGIFactory2.CreateSwapChainForHwnd = IDXGIFactory2_CreateSwapChainForHwnd_Hooked;
    g_D3D11HookedVTables._IDXGIFactory2.CreateSwapChainForCoreWindow = IDXGIFactory2_CreateSwapChainForCoreWindow_Hooked;
    g_D3D11HookedVTables._IDXGIFactory2.GetSharedResourceAdapterLuid = IDXGIFactory2_GetSharedResourceAdapterLuid_Hooked;
    g_D3D11HookedVTables._IDXGIFactory2.RegisterStereoStatusWindow = IDXGIFactory2_RegisterStereoStatusWindow_Hooked;
    g_D3D11HookedVTables._IDXGIFactory2.RegisterStereoStatusEvent = IDXGIFactory2_RegisterStereoStatusEvent_Hooked;
    g_D3D11HookedVTables._IDXGIFactory2.UnregisterStereoStatus = IDXGIFactory2_UnregisterStereoStatus_Hooked;
    g_D3D11HookedVTables._IDXGIFactory2.RegisterOcclusionStatusWindow = IDXGIFactory2_RegisterOcclusionStatusWindow_Hooked;
    g_D3D11HookedVTables._IDXGIFactory2.RegisterOcclusionStatusEvent = IDXGIFactory2_RegisterOcclusionStatusEvent_Hooked;
    g_D3D11HookedVTables._IDXGIFactory2.UnregisterOcclusionStatus = IDXGIFactory2_UnregisterOcclusionStatus_Hooked;
    g_D3D11HookedVTables._IDXGIFactory2.CreateSwapChainForComposition = IDXGIFactory2_CreateSwapChainForComposition_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter2.QueryInterface = IDXGIAdapter2_QueryInterface_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter2.AddRef = IDXGIAdapter2_AddRef_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter2.Release = IDXGIAdapter2_Release_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter2.SetPrivateData = IDXGIAdapter2_SetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter2.SetPrivateDataInterface = IDXGIAdapter2_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter2.GetPrivateData = IDXGIAdapter2_GetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter2.GetParent = IDXGIAdapter2_GetParent_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter2.EnumOutputs = IDXGIAdapter2_EnumOutputs_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter2.GetDesc = IDXGIAdapter2_GetDesc_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter2.CheckInterfaceSupport = IDXGIAdapter2_CheckInterfaceSupport_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter2.GetDesc1 = IDXGIAdapter2_GetDesc1_Hooked;
    g_D3D11HookedVTables._IDXGIAdapter2.GetDesc2 = IDXGIAdapter2_GetDesc2_Hooked;
    g_D3D11HookedVTables._IDXGIOutput1.QueryInterface = IDXGIOutput1_QueryInterface_Hooked;
    g_D3D11HookedVTables._IDXGIOutput1.AddRef = IDXGIOutput1_AddRef_Hooked;
    g_D3D11HookedVTables._IDXGIOutput1.Release = IDXGIOutput1_Release_Hooked;
    g_D3D11HookedVTables._IDXGIOutput1.SetPrivateData = IDXGIOutput1_SetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIOutput1.SetPrivateDataInterface = IDXGIOutput1_SetPrivateDataInterface_Hooked;
    g_D3D11HookedVTables._IDXGIOutput1.GetPrivateData = IDXGIOutput1_GetPrivateData_Hooked;
    g_D3D11HookedVTables._IDXGIOutput1.GetParent = IDXGIOutput1_GetParent_Hooked;
    g_D3D11HookedVTables._IDXGIOutput1.GetDesc = IDXGIOutput1_GetDesc_Hooked;
    g_D3D11HookedVTables._IDXGIOutput1.GetDisplayModeList = IDXGIOutput1_GetDisplayModeList_Hooked;
    g_D3D11HookedVTables._IDXGIOutput1.FindClosestMatchingMode = IDXGIOutput1_FindClosestMatchingMode_Hooked;
    g_D3D11HookedVTables._IDXGIOutput1.WaitForVBlank = IDXGIOutput1_WaitForVBlank_Hooked;
    g_D3D11HookedVTables._IDXGIOutput1.TakeOwnership = IDXGIOutput1_TakeOwnership_Hooked;
    g_D3D11HookedVTables._IDXGIOutput1.ReleaseOwnership = IDXGIOutput1_ReleaseOwnership_Hooked;
    g_D3D11HookedVTables._IDXGIOutput1.GetGammaControlCapabilities = IDXGIOutput1_GetGammaControlCapabilities_Hooked;
    g_D3D11HookedVTables._IDXGIOutput1.SetGammaControl = IDXGIOutput1_SetGammaControl_Hooked;
    g_D3D11HookedVTables._IDXGIOutput1.GetGammaControl = IDXGIOutput1_GetGammaControl_Hooked;
    g_D3D11HookedVTables._IDXGIOutput1.SetDisplaySurface = IDXGIOutput1_SetDisplaySurface_Hooked;
    g_D3D11HookedVTables._IDXGIOutput1.GetDisplaySurfaceData = IDXGIOutput1_GetDisplaySurfaceData_Hooked;
    g_D3D11HookedVTables._IDXGIOutput1.GetFrameStatistics = IDXGIOutput1_GetFrameStatistics_Hooked;
    g_D3D11HookedVTables._IDXGIOutput1.GetDisplayModeList1 = IDXGIOutput1_GetDisplayModeList1_Hooked;
    g_D3D11HookedVTables._IDXGIOutput1.FindClosestMatchingMode1 = IDXGIOutput1_FindClosestMatchingMode1_Hooked;
    g_D3D11HookedVTables._IDXGIOutput1.GetDisplaySurfaceData1 = IDXGIOutput1_GetDisplaySurfaceData1_Hooked;
    g_D3D11HookedVTables._IDXGIOutput1.DuplicateOutput = IDXGIOutput1_DuplicateOutput_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.QueryInterface = IDXGIInfoQueue_QueryInterface_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.AddRef = IDXGIInfoQueue_AddRef_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.Release = IDXGIInfoQueue_Release_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.SetMessageCountLimit = IDXGIInfoQueue_SetMessageCountLimit_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.ClearStoredMessages = IDXGIInfoQueue_ClearStoredMessages_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.GetMessage = IDXGIInfoQueue_GetMessage_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.GetNumStoredMessagesAllowedByRetrievalFilters = IDXGIInfoQueue_GetNumStoredMessagesAllowedByRetrievalFilters_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.GetNumStoredMessages = IDXGIInfoQueue_GetNumStoredMessages_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.GetNumMessagesDiscardedByMessageCountLimit = IDXGIInfoQueue_GetNumMessagesDiscardedByMessageCountLimit_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.GetMessageCountLimit = IDXGIInfoQueue_GetMessageCountLimit_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.GetNumMessagesAllowedByStorageFilter = IDXGIInfoQueue_GetNumMessagesAllowedByStorageFilter_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.GetNumMessagesDeniedByStorageFilter = IDXGIInfoQueue_GetNumMessagesDeniedByStorageFilter_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.AddStorageFilterEntries = IDXGIInfoQueue_AddStorageFilterEntries_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.GetStorageFilter = IDXGIInfoQueue_GetStorageFilter_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.ClearStorageFilter = IDXGIInfoQueue_ClearStorageFilter_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.PushEmptyStorageFilter = IDXGIInfoQueue_PushEmptyStorageFilter_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.PushDenyAllStorageFilter = IDXGIInfoQueue_PushDenyAllStorageFilter_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.PushCopyOfStorageFilter = IDXGIInfoQueue_PushCopyOfStorageFilter_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.PushStorageFilter = IDXGIInfoQueue_PushStorageFilter_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.PopStorageFilter = IDXGIInfoQueue_PopStorageFilter_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.GetStorageFilterStackSize = IDXGIInfoQueue_GetStorageFilterStackSize_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.AddRetrievalFilterEntries = IDXGIInfoQueue_AddRetrievalFilterEntries_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.GetRetrievalFilter = IDXGIInfoQueue_GetRetrievalFilter_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.ClearRetrievalFilter = IDXGIInfoQueue_ClearRetrievalFilter_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.PushEmptyRetrievalFilter = IDXGIInfoQueue_PushEmptyRetrievalFilter_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.PushDenyAllRetrievalFilter = IDXGIInfoQueue_PushDenyAllRetrievalFilter_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.PushCopyOfRetrievalFilter = IDXGIInfoQueue_PushCopyOfRetrievalFilter_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.PushRetrievalFilter = IDXGIInfoQueue_PushRetrievalFilter_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.PopRetrievalFilter = IDXGIInfoQueue_PopRetrievalFilter_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.GetRetrievalFilterStackSize = IDXGIInfoQueue_GetRetrievalFilterStackSize_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.AddMessage = IDXGIInfoQueue_AddMessage_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.AddApplicationMessage = IDXGIInfoQueue_AddApplicationMessage_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.SetBreakOnCategory = IDXGIInfoQueue_SetBreakOnCategory_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.SetBreakOnSeverity = IDXGIInfoQueue_SetBreakOnSeverity_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.SetBreakOnID = IDXGIInfoQueue_SetBreakOnID_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.GetBreakOnCategory = IDXGIInfoQueue_GetBreakOnCategory_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.GetBreakOnSeverity = IDXGIInfoQueue_GetBreakOnSeverity_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.GetBreakOnID = IDXGIInfoQueue_GetBreakOnID_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.SetMuteDebugOutput = IDXGIInfoQueue_SetMuteDebugOutput_Hooked;
    g_D3D11HookedVTables._IDXGIInfoQueue.GetMuteDebugOutput = IDXGIInfoQueue_GetMuteDebugOutput_Hooked;
    g_D3D11HookedVTables._IDXGIDebug.QueryInterface = IDXGIDebug_QueryInterface_Hooked;
    g_D3D11HookedVTables._IDXGIDebug.AddRef = IDXGIDebug_AddRef_Hooked;
    g_D3D11HookedVTables._IDXGIDebug.Release = IDXGIDebug_Release_Hooked;
    g_D3D11HookedVTables._IDXGIDebug.ReportLiveObjects = IDXGIDebug_ReportLiveObjects_Hooked;
}

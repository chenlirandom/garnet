Import( 'GN' )

env = GN.NewBuildEnv()

cpu = GN.target_cpu

# ------------------------------------------------------------------------------
# Hook DLL
# ------------------------------------------------------------------------------

hookdll = GN.BinplaceDLL( GN.BuildDLL( env, 'GNdxHook_' + cpu,
    [
        'hooks_main.cpp',
        'd3d11hooks.cpp',
        'd3d9hooks.cpp',
    ],
    'pch.h', 'pch.cpp' ) )

# ------------------------------------------------------------------------------
# wrapper DLLs
# ------------------------------------------------------------------------------

wrapper_env = env.Clone()
wrapper_env.Append( LIBPATH = ['.'], LIBS = ['GNdxHook_' + cpu] )

if 'x64' == cpu:
    d3d11dll = GN.BinplaceDLL( GN.BuildDLL( wrapper_env, 'd3d11wrapper',
        [
            'd3d11_x64.cpp',
            'd3d11_x64_asm.asm',
        ],
        defFile='d3d11_x64.def' ), rename='d3d11.dll', extraDependencies=hookdll )
    dxgidll = GN.BinplaceDLL( GN.BuildDLL( wrapper_env, 'dxgiwrapper',
        [
            'dxgi_x64.cpp',
            'dxgi_x64_asm.asm',
        ],
        defFile='dxgi_x64.def' ), rename='dxgi.dll', extraDependencies=hookdll )
    d3d9dll = GN.BinplaceDLL( GN.BuildDLL( wrapper_env, 'd3d9wrapper',
        [
            'd3d9_x64.cpp',
            'd3d9_x64_asm.asm',
        ],
        defFile='d3d9_x64.def' ), rename='d3d9.dll', extraDependencies=hookdll )
else:
    d3d11dll = GN.BinplaceDLL( GN.BuildDLL( wrapper_env, 'd3d11wrapper',
        [
            'd3d11_x86.cpp',
        ],
        defFile='d3d11_x64.def' ), rename='d3d11.dll', extraDependencies=hookdll )
    dxgidll = GN.BinplaceDLL( GN.BuildDLL( wrapper_env, 'dxgiwrapper',
        [
            'dxgi_x86.cpp',
        ],
        defFile='dxgi_x86.def' ), rename='dxgi.dll', extraDependencies=hookdll )
    d3d9dll = GN.BinplaceDLL( GN.BuildDLL( wrapper_env, 'd3d9wrapper',
        [
            'd3d9_x86.cpp',
        ],
        defFile='d3d9_x86.def' ), rename='d3d9.dll', extraDependencies=hookdll )

GN.NewDefaultTarget( 'GNdxHook', [hookdll, d3d11dll, dxgidll, d3d9dll] )

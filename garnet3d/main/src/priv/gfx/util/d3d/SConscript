Import( 'GN' )

dxgi_sources = [
	'dxgiTextureFormat.cpp'
]

d3d9_sources = [
	'd3d9App.cpp',
	'd3d9ShaderUtils.cpp',
	'd3d9ThickLine.cpp',
]

d3d10_sources = [
	'd3d10App.cpp',
	'd3d10RenderToTexture.cpp',
	'd3d10ResourcePool.cpp',
	'd3d10ScreenAlignedQuad.cpp',
	'd3d10ShaderUtils.cpp',
	'd3d10SimpleMesh.cpp',
	'd3d10StateDumper.cpp',
	'd3d10Utils.cpp',
]

d3d11_sources = [
	'd3d11ShaderUtils.cpp',
	'd3d11StateDumper.cpp',
   	'd3d11Utils.cpp',
]

sources = []
d3dlibs = []
if GN.conf['has_d3d10'] or GN.conf['has_d3d11'] :
	sources += dxgi_sources
	d3dlibs += ['dxgi.lib', 'dxguid.lib', 'dxerr.lib']
if GN.conf['has_d3d9'] or GN.conf['has_xtl'] :
	sources += d3d9_sources
	# libraries on Xenon platform are already defined in SConstruct
	if not GN.conf['has_xtl']:
		d3dlibs += ['d3d9.lib', 'd3dx9.lib']
if GN.conf['has_d3d10'] :
	sources += d3d10_sources
	d3dlibs += ['d3d10.lib', 'd3dx10.lib']
if GN.conf['has_d3d11']:
	sources += d3d11_sources
	d3dlibs += ['d3d11.lib', 'd3dx11.lib']

cluster = GN.newSourceCluster( sources, 'pch.h', 'pch.cpp' )
cluster.externalDependencies = d3dlibs
Return( 'cluster' )

BUGS
====

- Startup of GFXOGL module sometimes very slow:
  - pin down to the 1st call to opengl function in oglWinDisp.cpp
  - It seems caused by remote symbol loading

- Render target image is up-side-down in OGL, comparing with D3D.
  - See GNsampleRenderToTexture for an example.

- GNsampleRenderToTexture:
  - black screen on cygwin.

- When using non-power-of-two texture, ATI x1000 card runs very very slow. Check it!

- Quad renderer is slow on HP notebook with intel graphics chip.

- ATI depth texture doesn't work when backbuffer size is smaller then texture 
  size (only happens when using debug DX runtime. So seems a DX bug)

TODO
====

- 程序中标注TODO的地方

- p1
  - try multi-thread architect
    - separate sim() and render() loop
    - File loader in another thread.
  - GFX system
    - render target management
      - D3D: msaa
      - OGL: FBO
    - queryXXX(....)
  - code page convertor
  - sample application
    - GLSL test application
  - mesh class
  - blender exporter/importer
  - in-game GUI system
    - font class
  - UT for Str::findFirst/LastOf(...)
  - refine sigslot class to allow any type of functor
  - string buffer memory allocator.

- p2
  - GFX system
    - UT of LRU list in resource manager
    - consider remove drawBegin() and drawEnd()
    - renderer state dump system
    - UT to make sure OGL resource creation/deletion do not affect renderer states
    - add support to OGL FSAA
    - Cg shader
    - consider removing syscopy from vertex/index buffer
      - remove sys-copy of VBO.
    - Why D3D quad renderer is so slow, comparing with CEGUI sample application.
    - support render-to-texture on xenon (including depth texture)
    - UT: format conversion between ClrFmt and D3DFMT
    - test: IDirect3DDevice9::UpdateTexture() when target is render target texture.
    - learn EXT_framebuffer_object, ARB_draw_buffer, ARB_pixel_buffer_object
    - shared uniform
  - more sofisitcated log management: see log4cxx for example.
    - runtime switchable GN_TRACE( level, msg, .... )

- p3
  - support to multiple joysticks.
  - image format conversion
  - try implementing a ray tracer
  - check doxygen errors and warnings.
  - Custom sscanf(...)
  - cross-platform window util functions:
    - set window title
    - change window size
    - ...
  - runtime call-stack dump
  - hash map/table
  - implement POSIX version of GN::path:glob()
  - UT for path functions: resolve, glob

WORKLOG
=======

- 2006.4.29
  - upgrade to doxygen 1.4.6
  - upgrade to lua 5.1
  - refine log functions
  - refine render target management of D3D9 renderer.

- 2006.4.27
  - redesign resource manager classes to avoid using singleton

- 2006.4.11
  - add: user-supplied hints to shader creation.

- 2006.3.28:
  - call convension support to functor
  - switchable runtime assert behavior

- Before 2006.3.38
  - Rewrite SCons script
  - sample: render to texture
  - import a GUI toolkit : FOX-TOOLKIT
  - resource managers (textures, meshes, materials/effects)
  - implement core module
  - POSIX implementation
    - implement input module on POSIX platform
    - implement GNogl on POSIX platform
  - UT for getEnv() and setEnv().
  - convert input module to static library
  - SCons
    - EMT64 icl support
  - Refine GFX:
    - refine resource lock flags
      - LOCK_NORMAL, LOCK_READONLY, LOCK_DISCARD, LOCK_NO_OVERWRITE,
      - no combination.
    - OGL GLSL shader
    - parameter manager
    - quad renderer for GFXOGL module
    - d3d hlsl shader
    - ogl ARB shader
    - Fix link problem of GFX module in static build.
    - fix device-lost bug in GNtestGfx
    - refine device management
    - drawQuad(...)
      - D3D9Quad(): support to FFP
    - buffer manager of GFXOGL
    - vertex binding of GFXOGL
    - enable multiple context support of GLEW
    - Window property save/restore
    - Refine ntWindow class:
      - support external window
      - getClientSize();
    - remove platform specific code from display manager.
    - UT for GFX module: using external render window
  - Run UT for both GFXD3D and GFXOGL will throw exception.
    - FIXED: should use different render window class for each instance of NTRenderWindow.

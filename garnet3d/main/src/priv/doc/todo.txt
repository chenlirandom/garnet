- 程序中标注TODO的地方

- p1
  - store non-default values only in renderer context.
  - multi-thread architect
    - configuable resource cache with limited video memory footprint.
    - update thread: major game logic thread
    - render thread: the only thread that touches rendering device.
    - resource loading thread(s)
  - treat all surfaces as parameter of shader, like uniforms
  - shared uniform

- p2
  - render state block redesign: using packed bit fields.
  - memory pool class is not looking good
    - when call dtor and when not?
    - see others pool implementation on net
  - Drawable optimization:
  	- using hashed string map to reference uniforms and textures.
  - refine sigslot class to allow any type of functor
  - smart enum class
  - skin mesh test case: porting DXSDK sample.
  - memory-mapped IO.
  - GFX system
    - render target management
     - D3D: msaa
      - OGL: FBO with AA
    - set sampling parameters (such as filters wrapping) at binding time
    - recreate OGL context, when monitor changed.
    - queryXXX(....)
    - support using "c0" as uniform name of D3D HLSL shader.
    - consider remove drawBegin() and drawEnd()
    - add support to OGL FSAA
    - support render-to-texture on xenon (including depth texture)
    - test: IDirect3DDevice9::UpdateTexture() when target is render target texture.

- p3
  - code page convertor and test application
    - may support convertion from/to utf8 be enough?
  - blender exporter/importer
  - Custom sscanf(...)
  - cross-platform window util functions:
    - set window title
    - change window size
    - ...
  - runtime call-stack dump
  - hash map/table
  - in game GUI:
  - debug variable registry
    - debug variable viewer and modifier
  - renderer state dump system
    - OGL dumper has priority (for D3D,we can use PIX)
  - COLLADA loader
  - ASE loader
    - save texture to target directory
    - convert height map to normal map
  - make sure OGL resource creation/deletion do not affect renderer states
    - depends on renderer state dumper

- more
  - new build system:
    - two steps:
      - compiler configuration script, called by setupEnv.cmd/setupEnv.sh
      - build script
  - support to multiple joysticks.
  - image format conversion
  - try implementing a ray tracer

ISSUES
======

- Unified interface for different APIs is too difficult, and maybe pointless.
  How about a higher level abstraction: material/effect system?

- Do we need embed buffer for short string?

- Custom string class or std::string?
  - RESOLVED: custom string class.
  - WHY?
    - std::string can't accept NULL pointer as valid input.
    - std::char_trait<wchar_t> is not well supported on cygwin.

- TinyXml or Expat w/ DOM wrapper?
  - RESOLVED: expat.
    - expat is faster.
    - custom DOM wrapper fits our requirement better, and is pretty easy to implement.

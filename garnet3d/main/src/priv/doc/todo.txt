BUGS
====

- GFX:
  - Startup of GFXOGL module sometimes very slow:
    - pin down to the 1st call to opengl function in oglWinDisp.cpp
    - It seems caused by remote symbol loading
  - Render target image is up-side-down in OGL, comparing with D3D.
    - See GNrenderToTexture for an example.
  - GNrenderToTexture: black screen on cygwin.
  - GNdepthTexture: extremly slow on ATI x1800, possibly caused by ARB programs.

TODO
====

- 程序中标注TODO的地方

- p1
  - GFX system
    - add support to MSAA/FSAA
    - Cg shader
    - consider removing syscopy from vertex/index buffer
    - Why D3D quad renderer is so slow, comparing with CEGUI sample application.
    - support render-to-texture on xenon (including depth texture)
    - UT: format conversion between ClrFmt and D3DFMT
    - test: IDirect3DDevice9::UpdateTexture() when target is render target texture.
  - code page convertor
  - sample application
    - GLSL test application
  - mesh class
  - effect class: ut
  - blender exporter/importer
  - in-game GUI system
    - font class
  - UT for Str::findFirst/LastOf(...)

- p2
  - more sofisitcated log management: see log4cxx for example.
    - runtime switchable GN_TRACE( level, msg, .... )
  - refine GFX module:
    - shared uniform
  - Rewrite SCons script

- p3
  - support to multiple joysticks.
  - image format conversion
  - try implementing a ray tracer
  - check doxygen errors and warnings.
  - Custom sscanf(...)
  - cross-platform window util functions:
    - set window title
    - change window size
    - ...
  - runtime call-stack dump
  - hash map/table
  - implement POSIX version of GN::path:glob()
  - UT for path functions: resolve, glob

DONE
====

- sample: render to texture
- import a GUI toolkit : FOX-TOOLKIT
- resource managers (textures, meshes, materials/effects)
- implement core module
- POSIX implementation
  - implement input module on POSIX platform
  - implement GNogl on POSIX platform
- UT for getEnv() and setEnv().
- convert input module to static library
- SCons
  - EMT64 icl support
- Refine GFX:
  - refine resource lock flags
    - LOCK_NORMAL, LOCK_READONLY, LOCK_DISCARD, LOCK_NO_OVERWRITE,
    - no combination.
  - OGL GLSL shader
  - parameter manager
  - quad renderer for GFXOGL module
  - d3d hlsl shader
  - ogl ARB shader
  - Fix link problem of GFX module in static build.
  - fix device-lost bug in GNgfxTest
  - refine device management
  - drawQuad(...)
    - D3DQuad(): support to FFP
  - buffer manager of GFXOGL
  - vertex binding of GFXOGL
  - enable multiple context support of GLEW
  - Window property save/restore
  - Refine ntWindow class:
    - support external window
    - getClientSize();
  - remove platform specific code from display manager.
  - UT for GFX module: using external render window
- Run UT for both GFXD3D and GFXOGL will throw exception.
  - FIXED: should use different render window class for each instance of NTRenderWindow.

ISSUES
======

- QUESTION: Use boost jam, or refine SCons?
  - bjam
    - pros
      - fast script parsing speed
      - build-in support to amd64
    - cons
      - can't generate VC project
  - SCons
    - pros
      - can generate VC project
      - much more readable then jam code.
    - cons
      - script parsing is a little bit slow
      - no amd64 support
      - can distinguish different version of same compiler
  - ANSWER: SCons

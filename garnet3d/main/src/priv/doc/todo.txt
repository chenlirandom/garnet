- 程序中标注TODO的地方

- p0
  - cross platform renderer, again...
    - why: ease to use.
    - rule #1: portability has priority then performance.

- p1
  - big-endian DDS loader
  - big-endina mesh binary loader
  - render engine:
    - shared parameters
    - query graphics system caps
    - runtime configuable draw command buffer count
    - read resource content
  - graphics system:
    - using special surface class to replace stream in quad kernel.
    - consider delete stream source class.
    - delete surface dimension enum
    - API independant graphics system.
  - drawable and actore classes based on new render engine system.

- p2
  - XML: pointer from parent to last child, for constant time child appending.
  - runtime configuable profilers, like loggers
  - memory pool class is not looking good
    - when call dtor and when not?
    - see others pool implementation on net
  - sigslot class:
    - allow any type of functor
    - check behavior of redundant slot functors.
  - smart enum class
  - skin mesh test case: porting DXSDK sample.
  - memory-mapped IO.

- p3
  - code page convertor and test application
    - may support convertion from/to utf8 be enough?
  - blender exporter/importer
  - Custom sscanf(...)
  - cross-platform window util functions:
    - set window title
    - change window size
    - ...
  - runtime call-stack dump
  - hash map/table
  - in game GUI:
  - debug variable registry
    - debug variable viewer and modifier
  - opengl renderer state dumper
  - COLLADA loader
  - ASE loader
    - save texture to target directory
    - convert height map to normal map
  - make sure OGL resource creation/deletion do not affect renderer states
    - depends on renderer state dumper

- more
  - new build system:
    - two steps:
      - compiler configuration script, called by setupEnv.cmd/setupEnv.sh
      - build script
  - support to multiple joysticks.
  - image format conversion
  - try implementing a ray tracer

ISSUES
======

- Unified interface for different APIs is too difficult, and maybe pointless.
  How about a higher level abstraction: material/effect system?
  - RESOLVED: higher effect based system is the way to go.

- Do we need embed buffer for short string?

- Custom string class or std::string?
  - RESOLVED: custom string class.
  - WHY?
    - std::string can't accept NULL pointer as valid input.
    - std::char_trait<wchar_t> is not well supported on cygwin.

- TinyXml or Expat w/ DOM wrapper?
  - RESOLVED: expat.
    - expat is faster.
    - custom DOM wrapper fits our requirement better, and is pretty easy to implement.

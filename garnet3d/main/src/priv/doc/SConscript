Import( 'GN' )

import sys, os.path

# store Doc generate functor
class DocGenerator:

    def __init__( self ):
        self.target = File('#bin/sdk/doc/reference.chm')
        self.outdir = Dir('.')

    def __call__( self, env, sources ):

        doxygen = File('#env/bin/mswin/x86/doxygen.exe').path
        genchm = 'YES'

        doxyFileName = os.path.join( self.outdir.abspath, 'DoxyFile' )

        doxyfile = env.Command(
            doxyFileName, sources,
            '%s $SOURCES OUTPUT_DIRECTORY=%s CHM_FILE=%s GENERATE_HTMLHELP=%s HHC_LOCATION=%s > $TARGET'%(
                sys.executable,
                self.outdir,
                self.target.abspath,
                genchm,
                File('#env/bin/mswin/x86/hhc.exe').abspath,
                )
            )

        manual = env.Command(
            self.target, doxyFileName,
            '%s $SOURCES'%(doxygen)
            )

        env.Depends( manual, GN.glob( '#src/priv/*.[h|inl]', True ) )
        return manual

Import( 'GN' )
if 'mswin' == GN.compiler.os:
    cluster = GN.newCustomSourceCluster( ['gendoxyfile.py','doxyfile.in'], DocGenerator() )
    GN.newNeutralCustomTarget( 'GNdoc', [cluster] )

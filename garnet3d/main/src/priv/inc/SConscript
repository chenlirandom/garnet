Import( 'GN' )

import os.path

def GenConfigHeader( target, source, env ):

	def bool2str( b ):
		if b: return '1'
		else: return '0'

	FILE = open( target[0].path, 'wt' )
	FILE.writelines(
		'// *NOTE*: AUTO GENERATED FILE. DO NOT EDIT!\n'
		'//\n'
		'// This file defines compile time configurations.\n'
		'//\n'
		'\n'
		'// Has OpenGL\n'
		'#define GN_PLATFORM_HAS_OGL   '    + bool2str( GN.conf['has_ogl']    ) + '\n'
		'\n'
		'// Has dxerr.h\n'
		'#define GN_PLATFORM_HAS_DXERR '   + bool2str( GN.conf['has_dxerr']   ) + '\n'
		'\n'
		'// Has xnamath.h\n'
		'#define GN_PLATFORM_HAS_XNAMATH ' + bool2str( GN.conf['has_xnamath'] ) + '\n'
		'\n'
		'// Has D3D9 (Windows or Xbox)\n'
		'#define GN_PLATFORM_HAS_D3D9  '   + bool2str( GN.conf['has_d3d9']    ) + '\n'
		'\n'
		'// Has D3D10\n'
		'#define GN_PLATFORM_HAS_D3D10 '   + bool2str( GN.conf['has_d3d10']   ) + '\n'
		'\n'
		'// Has D3D11\n'
		'#define GN_PLATFORM_HAS_D3D11 '   + bool2str( GN.conf['has_d3d11']   ) + '\n'
		)
	FILE.close()
	return 0

def ConfigHeaderBuilder( env, sources, blddir ):
	target = [blddir + '/src/priv/inc/garnet/base/platform.' + GN.compiler.os + "." + GN.compiler.cpu + '.h']
	env.AlwaysBuild( target )
	env.Command( target[0], None, GenConfigHeader )
	return target
cluster = GN.newCustomSourceCluster( [], ConfigHeaderBuilder )
target = GN.newCustomTarget( 'GNinc', [cluster] )

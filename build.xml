<project name="Garnet3D" default="all" basedir=".">

	<taskdef resource="net/sf/antcontrib/antlib.xml"/>
	<taskdef resource="cpptasks.tasks"/>
	<typedef resource="cpptasks.types"/>

	<!--
	============================================================================
		Define global properties
	============================================================================
	-->

	<!-- detect current OS family -->
	<osfamily property="os.family"/>

	<!-- define user configuable properties and their default values -->
	<property name="platform" value="${os.family}"/>
	<property name="arch" value="${os.arch}"/>
	<condition property="toolset" value="vs8"><os family="windows"/></condition>
	<condition property="toolset" value="gcc"><os family="unix"/></condition>
	<property name="flavor" value="retail"/>
	<property name="cg" value="true"/>

	<!-- TODO: check value of user configuable properties -->

	<!-- Define private variables (user should not override values of these properties -->
	<property environment="env"/>
	<property name="root" location="${basedir}"/>
	<property name="privroot" location="src/priv"/>
	<property name="bldroot" location="build.tmp/ant/${platform}/${arch}/${toolset}/${flavor}"/>
	<condition property="is_debug">
		<or>
			<equals arg1="${flavor}" arg2="debug"/>
			<equals arg1="${flavor}" arg2="stdbg"/>
		</or>
	</condition>
	<condition property="is_static">
		<or>
			<equals arg1="${flavor}" arg2="stdbg"/>
			<equals arg1="${flavor}" arg2="stprof"/>
			<equals arg1="${flavor}" arg2="strel"/>
		</or>
	</condition>

	<!--
	============================================================================
		Top level targets
	============================================================================
	-->

	<!--
		Show usage
	-->
	<target name="usage">
		<echo level="info"></echo>
	</target>

	<!--
		Do clean
	-->
	<target name="clean" depends="init">
		<delete dir="${bldroot}"/>
	</target>

	<!--
		Do compilation
	-->
	<target name="all" depends="init,config,GNbase">
	</target>

	<!--
	============================================================================
		Sub-component targets
	============================================================================
	-->

	<target name="GNbase.base">
		<vc80_compile
			objdir="${bldroot}/GNbase/base"
			pch.source="${privroot}/base/base/pch.cpp"
			>
			<sources>
				<fileset dir="${privroot}/base/base" includes="*.cpp" excludes="pch.cpp"/>
			</sources>
		</vc80_compile>
	</target>

	<target name="GNbase.input">
		<vc80_compile
			objdir="${bldroot}/GNbase/input"
			pch.source="${privroot}/base/input/pch.cpp"
			>
			<sources>
				<fileset dir="${privroot}/base/input" includes="*.cpp" excludes="pch.cpp"/>
			</sources>
		</vc80_compile>
	</target>

	<target name="GNbase.win">
		<vc80_compile
			objdir="${bldroot}/GNbase/win"
			pch.source="${privroot}/base/win/pch.cpp"
			>
			<sources>
				<fileset dir="${privroot}/base/win" includes="*.cpp" excludes="pch.cpp"/>
			</sources>
		</vc80_compile>
	</target>

	<target name="GNbase" depends="GNbase.base,GNbase.input,GNbase.win">
		<vc80_lib
			outdir="${bldroot}/GNbase"
			target="GNbase"
			>
			<sources>
				<fileset dir="${bldroot}/GNbase" includes="**/*.obj" excludes="**/pch.*"/>
			</sources>
		</vc80_lib>
	</target>

	<!--
	============================================================================
		MSVS 2005 compile/link tasks
	============================================================================
	-->

	<macrodef name="vc80_compile">
		<attribute name="if" default=""/>
		<attribute name="objdir"/>
		<attribute name="pch.header" default="pch.h"/>
		<attribute name="pch.source" default=""/>
		<element name="sources"/>
		<sequential>
			<mkdir dir="@{objdir}"/>
			<var name="clargs" value="@{objdir}\clargs.txt"/>
			<!-- write CL arguments to file -->
			<property name="priv.inc" location="${root}/src/priv/inc"/>
			<property name="extern.inc" location="${root}/src/extern/inc"/>
			<echo file="${clargs}">/c /nologo /EHsc
/I "${priv.inc}"
/I "${extern.inc}"
/Zi
/Fp"@{objdir}\pch.pch"
</echo>
			<!-- check for PCH options -->
			<if>
				<and>
					<not><equals arg1="@{pch.header}" arg2=""/></not>
					<not><equals arg1="@{pch.source}" arg2=""/></not>
				</and>
				<then>
					<!-- compile PCH source -->
					<exec executable="cl" dir="@{objdir}">
						<arg value="@${clargs}"/>
						<arg value="/Yc@{pch.header}"/>
						<arg file="@{pch.source}"/>
					</exec>
					<!-- write PCH compile options -->
					<echo append="true" file="${clargs}">/Yu"@{pch.header}"
</echo>
				</then>
				<else>
				</else>
			</if>

			<!-- write source files -->
			<for trim="true" param="file" >
				<sources/>
				<sequential>
					<echo append="true" file="${clargs}">@{file}
</echo>
				</sequential>
			</for>
			<!-- run CL -->
			<exec executable="cl" dir="@{objdir}">
				<arg value="@${clargs}"/>
			</exec>
		</sequential>
	</macrodef>

	<macrodef name="vc80_lib">
		<attribute name="if" default=""/>
		<attribute name="outdir"/>
		<attribute name="target"/>
		<element name="sources"/>
		<sequential>
			<mkdir dir="@{outdir}"/>
			<var name="libargs" value="@{outdir}\libargs.txt"/>

			<!-- write LIB arguments to file -->
			<echo file="${libargs}">/nologo
/machine:${arch}
/out:@{outdir}\@{target}.lib
</echo>
			<!-- write source files -->
			<for trim="true" param="file" >
				<sources/>
				<sequential>
					<echo append="true" file="${libargs}">@{file}
</echo>
				</sequential>
			</for>

			<!-- run LIB -->
			<exec executable="lib" dir="@{outdir}">
				<arg value="@${libargs}"/>
			</exec>
		</sequential>
	</macrodef>

	<macrodef name="vc80_link">
		<attribute name="if" default=""/>
		<attribute name="outdir"/>
		<attribute name="target"/>
		<attribute name="type"/>
		<element name="sources"/>
		<sequential>
			<mkdir dir="@{outdir}"/>
			<var name="linkargs" value="@{outdir}\linkargs.txt"/>
			<!-- determine link type -->
			<switch value="@{type}">
				<case value="shared">
					<var name="ext" value=".dll"/>
				</case>
				<case value="exec">
					<var name="ext" value=".exe"/>
				</case>
			</switch>

			<!-- write LINK arguments to file -->
			<echo file="${linkargs}">/nologo
/debug
/machine:${arch}
/out:@{outdir}\@{target}${ext}
</echo>
			<!-- write source files -->
			<for trim="true" param="file" >
				<sources/>
				<sequential>
					<echo append="true" file="${linkargs}">@{file}
</echo>
				</sequential>
			</for>

			<!-- run LINK -->
			<exec executable="link" dir="@{outdir}">
				<arg value="@${linkargs}"/>
			</exec>
		</sequential>
	</macrodef>

	<!--
	============================================================================
		Utility tasks and targets
	============================================================================
	-->

	<!--
		Initialize build procedure
	-->
	<target name="init">
		<tstamp/>
		<echo level="info">
platform    = ${platform}
arch        = ${arch}
toolset     = ${toolset}
flavor      = ${flavor}
cg          = ${cg}
		</echo>
	</target>

	<!--
		Check configurations
	-->
	<target name="config">
		<condition property="has_d3d9" else="false">
			<and>
				<available file="d3d9.h" filepath="${env.INCLUDE}"/>
				<available file="d3dx9.h" filepath="${env.INCLUDE}"/>
				<available file="d3d9.lib" filepath="${env.LIB}"/>
				<available file="d3dx9.lib" filepath="${env.LIB}"/>
				<available file="d3dx9d.lib" filepath="${env.LIB}"/>
			</and>
		</condition>

		<condition property="has_d3d10" else="false">
			<!-- TODO: disable d3d10 on XP for static flavors -->
			<and>
				<available file="d3d10.h" filepath="${env.INCLUDE}"/>
				<available file="d3dx10.h" filepath="${env.INCLUDE}"/>
				<available file="d3dx10.lib" filepath="${env.LIB}"/>
				<available file="d3dx10d.lib" filepath="${env.LIB}"/>
			</and>
		</condition>

		<condition property="has_ogl" else="false">
			<and>
				<available file="GL/gl.h" filepath="${env.INCLUDE}"/>
				<available file="GL/glu.h" filepath="${env.INCLUDE}"/>
				<or>
					<and>
						<available file="opengl32.lib" filepath="${env.LIB}"/>
						<available file="glu32.lib" filepath="${env.LIB}"/>
					</and>
					<!-- TODO: check opengl libraries for unix system -->
				</or>
			</and>
		</condition>

		<condition property="has_cg" else="false">
			<and>
				<equals arg1="${cg}" arg2="true"/>
				<available file="Cg/cg.h" filepath="${env.INCLUDE}"/>
				<or>
					<available file="cg.lib" filepath="${env.LIB}"/>
					<!-- TODO: check Cg libraries on other platforms -->
				</or>
			</and>
		</condition>

		<condition property="has_cg_d3d9" else="false">
			<and>
				<equals arg1="${has_cg}" arg2="true"/>
				<equals arg1="${has_d3d9}" arg2="true"/>
				<available file="Cg/cgD3D9.h" filepath="${env.INCLUDE}"/>
				<available file="cgD3D9.lib" filepath="${env.LIB}"/>
			</and>
		</condition>

		<condition property="has_cg_ogl" else="false">
			<and>
				<equals arg1="${has_cg}" arg2="true"/>
				<equals arg1="${has_ogl}" arg2="true"/>
				<available file="Cg/cgGL.h" filepath="${env.INCLUDE}"/>
				<or>
					<available file="cgGL.lib" filepath="${env.LIB}"/>
					<!-- TODO: check Cg libraries on other platforms -->
				</or>
			</and>
		</condition>

		<!-- display property values -->
		<echo level="info">
has_d3d9    = ${has_d3d9}
has_d3d10   = ${has_d3d10}
has_ogl     = ${has_ogl}
has_cg      = ${has_cg}
has_cg_d3d9 = ${has_cg_d3d9}
has_cg_ogl  = ${has_cg_ogl}
		</echo>
	</target>
</project>

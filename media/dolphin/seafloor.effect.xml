<?xml version="1.0" encoding="utf-8"?>
<effect>
	<parameters>
		<uniform name="view" type="MATRIX44"/>   <!-- view matrix -->
		<uniform name="proj" type="MATRIX44"/>   <!-- projection matrix -->
		<uniform name="caustic" type="VECTOR4"/> <!-- caustic coordinate (scale_x, scale_y, offset_x, offset_y) -->
		<texture name="seafloor" addressu="WRAP" addressv="WRAP"/> <!-- seafloor texture -->
		<texture name="caustic" addressu="WRAP" addressv="WRAP"/>  <!-- caustic texture -->
		<attribute name="POSITION0"/>
		<attribute name="NORMAL0"/>
		<attribute name="TEXCOORD0"/>
	</parameters>

	<!--
	============================================================================
		gpuprograms
	============================================================================
	-->

	<gpuprograms>

		<!-- D3D9 HLSL program -->

		<gpuprogram name="hlsl9" lang="hlsl9" shaderModel="SM_2_0">
			<uniref uniform="view" shaderParameter="view"/>
			<uniref uniform="proj" shaderParameter="proj"/>
			<uniref uniform="caustic" shaderParameter="caustic"/>
			<texref texture="seafloor" shaderParameter="DiffuseSampler"/>
			<texref texture="caustic" shaderParameter="CausticsSampler"/>
			<attref attribute="POSITION0" shaderParameter="POSITION0"/>
			<attref attribute="NORMAL0"   shaderParameter="NORMAL0"/>
			<attref attribute="TEXCOORD0" shaderParameter="TEXCOORD0"/>
			<vs entry="main">
<![CDATA[
uniform float4x4 view;
uniform float4x4 proj;
uniform float4   caustic;

struct VSOUT
{
    float4 vPosition         : POSITION;
    float4 vMisc             : TEXCOORD0; // x = light, y = fog, zw = pos.zw
    float2 vBaseTexCoords    : TEXCOORD1;
    float2 vCausticTexCoords : TEXCOORD2;
};

VSOUT main(
	in  float4 ipos : POSITION0,
	in  float3 inml : NORMAL0,
	in  float2 itex : TEXCOORD0 )
{
	const float3 lightdir = { 0, 1, 0 };
	const float4 fogrange = { 0.5,50.0, 1.0/(50.0-1.0), 0 }; // ( x, fog_end, (1/(fog_end-fog_start)), x )

	// Transform to view space (world matrix is identity)
	float4 vpos = mul( view, ipos );

	// Transform to projection space
	float4 opos =  mul( proj, vpos );

	// Lighting calculation
	float fLightValue = max( dot( inml, lightdir ), 0 );

	// Generate water caustic tex coords from vertex xz position
	float2 vCausticTexCoords = caustic.xy * vpos.xz + caustic.zw;

	// Fog calculation:
	float fFogValue = clamp( (fogrange.y - vpos.z) * fogrange.z, 0, 1 );

	// Compress output values
	VSOUT o;
	o.vPosition         = opos;
	o.vMisc.x           = fLightValue;
	o.vMisc.y           = fFogValue;
	o.vMisc.zw          = opos.zw;
	o.vBaseTexCoords    = itex;
	o.vCausticTexCoords = vCausticTexCoords;
	return o;
}
]]>
			</vs>
			<ps entry="main">
<![CDATA[

struct VSOUT
{
    float4 vPosition         : POSITION;
    float4 vMisc             : TEXCOORD0;     // COLOR0.x = light, COLOR0.y = fog
    float2 vBaseTexCoords    : TEXCOORD1;
    float2 vCausticTexCoords : TEXCOORD2;
};

sampler   DiffuseSampler  : register(s0);
sampler   CausticsSampler : register(s1);

void main(
	VSOUT Input,
	out float4 oC0 : COLOR0,
	out float4 oC1 : COLOR1 )
{
	const float4 g_vFogColor = { 0.0f, 0.25f, 0.5f, 1.0f };
	const float3 g_vAmbient  = { 0.25f, 0.25f, 0.25f };

    // Decompress input values
    float3 vLightColor       = Input.vMisc.xxx;
    float  fFogValue         = Input.vMisc.y;
    float2 vBaseTexCoords    = Input.vBaseTexCoords.xy;
    float2 vCausticTexCoords = Input.vCausticTexCoords.xy;

    // Fetch from the textures
    float4 vDiffuse  = tex2D( DiffuseSampler,  vBaseTexCoords );
    float4 vCaustics = tex2D( CausticsSampler, vCausticTexCoords );

    // Combine lighting, base texture and water caustics texture
    float4 PixelColor0 = vDiffuse  * float4( vLightColor + g_vAmbient, 1 );
    float4 PixelColor1 = vCaustics * float4( vLightColor, 1 );

    // Return color blended with fog
    oC0 = lerp( g_vFogColor, PixelColor0 + PixelColor1, fFogValue );

    // Write depth to 2nd render target
    oC1 = Input.vMisc.z / Input.vMisc.w;
}
]]>
			</ps>
		</gpuprogram>

		<!-- GLSL program -->

		<gpuprogram name="glsl" lang="GLSL" shaderModel="GLSL_1_10">
			<uniref uniform="view" shaderParameter="view"/>
			<uniref uniform="proj" shaderParameter="proj"/>
			<uniref uniform="caustic" shaderParameter="caustic"/>
			<texref texture="seafloor" shaderParameter="DiffuseSampler"/>
			<texref texture="caustic" shaderParameter="CausticsSampler"/>
			<attref attribute="POSITION0" shaderParameter="i_Position0"/>
			<attref attribute="NORMAL0"   shaderParameter="i_Normal0"/>
			<attref attribute="TEXCOORD0" shaderParameter="i_TexCoord0"/>
			<vs entry="main">
<![CDATA[
in vec4 i_Position0;
in vec3 i_Normal0;
in vec2 i_TexCoord0;

uniform mat4 view;
uniform mat4 proj;
uniform vec4 caustic;

// Output
varying vec4 vMisc; // x = light, y = fog, zw = opos.zw
varying vec2 vBaseTexCoords;
varying vec2 vCausticTexCoords;

void main()
{
	const vec3 lightdir = vec3( 0, 1, 0 );
	const vec4 fogrange = vec4( 0.5,50.0, 1.0/(50.0-1.0), 0 ); // ( x, fog_end, (1/(fog_end-fog_start)), x )

	// Transform to view space (world matrix is identity)
	vec4 vpos = view * i_Position0;

	// Transform to projection space
	vec4 opos =  proj * vpos;

	// Lighting calculation
	float fLightValue = max( dot( i_Normal0, lightdir ), 0.0 );

	// Fog calculation:
	float fFogValue = clamp( (fogrange.y - vpos.z) * fogrange.z, 0.0, 1.0 );

	// Compress output values
	gl_Position       = opos;
	vMisc.x           = fLightValue;
	vMisc.y           = fFogValue;
	vMisc.zw          = opos.zw;
	vBaseTexCoords    = i_TexCoord0;

	// Generate water caustic tex coords from vertex xz position
	vCausticTexCoords = caustic.xy * vpos.xz + caustic.zw;
}
]]>
			</vs>
			<ps entry="main">
<![CDATA[
uniform sampler2D DiffuseSampler;
uniform sampler2D CausticsSampler;

varying vec4 vMisc; // x = light, y = fog, zw = opos.zw
varying vec2 vBaseTexCoords;
varying vec2 vCausticTexCoords;

void main()
{
    const vec4 g_vFogColor = vec4( 0.0, 0.25, 0.5, 1.0 );
    const vec3 g_vAmbient  = vec3( 0.25, 0.25, 0.25 );

    // Decompress input values
    vec3  vLightColor       = vMisc.xxx;
    float fFogValue         = vMisc.y;
    vec2  vBaseTexCoords    = vBaseTexCoords.xy;
    vec2  vCausticTexCoords = vCausticTexCoords.xy;

    // Fetch from the textures
    vec4 vDiffuse  = texture2D( DiffuseSampler,  vBaseTexCoords );
    vec4 vCaustics = texture2D( CausticsSampler, vCausticTexCoords );

    // Combine lighting, base texture and water caustics texture
    vec4 PixelColor0 = vDiffuse  * vec4( vLightColor + g_vAmbient, 1 );
    vec4 PixelColor1 = vCaustics * vec4( vLightColor, 1 );

    // Return color blended with fog
    gl_FragColor = mix( g_vFogColor, PixelColor0 + PixelColor1, fFogValue );

    // Write depth to 2nd render target
    // gl_FragDepth = Input.vMisc.z / Input.vMisc.w;
}
]]>
			</ps>
		</gpuprogram>
	</gpuprograms>

	<!--
	============================================================================
		Techniques
	============================================================================
	-->

	<techniques>
        <renderstates
			CULL_MODE="CULL_NONE"
		/>
		<technique name="hlsl9">
			<pass gpuprogram="hlsl9"/>
		</technique>
		<technique name="glsl">
			<pass gpuprogram="glsl"/>
		</technique>
	</techniques>
</effect>

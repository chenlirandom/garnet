Import( 'env GN_conf GN_targets GN_func' )

import os, os.path

root = os.path.join( GN_conf['platform'], GN_conf['compiler'], GN_conf['variant'] )

def doInstall( alias, dir, names ):
    for name in names:
        if name in GN_targets and GN_targets[name]:
            item = env.Install( dir, GN_targets[name] )
            GN_targets[name] = item
            env.Alias( alias, item )

def doCopyDir( alias, target, source ):
    relpath = GN_func['relpath']
    for src in GN_func['glob']('*.*', source, True):
        dst = os.path.join( target, relpath(src,source) )
        env.Command( dst, src, Copy('$TARGET', '$SOURCE') )
        env.Alias( alias, dst )

# populate sample directory
doInstall(
    'samples',
    os.path.join( root, 'samples' ),
    Split('GNcoreBin GNtest') )
if 'GNcoreBin' in GN_targets: env.Depends( GN_targets['GNtest'], GN_targets['GNcoreBin'] )

# HACK: Make GNtest.exe depends on GNtest.exe.manifest, to make sure GNTest.exe.manifest are copied
#       to sample directory, before execution of GNtest.exe
if 'vs8' == GN_conf['compiler']:
    for target in Split('GNtest GNcoreBin'):
        for x in GN_targets[target][1:]:
            env.Depends( GN_targets[target][0], x )

# run unit test
def run_test( target, source, env ):
    return os.spawnl( os.P_WAIT, target[0].path )
AddPostAction( GN_targets['GNtest'][0], run_test )

# populate SDK directory
sdk_root = os.path.join( root, 'sdk' )
doInstall(
    'sdk',
    os.path.join(sdk_root,'bin'),
    Split('GNcoreBin') )
doCopyDir(
    'sdk',
    os.path.join(sdk_root,'inc'),
    os.path.join('#core','priv','inc') )
doInstall(
    'sdk',
    os.path.join(sdk_root,'lib'),
    Split('GNcoreLib GNbase GNextern GNd3d GNogl') )
doInstall(
    'sdk',
    os.path.join(sdk_root,'doc'),
    Split('GNdoc') )

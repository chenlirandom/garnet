Import('env GN_targets GN_conf')

import os.path

#
#
# -----------------------------------------------------------------------------
def to_relpath( files ):
    return [ env.GN_relpath( File(x).path, Dir('.').srcnode().path ) for x in files ]

#
#
# -----------------------------------------------------------------------------
def build_proj( target, srcdir=[], incdir=[] ):
    if not target in GN_targets: return

    sources = env.GN_glob( '*.[c]*', srcdir, True )
    if 0 == len(incdir):
        includes = env.GN_glob( '%s.h'%target, '#core/priv/inc/garnet' )
        includes += env.GN_glob( '*.[hi]*', ['#core/priv/inc/garnet/%s'%target[2:]], True )
    else:
        includes = env.GN_glob( '*.[hi]*', incdir, True )
    localincs = env.GN_glob( '*.[hi]*', srcdir, True )

    proj = env.MSVSProject(
        target      = target + env['MSVSPROJECTSUFFIX'],
        buildtarget = GN_targets[target],
        variant     = GN_conf['variant'],
        srcs        = to_relpath(sources),
        incs        = to_relpath(includes),
        localincs   = to_relpath(localincs),
        resources   = [],
        misc        = [],
        )

    env.AlwaysBuild( proj );

###############################################################################
#
# Build project for garnet components
#
###############################################################################

build_proj( 'GNextern', ['#core/extern/src'], ['#core/extern/inc'] )
build_proj( 'GNbase', ['#core/priv/base'] )
build_proj( 'GNcore', ['#core/priv/core'] )
build_proj( 'GNd3d', ['#core/priv/d3d'] )
build_proj( 'GNd3dTest', ['#core/priv/d3d/test'] )
build_proj( 'GNogl', ['#core/priv/ogl'] )
build_proj( 'GNoglTest', ['#core/priv/ogl/test'] )
build_proj( 'GNtest', ['#core/priv/test'] )
